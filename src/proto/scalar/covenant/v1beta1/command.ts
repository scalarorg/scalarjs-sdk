// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/covenant/v1beta1/command.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Any } from "../../../google/protobuf/any";

export const protobufPackage = "scalar.covenant.v1beta1";

export enum StandaloneCommandStatus {
  STANDALONE_COMMAND_STATUS_UNSPECIFIED = 0,
  STANDALONE_COMMAND_STATUS_SIGNING = 1,
  STANDALONE_COMMAND_STATUS_ABORTED = 2,
  STANDALONE_COMMAND_STATUS_SIGNED = 3,
  UNRECOGNIZED = -1,
}

export function standaloneCommandStatusFromJSON(
  object: any,
): StandaloneCommandStatus {
  switch (object) {
    case 0:
    case "STANDALONE_COMMAND_STATUS_UNSPECIFIED":
      return StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_UNSPECIFIED;
    case 1:
    case "STANDALONE_COMMAND_STATUS_SIGNING":
      return StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_SIGNING;
    case 2:
    case "STANDALONE_COMMAND_STATUS_ABORTED":
      return StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_ABORTED;
    case 3:
    case "STANDALONE_COMMAND_STATUS_SIGNED":
      return StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_SIGNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StandaloneCommandStatus.UNRECOGNIZED;
  }
}

export function standaloneCommandStatusToJSON(
  object: StandaloneCommandStatus,
): string {
  switch (object) {
    case StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_UNSPECIFIED:
      return "STANDALONE_COMMAND_STATUS_UNSPECIFIED";
    case StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_SIGNING:
      return "STANDALONE_COMMAND_STATUS_SIGNING";
    case StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_ABORTED:
      return "STANDALONE_COMMAND_STATUS_ABORTED";
    case StandaloneCommandStatus.STANDALONE_COMMAND_STATUS_SIGNED:
      return "STANDALONE_COMMAND_STATUS_SIGNED";
    case StandaloneCommandStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SigType {
  SIG_TYPE_UNSPECIFIED = 0,
  SIG_TYPE_COMMAND = 1,
  UNRECOGNIZED = -1,
}

export function sigTypeFromJSON(object: any): SigType {
  switch (object) {
    case 0:
    case "SIG_TYPE_UNSPECIFIED":
      return SigType.SIG_TYPE_UNSPECIFIED;
    case 1:
    case "SIG_TYPE_COMMAND":
      return SigType.SIG_TYPE_COMMAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SigType.UNRECOGNIZED;
  }
}

export function sigTypeToJSON(object: SigType): string {
  switch (object) {
    case SigType.SIG_TYPE_UNSPECIFIED:
      return "SIG_TYPE_UNSPECIFIED";
    case SigType.SIG_TYPE_COMMAND:
      return "SIG_TYPE_COMMAND";
    case SigType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface StandaloneCommandMetadata {
  id: Uint8Array;
  commandId: Uint8Array;
  chain: string;
  data: Uint8Array;
  sigHash: Uint8Array;
  status: StandaloneCommandStatus;
  keyId: string;
  signature?: Any | undefined;
}

export interface StandaloneCommandSigned {
  chain: string;
  commandId: Uint8Array;
}

export interface StandaloneCommandAborted {
  chain: string;
  commandId: Uint8Array;
}

export interface SigMetadata {
  type: SigType;
  chain: string;
  commandId: Uint8Array;
}

function createBaseStandaloneCommandMetadata(): StandaloneCommandMetadata {
  return {
    id: new Uint8Array(0),
    commandId: new Uint8Array(0),
    chain: "",
    data: new Uint8Array(0),
    sigHash: new Uint8Array(0),
    status: 0,
    keyId: "",
    signature: undefined,
  };
}

export const StandaloneCommandMetadata = {
  encode(
    message: StandaloneCommandMetadata,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id.length !== 0) {
      writer.uint32(10).bytes(message.id);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(18).bytes(message.commandId);
    }
    if (message.chain !== "") {
      writer.uint32(26).string(message.chain);
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data);
    }
    if (message.sigHash.length !== 0) {
      writer.uint32(42).bytes(message.sigHash);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.keyId !== "") {
      writer.uint32(58).string(message.keyId);
    }
    if (message.signature !== undefined) {
      Any.encode(message.signature, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): StandaloneCommandMetadata {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandaloneCommandMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sigHash = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.signature = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandaloneCommandMetadata {
    return {
      id: isSet(object.id) ? bytesFromBase64(object.id) : new Uint8Array(0),
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
      sigHash: isSet(object.sigHash)
        ? bytesFromBase64(object.sigHash)
        : new Uint8Array(0),
      status: isSet(object.status)
        ? standaloneCommandStatusFromJSON(object.status)
        : 0,
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      signature: isSet(object.signature)
        ? Any.fromJSON(object.signature)
        : undefined,
    };
  },

  toJSON(message: StandaloneCommandMetadata): unknown {
    const obj: any = {};
    if (message.id.length !== 0) {
      obj.id = base64FromBytes(message.id);
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.sigHash.length !== 0) {
      obj.sigHash = base64FromBytes(message.sigHash);
    }
    if (message.status !== 0) {
      obj.status = standaloneCommandStatusToJSON(message.status);
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.signature !== undefined) {
      obj.signature = Any.toJSON(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandaloneCommandMetadata>, I>>(
    base?: I,
  ): StandaloneCommandMetadata {
    return StandaloneCommandMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandaloneCommandMetadata>, I>>(
    object: I,
  ): StandaloneCommandMetadata {
    const message = createBaseStandaloneCommandMetadata();
    message.id = object.id ?? new Uint8Array(0);
    message.commandId = object.commandId ?? new Uint8Array(0);
    message.chain = object.chain ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.sigHash = object.sigHash ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.keyId = object.keyId ?? "";
    message.signature =
      object.signature !== undefined && object.signature !== null
        ? Any.fromPartial(object.signature)
        : undefined;
    return message;
  },
};

function createBaseStandaloneCommandSigned(): StandaloneCommandSigned {
  return { chain: "", commandId: new Uint8Array(0) };
}

export const StandaloneCommandSigned = {
  encode(
    message: StandaloneCommandSigned,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): StandaloneCommandSigned {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandaloneCommandSigned();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandaloneCommandSigned {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
    };
  },

  toJSON(message: StandaloneCommandSigned): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandaloneCommandSigned>, I>>(
    base?: I,
  ): StandaloneCommandSigned {
    return StandaloneCommandSigned.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandaloneCommandSigned>, I>>(
    object: I,
  ): StandaloneCommandSigned {
    const message = createBaseStandaloneCommandSigned();
    message.chain = object.chain ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseStandaloneCommandAborted(): StandaloneCommandAborted {
  return { chain: "", commandId: new Uint8Array(0) };
}

export const StandaloneCommandAborted = {
  encode(
    message: StandaloneCommandAborted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): StandaloneCommandAborted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStandaloneCommandAborted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StandaloneCommandAborted {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
    };
  },

  toJSON(message: StandaloneCommandAborted): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StandaloneCommandAborted>, I>>(
    base?: I,
  ): StandaloneCommandAborted {
    return StandaloneCommandAborted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StandaloneCommandAborted>, I>>(
    object: I,
  ): StandaloneCommandAborted {
    const message = createBaseStandaloneCommandAborted();
    message.chain = object.chain ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSigMetadata(): SigMetadata {
  return { type: 0, chain: "", commandId: new Uint8Array(0) };
}

export const SigMetadata = {
  encode(
    message: SigMetadata,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SigMetadata {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigMetadata {
    return {
      type: isSet(object.type) ? sigTypeFromJSON(object.type) : 0,
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
    };
  },

  toJSON(message: SigMetadata): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = sigTypeToJSON(message.type);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigMetadata>, I>>(base?: I): SigMetadata {
    return SigMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigMetadata>, I>>(
    object: I,
  ): SigMetadata {
    const message = createBaseSigMetadata();
    message.type = object.type ?? 0;
    message.chain = object.chain ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
