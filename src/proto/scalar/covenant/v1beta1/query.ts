// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/covenant/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";
import {
  KeyState,
  keyStateFromJSON,
  keyStateToJSON,
} from "../../multisig/exported/v1beta1/types";
import { KeygenParticipant } from "../../multisig/v1beta1/query";
import {
  Custodian,
  CustodianGroup,
  Status,
  statusFromJSON,
  statusToJSON,
} from "../exported/v1beta1/custodian";
import { Params } from "./params";
import { RedeemSession } from "./redeem";

export const protobufPackage = "scalar.covenant.v1beta1";

export interface CustodiansRequest {
  name: string;
  pubkey: Uint8Array;
  status: Status;
}

export interface CustodiansResponse {
  custodians: Custodian[];
}

export interface GroupsRequest {
  uid: Uint8Array;
}

export interface GroupsResponse {
  groups: CustodianGroup[];
}

/** ParamsRequest represents a message that queries the params */
export interface ParamsRequest {}

export interface ParamsResponse {
  params?: Params | undefined;
}

export interface KeyRequest {
  chain: string;
}

/** KeyResponse contains the key corresponding to a given key id. */
export interface KeyResponse {
  keyId: string;
  state: KeyState;
  startedAt: Long;
  startedAtTimestamp?: Date | undefined;
  thresholdWeight: Uint8Array;
  bondedWeight: Uint8Array;
  /** Keygen participants in descending order by weight */
  participants: KeygenParticipant[];
}

export interface RedeemSessionRequest {
  uid: Uint8Array;
}

export interface RedeemSessionResponse {
  session?: RedeemSession | undefined;
}

function createBaseCustodiansRequest(): CustodiansRequest {
  return { name: "", pubkey: new Uint8Array(0), status: 0 };
}

export const CustodiansRequest = {
  encode(
    message: CustodiansRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.pubkey.length !== 0) {
      writer.uint32(18).bytes(message.pubkey);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustodiansRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustodiansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pubkey = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustodiansRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      pubkey: isSet(object.pubkey)
        ? bytesFromBase64(object.pubkey)
        : new Uint8Array(0),
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CustodiansRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.pubkey.length !== 0) {
      obj.pubkey = base64FromBytes(message.pubkey);
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustodiansRequest>, I>>(
    base?: I,
  ): CustodiansRequest {
    return CustodiansRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustodiansRequest>, I>>(
    object: I,
  ): CustodiansRequest {
    const message = createBaseCustodiansRequest();
    message.name = object.name ?? "";
    message.pubkey = object.pubkey ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCustodiansResponse(): CustodiansResponse {
  return { custodians: [] };
}

export const CustodiansResponse = {
  encode(
    message: CustodiansResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.custodians) {
      Custodian.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustodiansResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustodiansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.custodians.push(Custodian.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustodiansResponse {
    return {
      custodians: globalThis.Array.isArray(object?.custodians)
        ? object.custodians.map((e: any) => Custodian.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustodiansResponse): unknown {
    const obj: any = {};
    if (message.custodians?.length) {
      obj.custodians = message.custodians.map((e) => Custodian.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustodiansResponse>, I>>(
    base?: I,
  ): CustodiansResponse {
    return CustodiansResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustodiansResponse>, I>>(
    object: I,
  ): CustodiansResponse {
    const message = createBaseCustodiansResponse();
    message.custodians =
      object.custodians?.map((e) => Custodian.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGroupsRequest(): GroupsRequest {
  return { uid: new Uint8Array(0) };
}

export const GroupsRequest = {
  encode(
    message: GroupsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uid.length !== 0) {
      writer.uint32(10).bytes(message.uid);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GroupsRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uid = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupsRequest {
    return {
      uid: isSet(object.uid) ? bytesFromBase64(object.uid) : new Uint8Array(0),
    };
  },

  toJSON(message: GroupsRequest): unknown {
    const obj: any = {};
    if (message.uid.length !== 0) {
      obj.uid = base64FromBytes(message.uid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupsRequest>, I>>(
    base?: I,
  ): GroupsRequest {
    return GroupsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupsRequest>, I>>(
    object: I,
  ): GroupsRequest {
    const message = createBaseGroupsRequest();
    message.uid = object.uid ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGroupsResponse(): GroupsResponse {
  return { groups: [] };
}

export const GroupsResponse = {
  encode(
    message: GroupsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.groups) {
      CustodianGroup.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GroupsResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groups.push(CustodianGroup.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupsResponse {
    return {
      groups: globalThis.Array.isArray(object?.groups)
        ? object.groups.map((e: any) => CustodianGroup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GroupsResponse): unknown {
    const obj: any = {};
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => CustodianGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupsResponse>, I>>(
    base?: I,
  ): GroupsResponse {
    return GroupsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupsResponse>, I>>(
    object: I,
  ): GroupsResponse {
    const message = createBaseGroupsResponse();
    message.groups =
      object.groups?.map((e) => CustodianGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParamsRequest(): ParamsRequest {
  return {};
}

export const ParamsRequest = {
  encode(
    _: ParamsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParamsRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ParamsRequest {
    return {};
  },

  toJSON(_: ParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamsRequest>, I>>(
    base?: I,
  ): ParamsRequest {
    return ParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamsRequest>, I>>(
    _: I,
  ): ParamsRequest {
    const message = createBaseParamsRequest();
    return message;
  },
};

function createBaseParamsResponse(): ParamsResponse {
  return { params: undefined };
}

export const ParamsResponse = {
  encode(
    message: ParamsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ParamsResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamsResponse {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: ParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamsResponse>, I>>(
    base?: I,
  ): ParamsResponse {
    return ParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamsResponse>, I>>(
    object: I,
  ): ParamsResponse {
    const message = createBaseParamsResponse();
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseKeyRequest(): KeyRequest {
  return { chain: "" };
}

export const KeyRequest = {
  encode(
    message: KeyRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): KeyRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyRequest {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
    };
  },

  toJSON(message: KeyRequest): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyRequest>, I>>(base?: I): KeyRequest {
    return KeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyRequest>, I>>(
    object: I,
  ): KeyRequest {
    const message = createBaseKeyRequest();
    message.chain = object.chain ?? "";
    return message;
  },
};

function createBaseKeyResponse(): KeyResponse {
  return {
    keyId: "",
    state: 0,
    startedAt: Long.ZERO,
    startedAtTimestamp: undefined,
    thresholdWeight: new Uint8Array(0),
    bondedWeight: new Uint8Array(0),
    participants: [],
  };
}

export const KeyResponse = {
  encode(
    message: KeyResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.keyId !== "") {
      writer.uint32(10).string(message.keyId);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (!message.startedAt.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.startedAt);
    }
    if (message.startedAtTimestamp !== undefined) {
      Timestamp.encode(
        toTimestamp(message.startedAtTimestamp),
        writer.uint32(34).fork(),
      ).ldelim();
    }
    if (message.thresholdWeight.length !== 0) {
      writer.uint32(42).bytes(message.thresholdWeight);
    }
    if (message.bondedWeight.length !== 0) {
      writer.uint32(50).bytes(message.bondedWeight);
    }
    for (const v of message.participants) {
      KeygenParticipant.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): KeyResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startedAt = reader.int64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.startedAtTimestamp = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.thresholdWeight = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bondedWeight = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.participants.push(
            KeygenParticipant.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyResponse {
    return {
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      state: isSet(object.state) ? keyStateFromJSON(object.state) : 0,
      startedAt: isSet(object.startedAt)
        ? Long.fromValue(object.startedAt)
        : Long.ZERO,
      startedAtTimestamp: isSet(object.startedAtTimestamp)
        ? fromJsonTimestamp(object.startedAtTimestamp)
        : undefined,
      thresholdWeight: isSet(object.thresholdWeight)
        ? bytesFromBase64(object.thresholdWeight)
        : new Uint8Array(0),
      bondedWeight: isSet(object.bondedWeight)
        ? bytesFromBase64(object.bondedWeight)
        : new Uint8Array(0),
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => KeygenParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: KeyResponse): unknown {
    const obj: any = {};
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.state !== 0) {
      obj.state = keyStateToJSON(message.state);
    }
    if (!message.startedAt.equals(Long.ZERO)) {
      obj.startedAt = (message.startedAt || Long.ZERO).toString();
    }
    if (message.startedAtTimestamp !== undefined) {
      obj.startedAtTimestamp = message.startedAtTimestamp.toISOString();
    }
    if (message.thresholdWeight.length !== 0) {
      obj.thresholdWeight = base64FromBytes(message.thresholdWeight);
    }
    if (message.bondedWeight.length !== 0) {
      obj.bondedWeight = base64FromBytes(message.bondedWeight);
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) =>
        KeygenParticipant.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyResponse>, I>>(base?: I): KeyResponse {
    return KeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyResponse>, I>>(
    object: I,
  ): KeyResponse {
    const message = createBaseKeyResponse();
    message.keyId = object.keyId ?? "";
    message.state = object.state ?? 0;
    message.startedAt =
      object.startedAt !== undefined && object.startedAt !== null
        ? Long.fromValue(object.startedAt)
        : Long.ZERO;
    message.startedAtTimestamp = object.startedAtTimestamp ?? undefined;
    message.thresholdWeight = object.thresholdWeight ?? new Uint8Array(0);
    message.bondedWeight = object.bondedWeight ?? new Uint8Array(0);
    message.participants =
      object.participants?.map((e) => KeygenParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRedeemSessionRequest(): RedeemSessionRequest {
  return { uid: new Uint8Array(0) };
}

export const RedeemSessionRequest = {
  encode(
    message: RedeemSessionRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uid.length !== 0) {
      writer.uint32(10).bytes(message.uid);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): RedeemSessionRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedeemSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uid = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedeemSessionRequest {
    return {
      uid: isSet(object.uid) ? bytesFromBase64(object.uid) : new Uint8Array(0),
    };
  },

  toJSON(message: RedeemSessionRequest): unknown {
    const obj: any = {};
    if (message.uid.length !== 0) {
      obj.uid = base64FromBytes(message.uid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedeemSessionRequest>, I>>(
    base?: I,
  ): RedeemSessionRequest {
    return RedeemSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedeemSessionRequest>, I>>(
    object: I,
  ): RedeemSessionRequest {
    const message = createBaseRedeemSessionRequest();
    message.uid = object.uid ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRedeemSessionResponse(): RedeemSessionResponse {
  return { session: undefined };
}

export const RedeemSessionResponse = {
  encode(
    message: RedeemSessionResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.session !== undefined) {
      RedeemSession.encode(message.session, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): RedeemSessionResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedeemSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.session = RedeemSession.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedeemSessionResponse {
    return {
      session: isSet(object.session)
        ? RedeemSession.fromJSON(object.session)
        : undefined,
    };
  },

  toJSON(message: RedeemSessionResponse): unknown {
    const obj: any = {};
    if (message.session !== undefined) {
      obj.session = RedeemSession.toJSON(message.session);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedeemSessionResponse>, I>>(
    base?: I,
  ): RedeemSessionResponse {
    return RedeemSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedeemSessionResponse>, I>>(
    object: I,
  ): RedeemSessionResponse {
    const message = createBaseRedeemSessionResponse();
    message.session =
      object.session !== undefined && object.session !== null
        ? RedeemSession.fromPartial(object.session)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
