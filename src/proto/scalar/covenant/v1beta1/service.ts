// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/covenant/v1beta1/service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  CustodiansRequest,
  CustodiansResponse,
  GroupsRequest,
  GroupsResponse,
  ParamsRequest,
  ParamsResponse,
} from "./query";
import {
  AddCustodianToGroupRequest,
  CreateCustodianGroupRequest,
  CreateCustodianGroupResponse,
  CreateCustodianRequest,
  CreateCustodianResponse,
  CustodianToGroupResponse,
  RemoveCustodianFromGroupRequest,
  RotateKeyRequest,
  RotateKeyResponse,
  SubmitTapScriptSigsRequest,
  SubmitTapScriptSigsResponse,
  UpdateCustodianGroupRequest,
  UpdateCustodianGroupResponse,
  UpdateCustodianRequest,
  UpdateCustodianResponse,
} from "./tx";

export const protobufPackage = "scalar.covenant.v1beta1";

export interface MsgService {
  /** Create custodian */
  CreateCustodian(
    request: CreateCustodianRequest,
  ): Promise<CreateCustodianResponse>;
  /** Update custodian */
  UpdateCustodian(
    request: UpdateCustodianRequest,
  ): Promise<UpdateCustodianResponse>;
  /** Create custodian group */
  CreateCustodianGroup(
    request: CreateCustodianGroupRequest,
  ): Promise<CreateCustodianGroupResponse>;
  /** Update Custodian group */
  UpdateCustodianGroup(
    request: UpdateCustodianGroupRequest,
  ): Promise<UpdateCustodianGroupResponse>;
  /**
   * Add Custodian to custodian group
   * recalculate taproot pubkey when adding custodian to custodian group
   */
  AddCustodianToGroup(
    request: AddCustodianToGroupRequest,
  ): Promise<CustodianToGroupResponse>;
  /**
   * Remove Custodian from custodian group
   * recalculate taproot address when deleting custodian from custodian group
   */
  RemoveCustodianFromGroup(
    request: RemoveCustodianFromGroupRequest,
  ): Promise<CustodianToGroupResponse>;
  RotateKey(request: RotateKeyRequest): Promise<RotateKeyResponse>;
  SubmitTapScriptSigs(
    request: SubmitTapScriptSigsRequest,
  ): Promise<SubmitTapScriptSigsResponse>;
}

export const MsgServiceServiceName = "scalar.covenant.v1beta1.MsgService";
export class MsgServiceClientImpl implements MsgService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceServiceName;
    this.rpc = rpc;
    this.CreateCustodian = this.CreateCustodian.bind(this);
    this.UpdateCustodian = this.UpdateCustodian.bind(this);
    this.CreateCustodianGroup = this.CreateCustodianGroup.bind(this);
    this.UpdateCustodianGroup = this.UpdateCustodianGroup.bind(this);
    this.AddCustodianToGroup = this.AddCustodianToGroup.bind(this);
    this.RemoveCustodianFromGroup = this.RemoveCustodianFromGroup.bind(this);
    this.RotateKey = this.RotateKey.bind(this);
    this.SubmitTapScriptSigs = this.SubmitTapScriptSigs.bind(this);
  }
  CreateCustodian(
    request: CreateCustodianRequest,
  ): Promise<CreateCustodianResponse> {
    const data = CreateCustodianRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCustodian", data);
    return promise.then((data) =>
      CreateCustodianResponse.decode(_m0.Reader.create(data)),
    );
  }

  UpdateCustodian(
    request: UpdateCustodianRequest,
  ): Promise<UpdateCustodianResponse> {
    const data = UpdateCustodianRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCustodian", data);
    return promise.then((data) =>
      UpdateCustodianResponse.decode(_m0.Reader.create(data)),
    );
  }

  CreateCustodianGroup(
    request: CreateCustodianGroupRequest,
  ): Promise<CreateCustodianGroupResponse> {
    const data = CreateCustodianGroupRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "CreateCustodianGroup",
      data,
    );
    return promise.then((data) =>
      CreateCustodianGroupResponse.decode(_m0.Reader.create(data)),
    );
  }

  UpdateCustodianGroup(
    request: UpdateCustodianGroupRequest,
  ): Promise<UpdateCustodianGroupResponse> {
    const data = UpdateCustodianGroupRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "UpdateCustodianGroup",
      data,
    );
    return promise.then((data) =>
      UpdateCustodianGroupResponse.decode(_m0.Reader.create(data)),
    );
  }

  AddCustodianToGroup(
    request: AddCustodianToGroupRequest,
  ): Promise<CustodianToGroupResponse> {
    const data = AddCustodianToGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddCustodianToGroup", data);
    return promise.then((data) =>
      CustodianToGroupResponse.decode(_m0.Reader.create(data)),
    );
  }

  RemoveCustodianFromGroup(
    request: RemoveCustodianFromGroupRequest,
  ): Promise<CustodianToGroupResponse> {
    const data = RemoveCustodianFromGroupRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "RemoveCustodianFromGroup",
      data,
    );
    return promise.then((data) =>
      CustodianToGroupResponse.decode(_m0.Reader.create(data)),
    );
  }

  RotateKey(request: RotateKeyRequest): Promise<RotateKeyResponse> {
    const data = RotateKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RotateKey", data);
    return promise.then((data) =>
      RotateKeyResponse.decode(_m0.Reader.create(data)),
    );
  }

  SubmitTapScriptSigs(
    request: SubmitTapScriptSigsRequest,
  ): Promise<SubmitTapScriptSigsResponse> {
    const data = SubmitTapScriptSigsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitTapScriptSigs", data);
    return promise.then((data) =>
      SubmitTapScriptSigsResponse.decode(_m0.Reader.create(data)),
    );
  }
}

export interface QueryService {
  /** Get custodians */
  Custodians(request: CustodiansRequest): Promise<CustodiansResponse>;
  /** Get custodian groups */
  Groups(request: GroupsRequest): Promise<GroupsResponse>;
  Params(request: ParamsRequest): Promise<ParamsResponse>;
}

export const QueryServiceServiceName = "scalar.covenant.v1beta1.QueryService";
export class QueryServiceClientImpl implements QueryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceServiceName;
    this.rpc = rpc;
    this.Custodians = this.Custodians.bind(this);
    this.Groups = this.Groups.bind(this);
    this.Params = this.Params.bind(this);
  }
  Custodians(request: CustodiansRequest): Promise<CustodiansResponse> {
    const data = CustodiansRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Custodians", data);
    return promise.then((data) =>
      CustodiansResponse.decode(_m0.Reader.create(data)),
    );
  }

  Groups(request: GroupsRequest): Promise<GroupsResponse> {
    const data = GroupsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Groups", data);
    return promise.then((data) =>
      GroupsResponse.decode(_m0.Reader.create(data)),
    );
  }

  Params(request: ParamsRequest): Promise<ParamsResponse> {
    const data = ParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) =>
      ParamsResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}
