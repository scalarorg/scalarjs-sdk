// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/covenant/v1beta1/events.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  Phase,
  phaseFromJSON,
  phaseToJSON,
  TapScriptSigsMap,
} from "../exported/v1beta1/types";
import { UTXOSnapshot } from "./redeem";

export const protobufPackage = "scalar.covenant.v1beta1";

export interface SigningPsbtStarted {
  module: string;
  chain: string;
  sigId: Long;
  keyId: string;
  pubKeys: { [key: string]: Uint8Array };
  requestingModule: string;
  multiPsbt: Uint8Array[];
}

export interface SigningPsbtStarted_PubKeysEntry {
  key: string;
  value: Uint8Array;
}

export interface SigningPsbtCompleted {
  module: string;
  sigId: Long;
}

export interface SigningPsbtExpired {
  module: string;
  sigId: Long;
}

export interface TapScriptSigsSubmitted {
  module: string;
  sigId: Long;
  participant: Uint8Array;
  listOfTapScriptSigsMap: TapScriptSigsMap[];
}

export interface KeyRotated {
  module: string;
  chain: string;
  keyId: string;
}

export interface SwitchPhaseStarted {
  module: string;
  chain: string;
  symbol: string;
  sequence: Long;
  /** Current phase */
  phase: Phase;
  /** Next sequence and phase encoded in the payload */
  executeData: string;
}

export interface SwitchPhaseCompleted {
  module: string;
  sequence: Long;
  phase: Phase;
}

/** For Validation process */
export interface ConfirmSwitchedPhaseStarted {
  pollId: string;
  txId: Uint8Array;
  chain: string;
  confirmationHeight: Long;
  participants: Uint8Array[];
  custodianGroupUid: Uint8Array;
}

export interface ConfirmRedeemTxStarted {
  pollId: string;
  txIds: Uint8Array[];
  chain: string;
  confirmationHeight: Long;
  participants: Uint8Array[];
  custodianGroupUid: Uint8Array;
  scriptPubkey: Uint8Array;
  networkParams: string;
}

export interface IntializeUtxoSnapshotStarted {
  pollId: string;
  chain: string;
  confirmationHeight: Long;
  participants: Uint8Array[];
  custodianGroupUid: Uint8Array;
  address: string;
  blockCheckpoint: Long;
}

export interface Event {
  chain: string;
  hash: Uint8Array;
  status: Event_Status;
  index: Long;
  redeemTxsConfirmed?: RedeemTxsConfirmed | undefined;
  switchedPhaseConfirmed?: SwitchedPhaseConfirmed | undefined;
  intializeUtxoSnapshotCompleted?: IntializeUtxoSnapshotCompleted | undefined;
}

export enum Event_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_CONFIRMED = 1,
  STATUS_COMPLETED = 2,
  STATUS_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function event_StatusFromJSON(object: any): Event_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Event_Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_CONFIRMED":
      return Event_Status.STATUS_CONFIRMED;
    case 2:
    case "STATUS_COMPLETED":
      return Event_Status.STATUS_COMPLETED;
    case 3:
    case "STATUS_FAILED":
      return Event_Status.STATUS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Event_Status.UNRECOGNIZED;
  }
}

export function event_StatusToJSON(object: Event_Status): string {
  switch (object) {
    case Event_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Event_Status.STATUS_CONFIRMED:
      return "STATUS_CONFIRMED";
    case Event_Status.STATUS_COMPLETED:
      return "STATUS_COMPLETED";
    case Event_Status.STATUS_FAILED:
      return "STATUS_FAILED";
    case Event_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface VoteEvents {
  chain: string;
  events: Event[];
}

export interface RedeemTxsConfirmed {
  eventIds: string[];
  utxoSnapshot?: UTXOSnapshot | undefined;
}

export interface SwitchedPhaseConfirmed {
  eventId: string;
  custodianGroupUid: Uint8Array;
  sequence: Long;
  fromPhase: Long;
  toPhase: Long;
}

export interface IntializeUtxoSnapshotCompleted {
  eventId: string;
  utxoSnapshot?: UTXOSnapshot | undefined;
}

function createBaseSigningPsbtStarted(): SigningPsbtStarted {
  return {
    module: "",
    chain: "",
    sigId: Long.UZERO,
    keyId: "",
    pubKeys: {},
    requestingModule: "",
    multiPsbt: [],
  };
}

export const SigningPsbtStarted = {
  encode(
    message: SigningPsbtStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (!message.sigId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.sigId);
    }
    if (message.keyId !== "") {
      writer.uint32(34).string(message.keyId);
    }
    Object.entries(message.pubKeys).forEach(([key, value]) => {
      SigningPsbtStarted_PubKeysEntry.encode(
        { key: key as any, value },
        writer.uint32(42).fork(),
      ).ldelim();
    });
    if (message.requestingModule !== "") {
      writer.uint32(50).string(message.requestingModule);
    }
    for (const v of message.multiPsbt) {
      writer.uint32(58).bytes(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SigningPsbtStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigningPsbtStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sigId = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = SigningPsbtStarted_PubKeysEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry5.value !== undefined) {
            message.pubKeys[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.requestingModule = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.multiPsbt.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigningPsbtStarted {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
      pubKeys: isObject(object.pubKeys)
        ? Object.entries(object.pubKeys).reduce<{ [key: string]: Uint8Array }>(
            (acc, [key, value]) => {
              acc[key] = bytesFromBase64(value as string);
              return acc;
            },
            {},
          )
        : {},
      requestingModule: isSet(object.requestingModule)
        ? globalThis.String(object.requestingModule)
        : "",
      multiPsbt: globalThis.Array.isArray(object?.multiPsbt)
        ? object.multiPsbt.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: SigningPsbtStarted): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.sigId.equals(Long.UZERO)) {
      obj.sigId = (message.sigId || Long.UZERO).toString();
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    if (message.pubKeys) {
      const entries = Object.entries(message.pubKeys);
      if (entries.length > 0) {
        obj.pubKeys = {};
        entries.forEach(([k, v]) => {
          obj.pubKeys[k] = base64FromBytes(v);
        });
      }
    }
    if (message.requestingModule !== "") {
      obj.requestingModule = message.requestingModule;
    }
    if (message.multiPsbt?.length) {
      obj.multiPsbt = message.multiPsbt.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigningPsbtStarted>, I>>(
    base?: I,
  ): SigningPsbtStarted {
    return SigningPsbtStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigningPsbtStarted>, I>>(
    object: I,
  ): SigningPsbtStarted {
    const message = createBaseSigningPsbtStarted();
    message.module = object.module ?? "";
    message.chain = object.chain ?? "";
    message.sigId =
      object.sigId !== undefined && object.sigId !== null
        ? Long.fromValue(object.sigId)
        : Long.UZERO;
    message.keyId = object.keyId ?? "";
    message.pubKeys = Object.entries(object.pubKeys ?? {}).reduce<{
      [key: string]: Uint8Array;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    message.requestingModule = object.requestingModule ?? "";
    message.multiPsbt = object.multiPsbt?.map((e) => e) || [];
    return message;
  },
};

function createBaseSigningPsbtStarted_PubKeysEntry(): SigningPsbtStarted_PubKeysEntry {
  return { key: "", value: new Uint8Array(0) };
}

export const SigningPsbtStarted_PubKeysEntry = {
  encode(
    message: SigningPsbtStarted_PubKeysEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): SigningPsbtStarted_PubKeysEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigningPsbtStarted_PubKeysEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigningPsbtStarted_PubKeysEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value)
        ? bytesFromBase64(object.value)
        : new Uint8Array(0),
    };
  },

  toJSON(message: SigningPsbtStarted_PubKeysEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigningPsbtStarted_PubKeysEntry>, I>>(
    base?: I,
  ): SigningPsbtStarted_PubKeysEntry {
    return SigningPsbtStarted_PubKeysEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigningPsbtStarted_PubKeysEntry>, I>>(
    object: I,
  ): SigningPsbtStarted_PubKeysEntry {
    const message = createBaseSigningPsbtStarted_PubKeysEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSigningPsbtCompleted(): SigningPsbtCompleted {
  return { module: "", sigId: Long.UZERO };
}

export const SigningPsbtCompleted = {
  encode(
    message: SigningPsbtCompleted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (!message.sigId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sigId);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): SigningPsbtCompleted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigningPsbtCompleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sigId = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigningPsbtCompleted {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
    };
  },

  toJSON(message: SigningPsbtCompleted): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (!message.sigId.equals(Long.UZERO)) {
      obj.sigId = (message.sigId || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigningPsbtCompleted>, I>>(
    base?: I,
  ): SigningPsbtCompleted {
    return SigningPsbtCompleted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigningPsbtCompleted>, I>>(
    object: I,
  ): SigningPsbtCompleted {
    const message = createBaseSigningPsbtCompleted();
    message.module = object.module ?? "";
    message.sigId =
      object.sigId !== undefined && object.sigId !== null
        ? Long.fromValue(object.sigId)
        : Long.UZERO;
    return message;
  },
};

function createBaseSigningPsbtExpired(): SigningPsbtExpired {
  return { module: "", sigId: Long.UZERO };
}

export const SigningPsbtExpired = {
  encode(
    message: SigningPsbtExpired,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (!message.sigId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sigId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SigningPsbtExpired {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigningPsbtExpired();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sigId = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigningPsbtExpired {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
    };
  },

  toJSON(message: SigningPsbtExpired): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (!message.sigId.equals(Long.UZERO)) {
      obj.sigId = (message.sigId || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SigningPsbtExpired>, I>>(
    base?: I,
  ): SigningPsbtExpired {
    return SigningPsbtExpired.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SigningPsbtExpired>, I>>(
    object: I,
  ): SigningPsbtExpired {
    const message = createBaseSigningPsbtExpired();
    message.module = object.module ?? "";
    message.sigId =
      object.sigId !== undefined && object.sigId !== null
        ? Long.fromValue(object.sigId)
        : Long.UZERO;
    return message;
  },
};

function createBaseTapScriptSigsSubmitted(): TapScriptSigsSubmitted {
  return {
    module: "",
    sigId: Long.UZERO,
    participant: new Uint8Array(0),
    listOfTapScriptSigsMap: [],
  };
}

export const TapScriptSigsSubmitted = {
  encode(
    message: TapScriptSigsSubmitted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (!message.sigId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sigId);
    }
    if (message.participant.length !== 0) {
      writer.uint32(26).bytes(message.participant);
    }
    for (const v of message.listOfTapScriptSigsMap) {
      TapScriptSigsMap.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): TapScriptSigsSubmitted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTapScriptSigsSubmitted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sigId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.participant = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.listOfTapScriptSigsMap.push(
            TapScriptSigsMap.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TapScriptSigsSubmitted {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
      participant: isSet(object.participant)
        ? bytesFromBase64(object.participant)
        : new Uint8Array(0),
      listOfTapScriptSigsMap: globalThis.Array.isArray(
        object?.listOfTapScriptSigsMap,
      )
        ? object.listOfTapScriptSigsMap.map((e: any) =>
            TapScriptSigsMap.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: TapScriptSigsSubmitted): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (!message.sigId.equals(Long.UZERO)) {
      obj.sigId = (message.sigId || Long.UZERO).toString();
    }
    if (message.participant.length !== 0) {
      obj.participant = base64FromBytes(message.participant);
    }
    if (message.listOfTapScriptSigsMap?.length) {
      obj.listOfTapScriptSigsMap = message.listOfTapScriptSigsMap.map((e) =>
        TapScriptSigsMap.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TapScriptSigsSubmitted>, I>>(
    base?: I,
  ): TapScriptSigsSubmitted {
    return TapScriptSigsSubmitted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TapScriptSigsSubmitted>, I>>(
    object: I,
  ): TapScriptSigsSubmitted {
    const message = createBaseTapScriptSigsSubmitted();
    message.module = object.module ?? "";
    message.sigId =
      object.sigId !== undefined && object.sigId !== null
        ? Long.fromValue(object.sigId)
        : Long.UZERO;
    message.participant = object.participant ?? new Uint8Array(0);
    message.listOfTapScriptSigsMap =
      object.listOfTapScriptSigsMap?.map((e) =>
        TapScriptSigsMap.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseKeyRotated(): KeyRotated {
  return { module: "", chain: "", keyId: "" };
}

export const KeyRotated = {
  encode(
    message: KeyRotated,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): KeyRotated {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyRotated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyRotated {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
    };
  },

  toJSON(message: KeyRotated): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.keyId !== "") {
      obj.keyId = message.keyId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyRotated>, I>>(base?: I): KeyRotated {
    return KeyRotated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyRotated>, I>>(
    object: I,
  ): KeyRotated {
    const message = createBaseKeyRotated();
    message.module = object.module ?? "";
    message.chain = object.chain ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseSwitchPhaseStarted(): SwitchPhaseStarted {
  return {
    module: "",
    chain: "",
    symbol: "",
    sequence: Long.UZERO,
    phase: 0,
    executeData: "",
  };
}

export const SwitchPhaseStarted = {
  encode(
    message: SwitchPhaseStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.sequence);
    }
    if (message.phase !== 0) {
      writer.uint32(40).int32(message.phase);
    }
    if (message.executeData !== "") {
      writer.uint32(50).string(message.executeData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SwitchPhaseStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchPhaseStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sequence = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.phase = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.executeData = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchPhaseStarted {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      sequence: isSet(object.sequence)
        ? Long.fromValue(object.sequence)
        : Long.UZERO,
      phase: isSet(object.phase) ? phaseFromJSON(object.phase) : 0,
      executeData: isSet(object.executeData)
        ? globalThis.String(object.executeData)
        : "",
    };
  },

  toJSON(message: SwitchPhaseStarted): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.phase !== 0) {
      obj.phase = phaseToJSON(message.phase);
    }
    if (message.executeData !== "") {
      obj.executeData = message.executeData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SwitchPhaseStarted>, I>>(
    base?: I,
  ): SwitchPhaseStarted {
    return SwitchPhaseStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SwitchPhaseStarted>, I>>(
    object: I,
  ): SwitchPhaseStarted {
    const message = createBaseSwitchPhaseStarted();
    message.module = object.module ?? "";
    message.chain = object.chain ?? "";
    message.symbol = object.symbol ?? "";
    message.sequence =
      object.sequence !== undefined && object.sequence !== null
        ? Long.fromValue(object.sequence)
        : Long.UZERO;
    message.phase = object.phase ?? 0;
    message.executeData = object.executeData ?? "";
    return message;
  },
};

function createBaseSwitchPhaseCompleted(): SwitchPhaseCompleted {
  return { module: "", sequence: Long.UZERO, phase: 0 };
}

export const SwitchPhaseCompleted = {
  encode(
    message: SwitchPhaseCompleted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.module !== "") {
      writer.uint32(10).string(message.module);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sequence);
    }
    if (message.phase !== 0) {
      writer.uint32(24).int32(message.phase);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): SwitchPhaseCompleted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchPhaseCompleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.module = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequence = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.phase = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchPhaseCompleted {
    return {
      module: isSet(object.module) ? globalThis.String(object.module) : "",
      sequence: isSet(object.sequence)
        ? Long.fromValue(object.sequence)
        : Long.UZERO,
      phase: isSet(object.phase) ? phaseFromJSON(object.phase) : 0,
    };
  },

  toJSON(message: SwitchPhaseCompleted): unknown {
    const obj: any = {};
    if (message.module !== "") {
      obj.module = message.module;
    }
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.phase !== 0) {
      obj.phase = phaseToJSON(message.phase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SwitchPhaseCompleted>, I>>(
    base?: I,
  ): SwitchPhaseCompleted {
    return SwitchPhaseCompleted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SwitchPhaseCompleted>, I>>(
    object: I,
  ): SwitchPhaseCompleted {
    const message = createBaseSwitchPhaseCompleted();
    message.module = object.module ?? "";
    message.sequence =
      object.sequence !== undefined && object.sequence !== null
        ? Long.fromValue(object.sequence)
        : Long.UZERO;
    message.phase = object.phase ?? 0;
    return message;
  },
};

function createBaseConfirmSwitchedPhaseStarted(): ConfirmSwitchedPhaseStarted {
  return {
    pollId: "",
    txId: new Uint8Array(0),
    chain: "",
    confirmationHeight: Long.UZERO,
    participants: [],
    custodianGroupUid: new Uint8Array(0),
  };
}

export const ConfirmSwitchedPhaseStarted = {
  encode(
    message: ConfirmSwitchedPhaseStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pollId !== "") {
      writer.uint32(10).string(message.pollId);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.chain !== "") {
      writer.uint32(26).string(message.chain);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.confirmationHeight);
    }
    for (const v of message.participants) {
      writer.uint32(42).bytes(v!);
    }
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(50).bytes(message.custodianGroupUid);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ConfirmSwitchedPhaseStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmSwitchedPhaseStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pollId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.participants.push(reader.bytes());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmSwitchedPhaseStarted {
    return {
      pollId: isSet(object.pollId) ? globalThis.String(object.pollId) : "",
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => bytesFromBase64(e))
        : [],
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ConfirmSwitchedPhaseStarted): unknown {
    const obj: any = {};
    if (message.pollId !== "") {
      obj.pollId = message.pollId;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => base64FromBytes(e));
    }
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmSwitchedPhaseStarted>, I>>(
    base?: I,
  ): ConfirmSwitchedPhaseStarted {
    return ConfirmSwitchedPhaseStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmSwitchedPhaseStarted>, I>>(
    object: I,
  ): ConfirmSwitchedPhaseStarted {
    const message = createBaseConfirmSwitchedPhaseStarted();
    message.pollId = object.pollId ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.chain = object.chain ?? "";
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants = object.participants?.map((e) => e) || [];
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    return message;
  },
};

function createBaseConfirmRedeemTxStarted(): ConfirmRedeemTxStarted {
  return {
    pollId: "",
    txIds: [],
    chain: "",
    confirmationHeight: Long.UZERO,
    participants: [],
    custodianGroupUid: new Uint8Array(0),
    scriptPubkey: new Uint8Array(0),
    networkParams: "",
  };
}

export const ConfirmRedeemTxStarted = {
  encode(
    message: ConfirmRedeemTxStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pollId !== "") {
      writer.uint32(10).string(message.pollId);
    }
    for (const v of message.txIds) {
      writer.uint32(18).bytes(v!);
    }
    if (message.chain !== "") {
      writer.uint32(26).string(message.chain);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.confirmationHeight);
    }
    for (const v of message.participants) {
      writer.uint32(42).bytes(v!);
    }
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(50).bytes(message.custodianGroupUid);
    }
    if (message.scriptPubkey.length !== 0) {
      writer.uint32(58).bytes(message.scriptPubkey);
    }
    if (message.networkParams !== "") {
      writer.uint32(66).string(message.networkParams);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ConfirmRedeemTxStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmRedeemTxStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pollId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txIds.push(reader.bytes());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.participants.push(reader.bytes());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scriptPubkey = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.networkParams = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmRedeemTxStarted {
    return {
      pollId: isSet(object.pollId) ? globalThis.String(object.pollId) : "",
      txIds: globalThis.Array.isArray(object?.txIds)
        ? object.txIds.map((e: any) => bytesFromBase64(e))
        : [],
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => bytesFromBase64(e))
        : [],
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
      scriptPubkey: isSet(object.scriptPubkey)
        ? bytesFromBase64(object.scriptPubkey)
        : new Uint8Array(0),
      networkParams: isSet(object.networkParams)
        ? globalThis.String(object.networkParams)
        : "",
    };
  },

  toJSON(message: ConfirmRedeemTxStarted): unknown {
    const obj: any = {};
    if (message.pollId !== "") {
      obj.pollId = message.pollId;
    }
    if (message.txIds?.length) {
      obj.txIds = message.txIds.map((e) => base64FromBytes(e));
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => base64FromBytes(e));
    }
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    if (message.scriptPubkey.length !== 0) {
      obj.scriptPubkey = base64FromBytes(message.scriptPubkey);
    }
    if (message.networkParams !== "") {
      obj.networkParams = message.networkParams;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmRedeemTxStarted>, I>>(
    base?: I,
  ): ConfirmRedeemTxStarted {
    return ConfirmRedeemTxStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmRedeemTxStarted>, I>>(
    object: I,
  ): ConfirmRedeemTxStarted {
    const message = createBaseConfirmRedeemTxStarted();
    message.pollId = object.pollId ?? "";
    message.txIds = object.txIds?.map((e) => e) || [];
    message.chain = object.chain ?? "";
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants = object.participants?.map((e) => e) || [];
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    message.scriptPubkey = object.scriptPubkey ?? new Uint8Array(0);
    message.networkParams = object.networkParams ?? "";
    return message;
  },
};

function createBaseIntializeUtxoSnapshotStarted(): IntializeUtxoSnapshotStarted {
  return {
    pollId: "",
    chain: "",
    confirmationHeight: Long.UZERO,
    participants: [],
    custodianGroupUid: new Uint8Array(0),
    address: "",
    blockCheckpoint: Long.UZERO,
  };
}

export const IntializeUtxoSnapshotStarted = {
  encode(
    message: IntializeUtxoSnapshotStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pollId !== "") {
      writer.uint32(10).string(message.pollId);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.confirmationHeight);
    }
    for (const v of message.participants) {
      writer.uint32(34).bytes(v!);
    }
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(42).bytes(message.custodianGroupUid);
    }
    if (message.address !== "") {
      writer.uint32(50).string(message.address);
    }
    if (!message.blockCheckpoint.equals(Long.UZERO)) {
      writer.uint32(56).uint64(message.blockCheckpoint);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): IntializeUtxoSnapshotStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntializeUtxoSnapshotStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pollId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.participants.push(reader.bytes());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.address = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.blockCheckpoint = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IntializeUtxoSnapshotStarted {
    return {
      pollId: isSet(object.pollId) ? globalThis.String(object.pollId) : "",
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => bytesFromBase64(e))
        : [],
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      blockCheckpoint: isSet(object.blockCheckpoint)
        ? Long.fromValue(object.blockCheckpoint)
        : Long.UZERO,
    };
  },

  toJSON(message: IntializeUtxoSnapshotStarted): unknown {
    const obj: any = {};
    if (message.pollId !== "") {
      obj.pollId = message.pollId;
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => base64FromBytes(e));
    }
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (!message.blockCheckpoint.equals(Long.UZERO)) {
      obj.blockCheckpoint = (message.blockCheckpoint || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IntializeUtxoSnapshotStarted>, I>>(
    base?: I,
  ): IntializeUtxoSnapshotStarted {
    return IntializeUtxoSnapshotStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IntializeUtxoSnapshotStarted>, I>>(
    object: I,
  ): IntializeUtxoSnapshotStarted {
    const message = createBaseIntializeUtxoSnapshotStarted();
    message.pollId = object.pollId ?? "";
    message.chain = object.chain ?? "";
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants = object.participants?.map((e) => e) || [];
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    message.address = object.address ?? "";
    message.blockCheckpoint =
      object.blockCheckpoint !== undefined && object.blockCheckpoint !== null
        ? Long.fromValue(object.blockCheckpoint)
        : Long.UZERO;
    return message;
  },
};

function createBaseEvent(): Event {
  return {
    chain: "",
    hash: new Uint8Array(0),
    status: 0,
    index: Long.UZERO,
    redeemTxsConfirmed: undefined,
    switchedPhaseConfirmed: undefined,
    intializeUtxoSnapshotCompleted: undefined,
  };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (!message.index.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.index);
    }
    if (message.redeemTxsConfirmed !== undefined) {
      RedeemTxsConfirmed.encode(
        message.redeemTxsConfirmed,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    if (message.switchedPhaseConfirmed !== undefined) {
      SwitchedPhaseConfirmed.encode(
        message.switchedPhaseConfirmed,
        writer.uint32(50).fork(),
      ).ldelim();
    }
    if (message.intializeUtxoSnapshotCompleted !== undefined) {
      IntializeUtxoSnapshotCompleted.encode(
        message.intializeUtxoSnapshotCompleted,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.index = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.redeemTxsConfirmed = RedeemTxsConfirmed.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.switchedPhaseConfirmed = SwitchedPhaseConfirmed.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.intializeUtxoSnapshotCompleted =
            IntializeUtxoSnapshotCompleted.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      hash: isSet(object.hash)
        ? bytesFromBase64(object.hash)
        : new Uint8Array(0),
      status: isSet(object.status) ? event_StatusFromJSON(object.status) : 0,
      index: isSet(object.index) ? Long.fromValue(object.index) : Long.UZERO,
      redeemTxsConfirmed: isSet(object.redeemTxsConfirmed)
        ? RedeemTxsConfirmed.fromJSON(object.redeemTxsConfirmed)
        : undefined,
      switchedPhaseConfirmed: isSet(object.switchedPhaseConfirmed)
        ? SwitchedPhaseConfirmed.fromJSON(object.switchedPhaseConfirmed)
        : undefined,
      intializeUtxoSnapshotCompleted: isSet(
        object.intializeUtxoSnapshotCompleted,
      )
        ? IntializeUtxoSnapshotCompleted.fromJSON(
            object.intializeUtxoSnapshotCompleted,
          )
        : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.status !== 0) {
      obj.status = event_StatusToJSON(message.status);
    }
    if (!message.index.equals(Long.UZERO)) {
      obj.index = (message.index || Long.UZERO).toString();
    }
    if (message.redeemTxsConfirmed !== undefined) {
      obj.redeemTxsConfirmed = RedeemTxsConfirmed.toJSON(
        message.redeemTxsConfirmed,
      );
    }
    if (message.switchedPhaseConfirmed !== undefined) {
      obj.switchedPhaseConfirmed = SwitchedPhaseConfirmed.toJSON(
        message.switchedPhaseConfirmed,
      );
    }
    if (message.intializeUtxoSnapshotCompleted !== undefined) {
      obj.intializeUtxoSnapshotCompleted =
        IntializeUtxoSnapshotCompleted.toJSON(
          message.intializeUtxoSnapshotCompleted,
        );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.chain = object.chain ?? "";
    message.hash = object.hash ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.index =
      object.index !== undefined && object.index !== null
        ? Long.fromValue(object.index)
        : Long.UZERO;
    message.redeemTxsConfirmed =
      object.redeemTxsConfirmed !== undefined &&
      object.redeemTxsConfirmed !== null
        ? RedeemTxsConfirmed.fromPartial(object.redeemTxsConfirmed)
        : undefined;
    message.switchedPhaseConfirmed =
      object.switchedPhaseConfirmed !== undefined &&
      object.switchedPhaseConfirmed !== null
        ? SwitchedPhaseConfirmed.fromPartial(object.switchedPhaseConfirmed)
        : undefined;
    message.intializeUtxoSnapshotCompleted =
      object.intializeUtxoSnapshotCompleted !== undefined &&
      object.intializeUtxoSnapshotCompleted !== null
        ? IntializeUtxoSnapshotCompleted.fromPartial(
            object.intializeUtxoSnapshotCompleted,
          )
        : undefined;
    return message;
  },
};

function createBaseVoteEvents(): VoteEvents {
  return { chain: "", events: [] };
}

export const VoteEvents = {
  encode(
    message: VoteEvents,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoteEvents {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteEvents {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => Event.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VoteEvents): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteEvents>, I>>(base?: I): VoteEvents {
    return VoteEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteEvents>, I>>(
    object: I,
  ): VoteEvents {
    const message = createBaseVoteEvents();
    message.chain = object.chain ?? "";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRedeemTxsConfirmed(): RedeemTxsConfirmed {
  return { eventIds: [], utxoSnapshot: undefined };
}

export const RedeemTxsConfirmed = {
  encode(
    message: RedeemTxsConfirmed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.eventIds) {
      writer.uint32(10).string(v!);
    }
    if (message.utxoSnapshot !== undefined) {
      UTXOSnapshot.encode(
        message.utxoSnapshot,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedeemTxsConfirmed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedeemTxsConfirmed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.utxoSnapshot = UTXOSnapshot.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedeemTxsConfirmed {
    return {
      eventIds: globalThis.Array.isArray(object?.eventIds)
        ? object.eventIds.map((e: any) => globalThis.String(e))
        : [],
      utxoSnapshot: isSet(object.utxoSnapshot)
        ? UTXOSnapshot.fromJSON(object.utxoSnapshot)
        : undefined,
    };
  },

  toJSON(message: RedeemTxsConfirmed): unknown {
    const obj: any = {};
    if (message.eventIds?.length) {
      obj.eventIds = message.eventIds;
    }
    if (message.utxoSnapshot !== undefined) {
      obj.utxoSnapshot = UTXOSnapshot.toJSON(message.utxoSnapshot);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedeemTxsConfirmed>, I>>(
    base?: I,
  ): RedeemTxsConfirmed {
    return RedeemTxsConfirmed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedeemTxsConfirmed>, I>>(
    object: I,
  ): RedeemTxsConfirmed {
    const message = createBaseRedeemTxsConfirmed();
    message.eventIds = object.eventIds?.map((e) => e) || [];
    message.utxoSnapshot =
      object.utxoSnapshot !== undefined && object.utxoSnapshot !== null
        ? UTXOSnapshot.fromPartial(object.utxoSnapshot)
        : undefined;
    return message;
  },
};

function createBaseSwitchedPhaseConfirmed(): SwitchedPhaseConfirmed {
  return {
    eventId: "",
    custodianGroupUid: new Uint8Array(0),
    sequence: Long.UZERO,
    fromPhase: Long.UZERO,
    toPhase: Long.UZERO,
  };
}

export const SwitchedPhaseConfirmed = {
  encode(
    message: SwitchedPhaseConfirmed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(18).bytes(message.custodianGroupUid);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.sequence);
    }
    if (!message.fromPhase.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.fromPhase);
    }
    if (!message.toPhase.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.toPhase);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): SwitchedPhaseConfirmed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchedPhaseConfirmed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.sequence = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fromPhase = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.toPhase = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchedPhaseConfirmed {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
      sequence: isSet(object.sequence)
        ? Long.fromValue(object.sequence)
        : Long.UZERO,
      fromPhase: isSet(object.fromPhase)
        ? Long.fromValue(object.fromPhase)
        : Long.UZERO,
      toPhase: isSet(object.toPhase)
        ? Long.fromValue(object.toPhase)
        : Long.UZERO,
    };
  },

  toJSON(message: SwitchedPhaseConfirmed): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (!message.fromPhase.equals(Long.UZERO)) {
      obj.fromPhase = (message.fromPhase || Long.UZERO).toString();
    }
    if (!message.toPhase.equals(Long.UZERO)) {
      obj.toPhase = (message.toPhase || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SwitchedPhaseConfirmed>, I>>(
    base?: I,
  ): SwitchedPhaseConfirmed {
    return SwitchedPhaseConfirmed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SwitchedPhaseConfirmed>, I>>(
    object: I,
  ): SwitchedPhaseConfirmed {
    const message = createBaseSwitchedPhaseConfirmed();
    message.eventId = object.eventId ?? "";
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    message.sequence =
      object.sequence !== undefined && object.sequence !== null
        ? Long.fromValue(object.sequence)
        : Long.UZERO;
    message.fromPhase =
      object.fromPhase !== undefined && object.fromPhase !== null
        ? Long.fromValue(object.fromPhase)
        : Long.UZERO;
    message.toPhase =
      object.toPhase !== undefined && object.toPhase !== null
        ? Long.fromValue(object.toPhase)
        : Long.UZERO;
    return message;
  },
};

function createBaseIntializeUtxoSnapshotCompleted(): IntializeUtxoSnapshotCompleted {
  return { eventId: "", utxoSnapshot: undefined };
}

export const IntializeUtxoSnapshotCompleted = {
  encode(
    message: IntializeUtxoSnapshotCompleted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.utxoSnapshot !== undefined) {
      UTXOSnapshot.encode(
        message.utxoSnapshot,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): IntializeUtxoSnapshotCompleted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntializeUtxoSnapshotCompleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.utxoSnapshot = UTXOSnapshot.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IntializeUtxoSnapshotCompleted {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      utxoSnapshot: isSet(object.utxoSnapshot)
        ? UTXOSnapshot.fromJSON(object.utxoSnapshot)
        : undefined,
    };
  },

  toJSON(message: IntializeUtxoSnapshotCompleted): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.utxoSnapshot !== undefined) {
      obj.utxoSnapshot = UTXOSnapshot.toJSON(message.utxoSnapshot);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IntializeUtxoSnapshotCompleted>, I>>(
    base?: I,
  ): IntializeUtxoSnapshotCompleted {
    return IntializeUtxoSnapshotCompleted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IntializeUtxoSnapshotCompleted>, I>>(
    object: I,
  ): IntializeUtxoSnapshotCompleted {
    const message = createBaseIntializeUtxoSnapshotCompleted();
    message.eventId = object.eventId ?? "";
    message.utxoSnapshot =
      object.utxoSnapshot !== undefined && object.utxoSnapshot !== null
        ? UTXOSnapshot.fromPartial(object.utxoSnapshot)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
