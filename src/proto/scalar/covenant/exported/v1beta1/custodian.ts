// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/covenant/exported/v1beta1/custodian.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "scalar.covenant.exported.v1beta1";

export enum Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_ACTIVATED = 1,
  STATUS_DEACTIVATED = 2,
  STATUS_PENDING = 3,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_ACTIVATED":
      return Status.STATUS_ACTIVATED;
    case 2:
    case "STATUS_DEACTIVATED":
      return Status.STATUS_DEACTIVATED;
    case 3:
    case "STATUS_PENDING":
      return Status.STATUS_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Status.STATUS_ACTIVATED:
      return "STATUS_ACTIVATED";
    case Status.STATUS_DEACTIVATED:
      return "STATUS_DEACTIVATED";
    case Status.STATUS_PENDING:
      return "STATUS_PENDING";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Custodian represents an individual custodian configuration */
export interface Custodian {
  /** e.g., "Custodian1" */
  name: string;
  /** e.g., "scalarvaloper1..." */
  valAddress: string;
  /** e.g., */
  bitcoinPubkey: Uint8Array;
  /** "0215da913b3e87b4932b1e1b87d9667c28e7250aa0ed60b3a31095f541e1641488" */
  status: Status;
  description: string;
}

/**
 * CustodianGroup represents a group of custodians with their configuration
 * uid is used as identity of the group, btc_pubkey is change by list of
 * custodians
 */
export interface CustodianGroup {
  /** the UID is unique, to distinguish between custodian groups */
  uid: Uint8Array;
  /** e.g., "All" */
  name: string;
  /** e.g., */
  bitcoinPubkey: Uint8Array;
  /** "tb1p07q440mdl4uyywns325dk8pvjphwety3psp4zvkngtjf3z3hhr2sfar3hv" */
  quorum: number;
  /** Whether the custodian is active */
  status: Status;
  description: string;
  custodians: Custodian[];
}

function createBaseCustodian(): Custodian {
  return {
    name: "",
    valAddress: "",
    bitcoinPubkey: new Uint8Array(0),
    status: 0,
    description: "",
  };
}

export const Custodian = {
  encode(
    message: Custodian,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.valAddress !== "") {
      writer.uint32(18).string(message.valAddress);
    }
    if (message.bitcoinPubkey.length !== 0) {
      writer.uint32(26).bytes(message.bitcoinPubkey);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Custodian {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustodian();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bitcoinPubkey = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Custodian {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      valAddress: isSet(object.valAddress)
        ? globalThis.String(object.valAddress)
        : "",
      bitcoinPubkey: isSet(object.bitcoinPubkey)
        ? bytesFromBase64(object.bitcoinPubkey)
        : new Uint8Array(0),
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : "",
    };
  },

  toJSON(message: Custodian): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.valAddress !== "") {
      obj.valAddress = message.valAddress;
    }
    if (message.bitcoinPubkey.length !== 0) {
      obj.bitcoinPubkey = base64FromBytes(message.bitcoinPubkey);
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Custodian>, I>>(base?: I): Custodian {
    return Custodian.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Custodian>, I>>(
    object: I,
  ): Custodian {
    const message = createBaseCustodian();
    message.name = object.name ?? "";
    message.valAddress = object.valAddress ?? "";
    message.bitcoinPubkey = object.bitcoinPubkey ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCustodianGroup(): CustodianGroup {
  return {
    uid: new Uint8Array(0),
    name: "",
    bitcoinPubkey: new Uint8Array(0),
    quorum: 0,
    status: 0,
    description: "",
    custodians: [],
  };
}

export const CustodianGroup = {
  encode(
    message: CustodianGroup,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.uid.length !== 0) {
      writer.uint32(10).bytes(message.uid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.bitcoinPubkey.length !== 0) {
      writer.uint32(26).bytes(message.bitcoinPubkey);
    }
    if (message.quorum !== 0) {
      writer.uint32(32).uint32(message.quorum);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    for (const v of message.custodians) {
      Custodian.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustodianGroup {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustodianGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uid = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bitcoinPubkey = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.quorum = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.custodians.push(Custodian.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustodianGroup {
    return {
      uid: isSet(object.uid) ? bytesFromBase64(object.uid) : new Uint8Array(0),
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bitcoinPubkey: isSet(object.bitcoinPubkey)
        ? bytesFromBase64(object.bitcoinPubkey)
        : new Uint8Array(0),
      quorum: isSet(object.quorum) ? globalThis.Number(object.quorum) : 0,
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : "",
      custodians: globalThis.Array.isArray(object?.custodians)
        ? object.custodians.map((e: any) => Custodian.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CustodianGroup): unknown {
    const obj: any = {};
    if (message.uid.length !== 0) {
      obj.uid = base64FromBytes(message.uid);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bitcoinPubkey.length !== 0) {
      obj.bitcoinPubkey = base64FromBytes(message.bitcoinPubkey);
    }
    if (message.quorum !== 0) {
      obj.quorum = Math.round(message.quorum);
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.custodians?.length) {
      obj.custodians = message.custodians.map((e) => Custodian.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustodianGroup>, I>>(
    base?: I,
  ): CustodianGroup {
    return CustodianGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustodianGroup>, I>>(
    object: I,
  ): CustodianGroup {
    const message = createBaseCustodianGroup();
    message.uid = object.uid ?? new Uint8Array(0);
    message.name = object.name ?? "";
    message.bitcoinPubkey = object.bitcoinPubkey ?? new Uint8Array(0);
    message.quorum = object.quorum ?? 0;
    message.status = object.status ?? 0;
    message.description = object.description ?? "";
    message.custodians =
      object.custodians?.map((e) => Custodian.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
