// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/protocol/exported/v1beta1/types.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { TokenDetails } from "../../../nexus/exported/v1beta1/types";

export const protobufPackage = "scalar.protocol.exported.v1beta1";

export enum LiquidityModel {
  LIQUIDITY_MODEL_UNSPECIFIED = 0,
  LIQUIDITY_MODEL_POOL = 1,
  LIQUIDITY_MODEL_UPC = 2,
  UNRECOGNIZED = -1,
}

export function liquidityModelFromJSON(object: any): LiquidityModel {
  switch (object) {
    case 0:
    case "LIQUIDITY_MODEL_UNSPECIFIED":
      return LiquidityModel.LIQUIDITY_MODEL_UNSPECIFIED;
    case 1:
    case "LIQUIDITY_MODEL_POOL":
      return LiquidityModel.LIQUIDITY_MODEL_POOL;
    case 2:
    case "LIQUIDITY_MODEL_UPC":
      return LiquidityModel.LIQUIDITY_MODEL_UPC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LiquidityModel.UNRECOGNIZED;
  }
}

export function liquidityModelToJSON(object: LiquidityModel): string {
  switch (object) {
    case LiquidityModel.LIQUIDITY_MODEL_UNSPECIFIED:
      return "LIQUIDITY_MODEL_UNSPECIFIED";
    case LiquidityModel.LIQUIDITY_MODEL_POOL:
      return "LIQUIDITY_MODEL_POOL";
    case LiquidityModel.LIQUIDITY_MODEL_UPC:
      return "LIQUIDITY_MODEL_UPC";
    case LiquidityModel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_ACTIVATED = 1,
  STATUS_DEACTIVATED = 2,
  STATUS_PENDING = 3,
  UNRECOGNIZED = -1,
}

export function statusFromJSON(object: any): Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_ACTIVATED":
      return Status.STATUS_ACTIVATED;
    case 2:
    case "STATUS_DEACTIVATED":
      return Status.STATUS_DEACTIVATED;
    case 3:
    case "STATUS_PENDING":
      return Status.STATUS_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Status.UNRECOGNIZED;
  }
}

export function statusToJSON(object: Status): string {
  switch (object) {
    case Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Status.STATUS_ACTIVATED:
      return "STATUS_ACTIVATED";
    case Status.STATUS_DEACTIVATED:
      return "STATUS_DEACTIVATED";
    case Status.STATUS_PENDING:
      return "STATUS_PENDING";
    case Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ProtocolAttributes {
  model: LiquidityModel;
}

export interface MinorAddress {
  chainName: string;
  address: string;
}

export interface SupportedChain {
  chain: string;
  name: string;
  /** Asset address on the chain */
  address: string;
}

export interface ProtocolInfo {
  custodianGroupUid: Uint8Array;
  liquidityModel: LiquidityModel;
  symbol: string;
  originChain: string;
  minorAddresses: MinorAddress[];
  tokenDailyMintLimit: Uint8Array;
  tokenDetails?: TokenDetails | undefined;
  scalarAddress: Uint8Array;
  status: Status;
}

function createBaseProtocolAttributes(): ProtocolAttributes {
  return { model: 0 };
}

export const ProtocolAttributes = {
  encode(
    message: ProtocolAttributes,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.model !== 0) {
      writer.uint32(8).int32(message.model);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolAttributes {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.model = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolAttributes {
    return {
      model: isSet(object.model) ? liquidityModelFromJSON(object.model) : 0,
    };
  },

  toJSON(message: ProtocolAttributes): unknown {
    const obj: any = {};
    if (message.model !== 0) {
      obj.model = liquidityModelToJSON(message.model);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolAttributes>, I>>(
    base?: I,
  ): ProtocolAttributes {
    return ProtocolAttributes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolAttributes>, I>>(
    object: I,
  ): ProtocolAttributes {
    const message = createBaseProtocolAttributes();
    message.model = object.model ?? 0;
    return message;
  },
};

function createBaseMinorAddress(): MinorAddress {
  return { chainName: "", address: "" };
}

export const MinorAddress = {
  encode(
    message: MinorAddress,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chainName !== "") {
      writer.uint32(10).string(message.chainName);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MinorAddress {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinorAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MinorAddress {
    return {
      chainName: isSet(object.chainName)
        ? globalThis.String(object.chainName)
        : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: MinorAddress): unknown {
    const obj: any = {};
    if (message.chainName !== "") {
      obj.chainName = message.chainName;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MinorAddress>, I>>(
    base?: I,
  ): MinorAddress {
    return MinorAddress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MinorAddress>, I>>(
    object: I,
  ): MinorAddress {
    const message = createBaseMinorAddress();
    message.chainName = object.chainName ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseSupportedChain(): SupportedChain {
  return { chain: "", name: "", address: "" };
}

export const SupportedChain = {
  encode(
    message: SupportedChain,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SupportedChain {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSupportedChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SupportedChain {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: SupportedChain): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SupportedChain>, I>>(
    base?: I,
  ): SupportedChain {
    return SupportedChain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SupportedChain>, I>>(
    object: I,
  ): SupportedChain {
    const message = createBaseSupportedChain();
    message.chain = object.chain ?? "";
    message.name = object.name ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseProtocolInfo(): ProtocolInfo {
  return {
    custodianGroupUid: new Uint8Array(0),
    liquidityModel: 0,
    symbol: "",
    originChain: "",
    minorAddresses: [],
    tokenDailyMintLimit: new Uint8Array(0),
    tokenDetails: undefined,
    scalarAddress: new Uint8Array(0),
    status: 0,
  };
}

export const ProtocolInfo = {
  encode(
    message: ProtocolInfo,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(10).bytes(message.custodianGroupUid);
    }
    if (message.liquidityModel !== 0) {
      writer.uint32(16).int32(message.liquidityModel);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.originChain !== "") {
      writer.uint32(34).string(message.originChain);
    }
    for (const v of message.minorAddresses) {
      MinorAddress.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    if (message.tokenDailyMintLimit.length !== 0) {
      writer.uint32(58).bytes(message.tokenDailyMintLimit);
    }
    if (message.tokenDetails !== undefined) {
      TokenDetails.encode(
        message.tokenDetails,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (message.scalarAddress.length !== 0) {
      writer.uint32(74).bytes(message.scalarAddress);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolInfo {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.liquidityModel = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.originChain = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.minorAddresses.push(
            MinorAddress.decode(reader, reader.uint32()),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.tokenDailyMintLimit = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.tokenDetails = TokenDetails.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.scalarAddress = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolInfo {
    return {
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
      liquidityModel: isSet(object.liquidityModel)
        ? liquidityModelFromJSON(object.liquidityModel)
        : 0,
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      originChain: isSet(object.originChain)
        ? globalThis.String(object.originChain)
        : "",
      minorAddresses: globalThis.Array.isArray(object?.minorAddresses)
        ? object.minorAddresses.map((e: any) => MinorAddress.fromJSON(e))
        : [],
      tokenDailyMintLimit: isSet(object.tokenDailyMintLimit)
        ? bytesFromBase64(object.tokenDailyMintLimit)
        : new Uint8Array(0),
      tokenDetails: isSet(object.tokenDetails)
        ? TokenDetails.fromJSON(object.tokenDetails)
        : undefined,
      scalarAddress: isSet(object.scalarAddress)
        ? bytesFromBase64(object.scalarAddress)
        : new Uint8Array(0),
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ProtocolInfo): unknown {
    const obj: any = {};
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    if (message.liquidityModel !== 0) {
      obj.liquidityModel = liquidityModelToJSON(message.liquidityModel);
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.originChain !== "") {
      obj.originChain = message.originChain;
    }
    if (message.minorAddresses?.length) {
      obj.minorAddresses = message.minorAddresses.map((e) =>
        MinorAddress.toJSON(e),
      );
    }
    if (message.tokenDailyMintLimit.length !== 0) {
      obj.tokenDailyMintLimit = base64FromBytes(message.tokenDailyMintLimit);
    }
    if (message.tokenDetails !== undefined) {
      obj.tokenDetails = TokenDetails.toJSON(message.tokenDetails);
    }
    if (message.scalarAddress.length !== 0) {
      obj.scalarAddress = base64FromBytes(message.scalarAddress);
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolInfo>, I>>(
    base?: I,
  ): ProtocolInfo {
    return ProtocolInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolInfo>, I>>(
    object: I,
  ): ProtocolInfo {
    const message = createBaseProtocolInfo();
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    message.liquidityModel = object.liquidityModel ?? 0;
    message.symbol = object.symbol ?? "";
    message.originChain = object.originChain ?? "";
    message.minorAddresses =
      object.minorAddresses?.map((e) => MinorAddress.fromPartial(e)) || [];
    message.tokenDailyMintLimit =
      object.tokenDailyMintLimit ?? new Uint8Array(0);
    message.tokenDetails =
      object.tokenDetails !== undefined && object.tokenDetails !== null
        ? TokenDetails.fromPartial(object.tokenDetails)
        : undefined;
    message.scalarAddress = object.scalarAddress ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
