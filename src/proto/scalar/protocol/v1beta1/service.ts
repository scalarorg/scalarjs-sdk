// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/protocol/v1beta1/service.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  ProtocolRequest,
  ProtocolResponse,
  ProtocolsRequest,
  ProtocolsResponse,
} from "./query";
import {
  AddSupportedChainRequest,
  AddSupportedChainResponse,
  CreateProtocolRequest,
  CreateProtocolResponse,
  UpdateProtocolRequest,
  UpdateProtocolResponse,
  UpdateSupportedChainRequest,
  UpdateSupportedChainResponse,
} from "./tx";

export const protobufPackage = "scalar.protocol.v1beta1";

export interface Msg {
  /** Create protocol */
  CreateProtocol(
    request: CreateProtocolRequest,
  ): Promise<CreateProtocolResponse>;
  UpdateProtocol(
    request: UpdateProtocolRequest,
  ): Promise<UpdateProtocolResponse>;
  /** Add DestinationChain into protocol */
  AddSupportedChain(
    request: AddSupportedChainRequest,
  ): Promise<AddSupportedChainResponse>;
  /** Delete DestinationChain from protocol */
  UpdateSupportedChain(
    request: UpdateSupportedChainRequest,
  ): Promise<UpdateSupportedChainResponse>;
}

export const MsgServiceName = "scalar.protocol.v1beta1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateProtocol = this.CreateProtocol.bind(this);
    this.UpdateProtocol = this.UpdateProtocol.bind(this);
    this.AddSupportedChain = this.AddSupportedChain.bind(this);
    this.UpdateSupportedChain = this.UpdateSupportedChain.bind(this);
  }
  CreateProtocol(
    request: CreateProtocolRequest,
  ): Promise<CreateProtocolResponse> {
    const data = CreateProtocolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProtocol", data);
    return promise.then((data) =>
      CreateProtocolResponse.decode(_m0.Reader.create(data)),
    );
  }

  UpdateProtocol(
    request: UpdateProtocolRequest,
  ): Promise<UpdateProtocolResponse> {
    const data = UpdateProtocolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProtocol", data);
    return promise.then((data) =>
      UpdateProtocolResponse.decode(_m0.Reader.create(data)),
    );
  }

  AddSupportedChain(
    request: AddSupportedChainRequest,
  ): Promise<AddSupportedChainResponse> {
    const data = AddSupportedChainRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddSupportedChain", data);
    return promise.then((data) =>
      AddSupportedChainResponse.decode(_m0.Reader.create(data)),
    );
  }

  UpdateSupportedChain(
    request: UpdateSupportedChainRequest,
  ): Promise<UpdateSupportedChainResponse> {
    const data = UpdateSupportedChainRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "UpdateSupportedChain",
      data,
    );
    return promise.then((data) =>
      UpdateSupportedChainResponse.decode(_m0.Reader.create(data)),
    );
  }
}

/** Query defines the gRPC querier service */
export interface Query {
  /** GetProtocols returns all Protocol */
  Protocols(request: ProtocolsRequest): Promise<ProtocolsResponse>;
  Protocol(request: ProtocolRequest): Promise<ProtocolResponse>;
}

export const QueryServiceName = "scalar.protocol.v1beta1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Protocols = this.Protocols.bind(this);
    this.Protocol = this.Protocol.bind(this);
  }
  Protocols(request: ProtocolsRequest): Promise<ProtocolsResponse> {
    const data = ProtocolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Protocols", data);
    return promise.then((data) =>
      ProtocolsResponse.decode(_m0.Reader.create(data)),
    );
  }

  Protocol(request: ProtocolRequest): Promise<ProtocolResponse> {
    const data = ProtocolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Protocol", data);
    return promise.then((data) =>
      ProtocolResponse.decode(_m0.Reader.create(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}
