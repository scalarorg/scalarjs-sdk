// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/protocol/v1beta1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Asset } from "../../chains/v1beta1/types";
import {
  ProtocolAttributes,
  Status,
  statusFromJSON,
  statusToJSON,
  SupportedChain,
} from "../exported/v1beta1/types";
import { Protocol } from "./types";

export const protobufPackage = "scalar.protocol.v1beta1";

export interface CreateProtocolRequest {
  /** address */
  sender: Uint8Array;
  /** BTC's pubkey */
  bitcoinPubkey: Uint8Array;
  /** e.g., "protocol-1" */
  name: string;
  /** e.g., "pools" */
  tag: string;
  attributes?: ProtocolAttributes | undefined;
  custodianGroupUid: string;
  /** Avatar of the protocol, base64 encoded */
  avatar: Uint8Array;
  /** External asset */
  asset?: Asset | undefined;
  tokenName: string;
  tokenDecimals: number;
  tokenCapacity: string;
  tokenDailyMintLimit: string;
}

export interface CreateProtocolResponse {
  protocol?: Protocol | undefined;
}

/** pubkey used as protocol unique id */
export interface UpdateProtocolRequest {
  sender: Uint8Array;
  name: string;
  /** e.g., "pools" */
  tag: string;
}

export interface UpdateProtocolResponse {
  protocol?: Protocol | undefined;
}

export interface AddSupportedChainRequest {
  sender: Uint8Array;
  chain?: SupportedChain | undefined;
}

export interface AddSupportedChainResponse {
  protocol?: Protocol | undefined;
}

export interface UpdateSupportedChainRequest {
  sender: Uint8Array;
  chainFamily: string;
  chainId: Long;
  status: Status;
}

export interface UpdateSupportedChainResponse {
  protocol?: Protocol | undefined;
}

function createBaseCreateProtocolRequest(): CreateProtocolRequest {
  return {
    sender: new Uint8Array(0),
    bitcoinPubkey: new Uint8Array(0),
    name: "",
    tag: "",
    attributes: undefined,
    custodianGroupUid: "",
    avatar: new Uint8Array(0),
    asset: undefined,
    tokenName: "",
    tokenDecimals: 0,
    tokenCapacity: "",
    tokenDailyMintLimit: "",
  };
}

export const CreateProtocolRequest = {
  encode(
    message: CreateProtocolRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.bitcoinPubkey.length !== 0) {
      writer.uint32(18).bytes(message.bitcoinPubkey);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.attributes !== undefined) {
      ProtocolAttributes.encode(
        message.attributes,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    if (message.custodianGroupUid !== "") {
      writer.uint32(50).string(message.custodianGroupUid);
    }
    if (message.avatar.length !== 0) {
      writer.uint32(58).bytes(message.avatar);
    }
    if (message.asset !== undefined) {
      Asset.encode(message.asset, writer.uint32(66).fork()).ldelim();
    }
    if (message.tokenName !== "") {
      writer.uint32(74).string(message.tokenName);
    }
    if (message.tokenDecimals !== 0) {
      writer.uint32(80).uint32(message.tokenDecimals);
    }
    if (message.tokenCapacity !== "") {
      writer.uint32(90).string(message.tokenCapacity);
    }
    if (message.tokenDailyMintLimit !== "") {
      writer.uint32(98).string(message.tokenDailyMintLimit);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): CreateProtocolRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProtocolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.bitcoinPubkey = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.attributes = ProtocolAttributes.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.custodianGroupUid = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.avatar = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.asset = Asset.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.tokenDecimals = reader.uint32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.tokenCapacity = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.tokenDailyMintLimit = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProtocolRequest {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      bitcoinPubkey: isSet(object.bitcoinPubkey)
        ? bytesFromBase64(object.bitcoinPubkey)
        : new Uint8Array(0),
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      attributes: isSet(object.attributes)
        ? ProtocolAttributes.fromJSON(object.attributes)
        : undefined,
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? globalThis.String(object.custodianGroupUid)
        : "",
      avatar: isSet(object.avatar)
        ? bytesFromBase64(object.avatar)
        : new Uint8Array(0),
      asset: isSet(object.asset) ? Asset.fromJSON(object.asset) : undefined,
      tokenName: isSet(object.tokenName)
        ? globalThis.String(object.tokenName)
        : "",
      tokenDecimals: isSet(object.tokenDecimals)
        ? globalThis.Number(object.tokenDecimals)
        : 0,
      tokenCapacity: isSet(object.tokenCapacity)
        ? globalThis.String(object.tokenCapacity)
        : "",
      tokenDailyMintLimit: isSet(object.tokenDailyMintLimit)
        ? globalThis.String(object.tokenDailyMintLimit)
        : "",
    };
  },

  toJSON(message: CreateProtocolRequest): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.bitcoinPubkey.length !== 0) {
      obj.bitcoinPubkey = base64FromBytes(message.bitcoinPubkey);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.attributes !== undefined) {
      obj.attributes = ProtocolAttributes.toJSON(message.attributes);
    }
    if (message.custodianGroupUid !== "") {
      obj.custodianGroupUid = message.custodianGroupUid;
    }
    if (message.avatar.length !== 0) {
      obj.avatar = base64FromBytes(message.avatar);
    }
    if (message.asset !== undefined) {
      obj.asset = Asset.toJSON(message.asset);
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.tokenDecimals !== 0) {
      obj.tokenDecimals = Math.round(message.tokenDecimals);
    }
    if (message.tokenCapacity !== "") {
      obj.tokenCapacity = message.tokenCapacity;
    }
    if (message.tokenDailyMintLimit !== "") {
      obj.tokenDailyMintLimit = message.tokenDailyMintLimit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProtocolRequest>, I>>(
    base?: I,
  ): CreateProtocolRequest {
    return CreateProtocolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProtocolRequest>, I>>(
    object: I,
  ): CreateProtocolRequest {
    const message = createBaseCreateProtocolRequest();
    message.sender = object.sender ?? new Uint8Array(0);
    message.bitcoinPubkey = object.bitcoinPubkey ?? new Uint8Array(0);
    message.name = object.name ?? "";
    message.tag = object.tag ?? "";
    message.attributes =
      object.attributes !== undefined && object.attributes !== null
        ? ProtocolAttributes.fromPartial(object.attributes)
        : undefined;
    message.custodianGroupUid = object.custodianGroupUid ?? "";
    message.avatar = object.avatar ?? new Uint8Array(0);
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Asset.fromPartial(object.asset)
        : undefined;
    message.tokenName = object.tokenName ?? "";
    message.tokenDecimals = object.tokenDecimals ?? 0;
    message.tokenCapacity = object.tokenCapacity ?? "";
    message.tokenDailyMintLimit = object.tokenDailyMintLimit ?? "";
    return message;
  },
};

function createBaseCreateProtocolResponse(): CreateProtocolResponse {
  return { protocol: undefined };
}

export const CreateProtocolResponse = {
  encode(
    message: CreateProtocolResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.protocol !== undefined) {
      Protocol.encode(message.protocol, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): CreateProtocolResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProtocolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocol = Protocol.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProtocolResponse {
    return {
      protocol: isSet(object.protocol)
        ? Protocol.fromJSON(object.protocol)
        : undefined,
    };
  },

  toJSON(message: CreateProtocolResponse): unknown {
    const obj: any = {};
    if (message.protocol !== undefined) {
      obj.protocol = Protocol.toJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateProtocolResponse>, I>>(
    base?: I,
  ): CreateProtocolResponse {
    return CreateProtocolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateProtocolResponse>, I>>(
    object: I,
  ): CreateProtocolResponse {
    const message = createBaseCreateProtocolResponse();
    message.protocol =
      object.protocol !== undefined && object.protocol !== null
        ? Protocol.fromPartial(object.protocol)
        : undefined;
    return message;
  },
};

function createBaseUpdateProtocolRequest(): UpdateProtocolRequest {
  return { sender: new Uint8Array(0), name: "", tag: "" };
}

export const UpdateProtocolRequest = {
  encode(
    message: UpdateProtocolRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.tag !== "") {
      writer.uint32(26).string(message.tag);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): UpdateProtocolRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProtocolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tag = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProtocolRequest {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
    };
  },

  toJSON(message: UpdateProtocolRequest): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProtocolRequest>, I>>(
    base?: I,
  ): UpdateProtocolRequest {
    return UpdateProtocolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProtocolRequest>, I>>(
    object: I,
  ): UpdateProtocolRequest {
    const message = createBaseUpdateProtocolRequest();
    message.sender = object.sender ?? new Uint8Array(0);
    message.name = object.name ?? "";
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseUpdateProtocolResponse(): UpdateProtocolResponse {
  return { protocol: undefined };
}

export const UpdateProtocolResponse = {
  encode(
    message: UpdateProtocolResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.protocol !== undefined) {
      Protocol.encode(message.protocol, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): UpdateProtocolResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProtocolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocol = Protocol.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProtocolResponse {
    return {
      protocol: isSet(object.protocol)
        ? Protocol.fromJSON(object.protocol)
        : undefined,
    };
  },

  toJSON(message: UpdateProtocolResponse): unknown {
    const obj: any = {};
    if (message.protocol !== undefined) {
      obj.protocol = Protocol.toJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProtocolResponse>, I>>(
    base?: I,
  ): UpdateProtocolResponse {
    return UpdateProtocolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProtocolResponse>, I>>(
    object: I,
  ): UpdateProtocolResponse {
    const message = createBaseUpdateProtocolResponse();
    message.protocol =
      object.protocol !== undefined && object.protocol !== null
        ? Protocol.fromPartial(object.protocol)
        : undefined;
    return message;
  },
};

function createBaseAddSupportedChainRequest(): AddSupportedChainRequest {
  return { sender: new Uint8Array(0), chain: undefined };
}

export const AddSupportedChainRequest = {
  encode(
    message: AddSupportedChainRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.chain !== undefined) {
      SupportedChain.encode(message.chain, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): AddSupportedChainRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSupportedChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = SupportedChain.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSupportedChainRequest {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      chain: isSet(object.chain)
        ? SupportedChain.fromJSON(object.chain)
        : undefined,
    };
  },

  toJSON(message: AddSupportedChainRequest): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.chain !== undefined) {
      obj.chain = SupportedChain.toJSON(message.chain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSupportedChainRequest>, I>>(
    base?: I,
  ): AddSupportedChainRequest {
    return AddSupportedChainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSupportedChainRequest>, I>>(
    object: I,
  ): AddSupportedChainRequest {
    const message = createBaseAddSupportedChainRequest();
    message.sender = object.sender ?? new Uint8Array(0);
    message.chain =
      object.chain !== undefined && object.chain !== null
        ? SupportedChain.fromPartial(object.chain)
        : undefined;
    return message;
  },
};

function createBaseAddSupportedChainResponse(): AddSupportedChainResponse {
  return { protocol: undefined };
}

export const AddSupportedChainResponse = {
  encode(
    message: AddSupportedChainResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.protocol !== undefined) {
      Protocol.encode(message.protocol, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): AddSupportedChainResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSupportedChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocol = Protocol.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddSupportedChainResponse {
    return {
      protocol: isSet(object.protocol)
        ? Protocol.fromJSON(object.protocol)
        : undefined,
    };
  },

  toJSON(message: AddSupportedChainResponse): unknown {
    const obj: any = {};
    if (message.protocol !== undefined) {
      obj.protocol = Protocol.toJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddSupportedChainResponse>, I>>(
    base?: I,
  ): AddSupportedChainResponse {
    return AddSupportedChainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddSupportedChainResponse>, I>>(
    object: I,
  ): AddSupportedChainResponse {
    const message = createBaseAddSupportedChainResponse();
    message.protocol =
      object.protocol !== undefined && object.protocol !== null
        ? Protocol.fromPartial(object.protocol)
        : undefined;
    return message;
  },
};

function createBaseUpdateSupportedChainRequest(): UpdateSupportedChainRequest {
  return {
    sender: new Uint8Array(0),
    chainFamily: "",
    chainId: Long.UZERO,
    status: 0,
  };
}

export const UpdateSupportedChainRequest = {
  encode(
    message: UpdateSupportedChainRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.chainFamily !== "") {
      writer.uint32(18).string(message.chainFamily);
    }
    if (!message.chainId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.chainId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): UpdateSupportedChainRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSupportedChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainFamily = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.chainId = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSupportedChainRequest {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      chainFamily: isSet(object.chainFamily)
        ? globalThis.String(object.chainFamily)
        : "",
      chainId: isSet(object.chainId)
        ? Long.fromValue(object.chainId)
        : Long.UZERO,
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdateSupportedChainRequest): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.chainFamily !== "") {
      obj.chainFamily = message.chainFamily;
    }
    if (!message.chainId.equals(Long.UZERO)) {
      obj.chainId = (message.chainId || Long.UZERO).toString();
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSupportedChainRequest>, I>>(
    base?: I,
  ): UpdateSupportedChainRequest {
    return UpdateSupportedChainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSupportedChainRequest>, I>>(
    object: I,
  ): UpdateSupportedChainRequest {
    const message = createBaseUpdateSupportedChainRequest();
    message.sender = object.sender ?? new Uint8Array(0);
    message.chainFamily = object.chainFamily ?? "";
    message.chainId =
      object.chainId !== undefined && object.chainId !== null
        ? Long.fromValue(object.chainId)
        : Long.UZERO;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdateSupportedChainResponse(): UpdateSupportedChainResponse {
  return { protocol: undefined };
}

export const UpdateSupportedChainResponse = {
  encode(
    message: UpdateSupportedChainResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.protocol !== undefined) {
      Protocol.encode(message.protocol, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): UpdateSupportedChainResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSupportedChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocol = Protocol.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSupportedChainResponse {
    return {
      protocol: isSet(object.protocol)
        ? Protocol.fromJSON(object.protocol)
        : undefined,
    };
  },

  toJSON(message: UpdateSupportedChainResponse): unknown {
    const obj: any = {};
    if (message.protocol !== undefined) {
      obj.protocol = Protocol.toJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSupportedChainResponse>, I>>(
    base?: I,
  ): UpdateSupportedChainResponse {
    return UpdateSupportedChainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSupportedChainResponse>, I>>(
    object: I,
  ): UpdateSupportedChainResponse {
    const message = createBaseUpdateSupportedChainResponse();
    message.protocol =
      object.protocol !== undefined && object.protocol !== null
        ? Protocol.fromPartial(object.protocol)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
