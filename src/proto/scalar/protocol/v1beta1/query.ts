// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/protocol/v1beta1/query.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  Status,
  statusFromJSON,
  statusToJSON,
} from "../exported/v1beta1/types";
import { ProtocolDetails } from "./types";

export const protobufPackage = "scalar.protocol.v1beta1";

export interface ProtocolsRequest {
  pubkey: string;
  address: string;
  name: string;
  status: Status;
}

export interface ProtocolsResponse {
  protocols: ProtocolDetails[];
  total: Long;
}

export interface ProtocolRequest {
  originChain: string;
  minorChain: string;
  symbol: string;
  address: string;
  sender: Uint8Array;
}

export interface ProtocolResponse {
  protocol?: ProtocolDetails | undefined;
}

function createBaseProtocolsRequest(): ProtocolsRequest {
  return { pubkey: "", address: "", name: "", status: 0 };
}

export const ProtocolsRequest = {
  encode(
    message: ProtocolsRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.pubkey !== "") {
      writer.uint32(10).string(message.pubkey);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolsRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pubkey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolsRequest {
    return {
      pubkey: isSet(object.pubkey) ? globalThis.String(object.pubkey) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ProtocolsRequest): unknown {
    const obj: any = {};
    if (message.pubkey !== "") {
      obj.pubkey = message.pubkey;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolsRequest>, I>>(
    base?: I,
  ): ProtocolsRequest {
    return ProtocolsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolsRequest>, I>>(
    object: I,
  ): ProtocolsRequest {
    const message = createBaseProtocolsRequest();
    message.pubkey = object.pubkey ?? "";
    message.address = object.address ?? "";
    message.name = object.name ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseProtocolsResponse(): ProtocolsResponse {
  return { protocols: [], total: Long.UZERO };
}

export const ProtocolsResponse = {
  encode(
    message: ProtocolsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.protocols) {
      ProtocolDetails.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (!message.total.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.total);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolsResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocols.push(
            ProtocolDetails.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.total = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolsResponse {
    return {
      protocols: globalThis.Array.isArray(object?.protocols)
        ? object.protocols.map((e: any) => ProtocolDetails.fromJSON(e))
        : [],
      total: isSet(object.total) ? Long.fromValue(object.total) : Long.UZERO,
    };
  },

  toJSON(message: ProtocolsResponse): unknown {
    const obj: any = {};
    if (message.protocols?.length) {
      obj.protocols = message.protocols.map((e) => ProtocolDetails.toJSON(e));
    }
    if (!message.total.equals(Long.UZERO)) {
      obj.total = (message.total || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolsResponse>, I>>(
    base?: I,
  ): ProtocolsResponse {
    return ProtocolsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolsResponse>, I>>(
    object: I,
  ): ProtocolsResponse {
    const message = createBaseProtocolsResponse();
    message.protocols =
      object.protocols?.map((e) => ProtocolDetails.fromPartial(e)) || [];
    message.total =
      object.total !== undefined && object.total !== null
        ? Long.fromValue(object.total)
        : Long.UZERO;
    return message;
  },
};

function createBaseProtocolRequest(): ProtocolRequest {
  return {
    originChain: "",
    minorChain: "",
    symbol: "",
    address: "",
    sender: new Uint8Array(0),
  };
}

export const ProtocolRequest = {
  encode(
    message: ProtocolRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.originChain !== "") {
      writer.uint32(10).string(message.originChain);
    }
    if (message.minorChain !== "") {
      writer.uint32(18).string(message.minorChain);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    if (message.sender.length !== 0) {
      writer.uint32(42).bytes(message.sender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolRequest {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originChain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.minorChain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolRequest {
    return {
      originChain: isSet(object.originChain)
        ? globalThis.String(object.originChain)
        : "",
      minorChain: isSet(object.minorChain)
        ? globalThis.String(object.minorChain)
        : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ProtocolRequest): unknown {
    const obj: any = {};
    if (message.originChain !== "") {
      obj.originChain = message.originChain;
    }
    if (message.minorChain !== "") {
      obj.minorChain = message.minorChain;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolRequest>, I>>(
    base?: I,
  ): ProtocolRequest {
    return ProtocolRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolRequest>, I>>(
    object: I,
  ): ProtocolRequest {
    const message = createBaseProtocolRequest();
    message.originChain = object.originChain ?? "";
    message.minorChain = object.minorChain ?? "";
    message.symbol = object.symbol ?? "";
    message.address = object.address ?? "";
    message.sender = object.sender ?? new Uint8Array(0);
    return message;
  },
};

function createBaseProtocolResponse(): ProtocolResponse {
  return { protocol: undefined };
}

export const ProtocolResponse = {
  encode(
    message: ProtocolResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.protocol !== undefined) {
      ProtocolDetails.encode(
        message.protocol,
        writer.uint32(10).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProtocolResponse {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtocolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.protocol = ProtocolDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtocolResponse {
    return {
      protocol: isSet(object.protocol)
        ? ProtocolDetails.fromJSON(object.protocol)
        : undefined,
    };
  },

  toJSON(message: ProtocolResponse): unknown {
    const obj: any = {};
    if (message.protocol !== undefined) {
      obj.protocol = ProtocolDetails.toJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtocolResponse>, I>>(
    base?: I,
  ): ProtocolResponse {
    return ProtocolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtocolResponse>, I>>(
    object: I,
  ): ProtocolResponse {
    const message = createBaseProtocolResponse();
    message.protocol =
      object.protocol !== undefined && object.protocol !== null
        ? ProtocolDetails.fromPartial(object.protocol)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
