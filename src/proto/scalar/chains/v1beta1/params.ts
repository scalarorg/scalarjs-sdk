// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/chains/v1beta1/params.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Threshold } from "../../utils/v1beta1/threshold";

export const protobufPackage = "scalar.chains.v1beta1";

export interface Params {
  chain: string;
  confirmationHeight: Long;
  networkKind: number;
  tokenCode: Uint8Array;
  burnable: Uint8Array;
  revoteLockingPeriod: Long;
  chainId: Uint8Array;
  votingThreshold?: Threshold | undefined;
  minVoterCount: Long;
  commandsGasLimit: number;
  votingGracePeriod: Long;
  endBlockerLimit: Long;
  transferLimit: Long;
  metadata: { [key: string]: string };
}

export interface Params_MetadataEntry {
  key: string;
  value: string;
}

function createBaseParams(): Params {
  return {
    chain: "",
    confirmationHeight: Long.UZERO,
    networkKind: 0,
    tokenCode: new Uint8Array(0),
    burnable: new Uint8Array(0),
    revoteLockingPeriod: Long.ZERO,
    chainId: new Uint8Array(0),
    votingThreshold: undefined,
    minVoterCount: Long.ZERO,
    commandsGasLimit: 0,
    votingGracePeriod: Long.ZERO,
    endBlockerLimit: Long.ZERO,
    transferLimit: Long.UZERO,
    metadata: {},
  };
}

export const Params = {
  encode(
    message: Params,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.confirmationHeight);
    }
    if (message.networkKind !== 0) {
      writer.uint32(24).uint32(message.networkKind);
    }
    if (message.tokenCode.length !== 0) {
      writer.uint32(34).bytes(message.tokenCode);
    }
    if (message.burnable.length !== 0) {
      writer.uint32(42).bytes(message.burnable);
    }
    if (!message.revoteLockingPeriod.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.revoteLockingPeriod);
    }
    if (message.chainId.length !== 0) {
      writer.uint32(58).bytes(message.chainId);
    }
    if (message.votingThreshold !== undefined) {
      Threshold.encode(
        message.votingThreshold,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (!message.minVoterCount.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.minVoterCount);
    }
    if (message.commandsGasLimit !== 0) {
      writer.uint32(80).uint32(message.commandsGasLimit);
    }
    if (!message.votingGracePeriod.equals(Long.ZERO)) {
      writer.uint32(88).int64(message.votingGracePeriod);
    }
    if (!message.endBlockerLimit.equals(Long.ZERO)) {
      writer.uint32(96).int64(message.endBlockerLimit);
    }
    if (!message.transferLimit.equals(Long.UZERO)) {
      writer.uint32(104).uint64(message.transferLimit);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Params_MetadataEntry.encode(
        { key: key as any, value },
        writer.uint32(114).fork(),
      ).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.networkKind = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tokenCode = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.burnable = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.revoteLockingPeriod = reader.int64() as Long;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.chainId = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.votingThreshold = Threshold.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.minVoterCount = reader.int64() as Long;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.commandsGasLimit = reader.uint32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.votingGracePeriod = reader.int64() as Long;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.endBlockerLimit = reader.int64() as Long;
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.transferLimit = reader.uint64() as Long;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          const entry14 = Params_MetadataEntry.decode(reader, reader.uint32());
          if (entry14.value !== undefined) {
            message.metadata[entry14.key] = entry14.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      networkKind: isSet(object.networkKind)
        ? globalThis.Number(object.networkKind)
        : 0,
      tokenCode: isSet(object.tokenCode)
        ? bytesFromBase64(object.tokenCode)
        : new Uint8Array(0),
      burnable: isSet(object.burnable)
        ? bytesFromBase64(object.burnable)
        : new Uint8Array(0),
      revoteLockingPeriod: isSet(object.revoteLockingPeriod)
        ? Long.fromValue(object.revoteLockingPeriod)
        : Long.ZERO,
      chainId: isSet(object.chainId)
        ? bytesFromBase64(object.chainId)
        : new Uint8Array(0),
      votingThreshold: isSet(object.votingThreshold)
        ? Threshold.fromJSON(object.votingThreshold)
        : undefined,
      minVoterCount: isSet(object.minVoterCount)
        ? Long.fromValue(object.minVoterCount)
        : Long.ZERO,
      commandsGasLimit: isSet(object.commandsGasLimit)
        ? globalThis.Number(object.commandsGasLimit)
        : 0,
      votingGracePeriod: isSet(object.votingGracePeriod)
        ? Long.fromValue(object.votingGracePeriod)
        : Long.ZERO,
      endBlockerLimit: isSet(object.endBlockerLimit)
        ? Long.fromValue(object.endBlockerLimit)
        : Long.ZERO,
      transferLimit: isSet(object.transferLimit)
        ? Long.fromValue(object.transferLimit)
        : Long.UZERO,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.networkKind !== 0) {
      obj.networkKind = Math.round(message.networkKind);
    }
    if (message.tokenCode.length !== 0) {
      obj.tokenCode = base64FromBytes(message.tokenCode);
    }
    if (message.burnable.length !== 0) {
      obj.burnable = base64FromBytes(message.burnable);
    }
    if (!message.revoteLockingPeriod.equals(Long.ZERO)) {
      obj.revoteLockingPeriod = (
        message.revoteLockingPeriod || Long.ZERO
      ).toString();
    }
    if (message.chainId.length !== 0) {
      obj.chainId = base64FromBytes(message.chainId);
    }
    if (message.votingThreshold !== undefined) {
      obj.votingThreshold = Threshold.toJSON(message.votingThreshold);
    }
    if (!message.minVoterCount.equals(Long.ZERO)) {
      obj.minVoterCount = (message.minVoterCount || Long.ZERO).toString();
    }
    if (message.commandsGasLimit !== 0) {
      obj.commandsGasLimit = Math.round(message.commandsGasLimit);
    }
    if (!message.votingGracePeriod.equals(Long.ZERO)) {
      obj.votingGracePeriod = (
        message.votingGracePeriod || Long.ZERO
      ).toString();
    }
    if (!message.endBlockerLimit.equals(Long.ZERO)) {
      obj.endBlockerLimit = (message.endBlockerLimit || Long.ZERO).toString();
    }
    if (!message.transferLimit.equals(Long.UZERO)) {
      obj.transferLimit = (message.transferLimit || Long.UZERO).toString();
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.chain = object.chain ?? "";
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.networkKind = object.networkKind ?? 0;
    message.tokenCode = object.tokenCode ?? new Uint8Array(0);
    message.burnable = object.burnable ?? new Uint8Array(0);
    message.revoteLockingPeriod =
      object.revoteLockingPeriod !== undefined &&
      object.revoteLockingPeriod !== null
        ? Long.fromValue(object.revoteLockingPeriod)
        : Long.ZERO;
    message.chainId = object.chainId ?? new Uint8Array(0);
    message.votingThreshold =
      object.votingThreshold !== undefined && object.votingThreshold !== null
        ? Threshold.fromPartial(object.votingThreshold)
        : undefined;
    message.minVoterCount =
      object.minVoterCount !== undefined && object.minVoterCount !== null
        ? Long.fromValue(object.minVoterCount)
        : Long.ZERO;
    message.commandsGasLimit = object.commandsGasLimit ?? 0;
    message.votingGracePeriod =
      object.votingGracePeriod !== undefined &&
      object.votingGracePeriod !== null
        ? Long.fromValue(object.votingGracePeriod)
        : Long.ZERO;
    message.endBlockerLimit =
      object.endBlockerLimit !== undefined && object.endBlockerLimit !== null
        ? Long.fromValue(object.endBlockerLimit)
        : Long.ZERO;
    message.transferLimit =
      object.transferLimit !== undefined && object.transferLimit !== null
        ? Long.fromValue(object.transferLimit)
        : Long.UZERO;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseParams_MetadataEntry(): Params_MetadataEntry {
  return { key: "", value: "" };
}

export const Params_MetadataEntry = {
  encode(
    message: Params_MetadataEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): Params_MetadataEntry {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Params_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params_MetadataEntry>, I>>(
    base?: I,
  ): Params_MetadataEntry {
    return Params_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params_MetadataEntry>, I>>(
    object: I,
  ): Params_MetadataEntry {
    const message = createBaseParams_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
