// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/chains/v1beta1/events.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { PollParticipants } from "../../vote/exported/v1beta1/types";
import { PollMapping, TokenDetails } from "./types";

export const protobufPackage = "scalar.chains.v1beta1";

export interface EventConfirmSourceTxsStarted {
  pollMappings: PollMapping[];
  chain: string;
  confirmationHeight: Long;
  participants: Uint8Array[];
}

export interface ConfirmDepositStarted {
  txId: Uint8Array;
  chain: string;
  depositAddress: Uint8Array;
  tokenAddress: Uint8Array;
  confirmationHeight: Long;
  participants?: PollParticipants | undefined;
  asset: string;
}

export interface ConfirmTokenStarted {
  txId: Uint8Array;
  chain: string;
  gatewayAddress: Uint8Array;
  tokenAddress: Uint8Array;
  tokenDetails?: TokenDetails | undefined;
  confirmationHeight: Long;
  participants?: PollParticipants | undefined;
}

export interface ConfirmKeyTransferStarted {
  chain: string;
  txId: Uint8Array;
  gatewayAddress: Uint8Array;
  confirmationHeight: Long;
  participants?: PollParticipants | undefined;
}

export interface VoteEvents {
  chain: string;
  events: Event[];
}

export interface SourceTxConfirmationEvent {
  sender: string;
  destinationChain: string;
  amount: Long;
  asset: string;
  payloadHash: Uint8Array;
  payload: Uint8Array;
  destinationContractAddress: string;
  destinationRecipientAddress: string;
}

export interface ContractCallApproved {
  chain: string;
  eventId: string;
  commandId: Uint8Array;
  sender: string;
  destinationChain: string;
  contractAddress: string;
  payloadHash: Uint8Array;
}

export interface ContractCallFailed {
  chain: string;
  messageId: string;
}

export interface EventContractCallWithMintApproved {
  chain: string;
  eventId: string;
  commandId: Uint8Array;
  sender: string;
  destinationChain: string;
  contractAddress: string;
  payloadHash: Uint8Array;
  asset?: Coin | undefined;
}

export interface EventTokenSent {
  chain: string;
  eventId: string;
  transferId: Long;
  commandId: string;
  sender: string;
  destinationChain: string;
  destinationAddress: string;
  asset?: Coin | undefined;
}

export interface EventContractCall {
  sender: Uint8Array;
  destinationChain: string;
  contractAddress: string;
  payloadHash: Uint8Array;
}

export interface EventContractCallWithToken {
  sender: Uint8Array;
  destinationChain: string;
  contractAddress: string;
  payloadHash: Uint8Array;
  symbol: string;
  amount: Uint8Array;
  payload: Uint8Array;
}

export interface EventTransfer {
  to: Uint8Array;
  amount: Uint8Array;
}

export interface EventTokenDeployed {
  symbol: string;
  tokenAddress: Uint8Array;
}

/** @deprecated */
export interface EventMultisigOwnershipTransferred {
  preOwners: Uint8Array[];
  prevThreshold: Uint8Array;
  newOwners: Uint8Array[];
  newThreshold: Uint8Array;
}

export interface EventMultisigOperatorshipTransferred {
  newOperators: Uint8Array[];
  newThreshold: Uint8Array;
  newWeights: Uint8Array[];
}

export interface Event {
  chain: string;
  txId: Uint8Array;
  status: Event_Status;
  index: Long;
  tokenSent?: EventTokenSent | undefined;
  contractCall?: EventContractCall | undefined;
  contractCallWithToken?: EventContractCallWithToken | undefined;
  contractCallWithMintApproved?: EventContractCallWithMintApproved | undefined;
  transfer?: EventTransfer | undefined;
  tokenDeployed?: EventTokenDeployed | undefined;
  multisigOperatorshipTransferred?:
    | EventMultisigOperatorshipTransferred
    | undefined;
  /** for general chains */
  sourceTxConfirmationEvent?: SourceTxConfirmationEvent | undefined;
}

export enum Event_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_CONFIRMED = 1,
  STATUS_COMPLETED = 2,
  STATUS_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function event_StatusFromJSON(object: any): Event_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return Event_Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_CONFIRMED":
      return Event_Status.STATUS_CONFIRMED;
    case 2:
    case "STATUS_COMPLETED":
      return Event_Status.STATUS_COMPLETED;
    case 3:
    case "STATUS_FAILED":
      return Event_Status.STATUS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Event_Status.UNRECOGNIZED;
  }
}

export function event_StatusToJSON(object: Event_Status): string {
  switch (object) {
    case Event_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case Event_Status.STATUS_CONFIRMED:
      return "STATUS_CONFIRMED";
    case Event_Status.STATUS_COMPLETED:
      return "STATUS_COMPLETED";
    case Event_Status.STATUS_FAILED:
      return "STATUS_FAILED";
    case Event_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NoEventsConfirmed {
  txId: Uint8Array;
  chain: string;
  pollId: Long;
}

export interface ChainEventConfirmed {
  chain: string;
  eventId: string;
  type: string;
}

export interface ChainEventCompleted {
  chain: string;
  eventId: string;
  type: string;
}

export interface ChainEventFailed {
  chain: string;
  eventId: string;
  type: string;
}

export interface ChainEventRetryFailed {
  chain: string;
  eventId: string;
  type: string;
}

export interface MintCommand {
  chain: string;
  transferId: Long;
  commandId: Uint8Array;
  destinationChain: string;
  destinationAddress: string;
  asset?: Coin | undefined;
}

export interface BurnCommand {
  chain: string;
  commandId: Uint8Array;
  destinationChain: string;
  depositAddress: string;
  asset: string;
}

export interface CommandBatchSigned {
  chain: string;
  commandBatchId: Uint8Array;
}

export interface CommandBatchAborted {
  chain: string;
  commandBatchId: Uint8Array;
}

export interface ChainAdded {
  chain: string;
}

function createBaseEventConfirmSourceTxsStarted(): EventConfirmSourceTxsStarted {
  return {
    pollMappings: [],
    chain: "",
    confirmationHeight: Long.UZERO,
    participants: [],
  };
}

export const EventConfirmSourceTxsStarted = {
  encode(
    message: EventConfirmSourceTxsStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.pollMappings) {
      PollMapping.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.confirmationHeight);
    }
    for (const v of message.participants) {
      writer.uint32(34).bytes(v!);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventConfirmSourceTxsStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventConfirmSourceTxsStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pollMappings.push(
            PollMapping.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.participants.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventConfirmSourceTxsStarted {
    return {
      pollMappings: globalThis.Array.isArray(object?.pollMappings)
        ? object.pollMappings.map((e: any) => PollMapping.fromJSON(e))
        : [],
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: EventConfirmSourceTxsStarted): unknown {
    const obj: any = {};
    if (message.pollMappings?.length) {
      obj.pollMappings = message.pollMappings.map((e) => PollMapping.toJSON(e));
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventConfirmSourceTxsStarted>, I>>(
    base?: I,
  ): EventConfirmSourceTxsStarted {
    return EventConfirmSourceTxsStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventConfirmSourceTxsStarted>, I>>(
    object: I,
  ): EventConfirmSourceTxsStarted {
    const message = createBaseEventConfirmSourceTxsStarted();
    message.pollMappings =
      object.pollMappings?.map((e) => PollMapping.fromPartial(e)) || [];
    message.chain = object.chain ?? "";
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants = object.participants?.map((e) => e) || [];
    return message;
  },
};

function createBaseConfirmDepositStarted(): ConfirmDepositStarted {
  return {
    txId: new Uint8Array(0),
    chain: "",
    depositAddress: new Uint8Array(0),
    tokenAddress: new Uint8Array(0),
    confirmationHeight: Long.UZERO,
    participants: undefined,
    asset: "",
  };
}

export const ConfirmDepositStarted = {
  encode(
    message: ConfirmDepositStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.txId.length !== 0) {
      writer.uint32(10).bytes(message.txId);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.depositAddress.length !== 0) {
      writer.uint32(26).bytes(message.depositAddress);
    }
    if (message.tokenAddress.length !== 0) {
      writer.uint32(34).bytes(message.tokenAddress);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.confirmationHeight);
    }
    if (message.participants !== undefined) {
      PollParticipants.encode(
        message.participants,
        writer.uint32(50).fork(),
      ).ldelim();
    }
    if (message.asset !== "") {
      writer.uint32(58).string(message.asset);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ConfirmDepositStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmDepositStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.depositAddress = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tokenAddress = reader.bytes();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.participants = PollParticipants.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmDepositStarted {
    return {
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      depositAddress: isSet(object.depositAddress)
        ? bytesFromBase64(object.depositAddress)
        : new Uint8Array(0),
      tokenAddress: isSet(object.tokenAddress)
        ? bytesFromBase64(object.tokenAddress)
        : new Uint8Array(0),
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: isSet(object.participants)
        ? PollParticipants.fromJSON(object.participants)
        : undefined,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
    };
  },

  toJSON(message: ConfirmDepositStarted): unknown {
    const obj: any = {};
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.depositAddress.length !== 0) {
      obj.depositAddress = base64FromBytes(message.depositAddress);
    }
    if (message.tokenAddress.length !== 0) {
      obj.tokenAddress = base64FromBytes(message.tokenAddress);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants !== undefined) {
      obj.participants = PollParticipants.toJSON(message.participants);
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmDepositStarted>, I>>(
    base?: I,
  ): ConfirmDepositStarted {
    return ConfirmDepositStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmDepositStarted>, I>>(
    object: I,
  ): ConfirmDepositStarted {
    const message = createBaseConfirmDepositStarted();
    message.txId = object.txId ?? new Uint8Array(0);
    message.chain = object.chain ?? "";
    message.depositAddress = object.depositAddress ?? new Uint8Array(0);
    message.tokenAddress = object.tokenAddress ?? new Uint8Array(0);
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants =
      object.participants !== undefined && object.participants !== null
        ? PollParticipants.fromPartial(object.participants)
        : undefined;
    message.asset = object.asset ?? "";
    return message;
  },
};

function createBaseConfirmTokenStarted(): ConfirmTokenStarted {
  return {
    txId: new Uint8Array(0),
    chain: "",
    gatewayAddress: new Uint8Array(0),
    tokenAddress: new Uint8Array(0),
    tokenDetails: undefined,
    confirmationHeight: Long.UZERO,
    participants: undefined,
  };
}

export const ConfirmTokenStarted = {
  encode(
    message: ConfirmTokenStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.txId.length !== 0) {
      writer.uint32(10).bytes(message.txId);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.gatewayAddress.length !== 0) {
      writer.uint32(26).bytes(message.gatewayAddress);
    }
    if (message.tokenAddress.length !== 0) {
      writer.uint32(34).bytes(message.tokenAddress);
    }
    if (message.tokenDetails !== undefined) {
      TokenDetails.encode(
        message.tokenDetails,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.confirmationHeight);
    }
    if (message.participants !== undefined) {
      PollParticipants.encode(
        message.participants,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConfirmTokenStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmTokenStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gatewayAddress = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tokenAddress = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenDetails = TokenDetails.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.participants = PollParticipants.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmTokenStarted {
    return {
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      gatewayAddress: isSet(object.gatewayAddress)
        ? bytesFromBase64(object.gatewayAddress)
        : new Uint8Array(0),
      tokenAddress: isSet(object.tokenAddress)
        ? bytesFromBase64(object.tokenAddress)
        : new Uint8Array(0),
      tokenDetails: isSet(object.tokenDetails)
        ? TokenDetails.fromJSON(object.tokenDetails)
        : undefined,
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: isSet(object.participants)
        ? PollParticipants.fromJSON(object.participants)
        : undefined,
    };
  },

  toJSON(message: ConfirmTokenStarted): unknown {
    const obj: any = {};
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.gatewayAddress.length !== 0) {
      obj.gatewayAddress = base64FromBytes(message.gatewayAddress);
    }
    if (message.tokenAddress.length !== 0) {
      obj.tokenAddress = base64FromBytes(message.tokenAddress);
    }
    if (message.tokenDetails !== undefined) {
      obj.tokenDetails = TokenDetails.toJSON(message.tokenDetails);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants !== undefined) {
      obj.participants = PollParticipants.toJSON(message.participants);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmTokenStarted>, I>>(
    base?: I,
  ): ConfirmTokenStarted {
    return ConfirmTokenStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmTokenStarted>, I>>(
    object: I,
  ): ConfirmTokenStarted {
    const message = createBaseConfirmTokenStarted();
    message.txId = object.txId ?? new Uint8Array(0);
    message.chain = object.chain ?? "";
    message.gatewayAddress = object.gatewayAddress ?? new Uint8Array(0);
    message.tokenAddress = object.tokenAddress ?? new Uint8Array(0);
    message.tokenDetails =
      object.tokenDetails !== undefined && object.tokenDetails !== null
        ? TokenDetails.fromPartial(object.tokenDetails)
        : undefined;
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants =
      object.participants !== undefined && object.participants !== null
        ? PollParticipants.fromPartial(object.participants)
        : undefined;
    return message;
  },
};

function createBaseConfirmKeyTransferStarted(): ConfirmKeyTransferStarted {
  return {
    chain: "",
    txId: new Uint8Array(0),
    gatewayAddress: new Uint8Array(0),
    confirmationHeight: Long.UZERO,
    participants: undefined,
  };
}

export const ConfirmKeyTransferStarted = {
  encode(
    message: ConfirmKeyTransferStarted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.gatewayAddress.length !== 0) {
      writer.uint32(26).bytes(message.gatewayAddress);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.confirmationHeight);
    }
    if (message.participants !== undefined) {
      PollParticipants.encode(
        message.participants,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ConfirmKeyTransferStarted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfirmKeyTransferStarted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.gatewayAddress = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.confirmationHeight = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.participants = PollParticipants.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfirmKeyTransferStarted {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      gatewayAddress: isSet(object.gatewayAddress)
        ? bytesFromBase64(object.gatewayAddress)
        : new Uint8Array(0),
      confirmationHeight: isSet(object.confirmationHeight)
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO,
      participants: isSet(object.participants)
        ? PollParticipants.fromJSON(object.participants)
        : undefined,
    };
  },

  toJSON(message: ConfirmKeyTransferStarted): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.gatewayAddress.length !== 0) {
      obj.gatewayAddress = base64FromBytes(message.gatewayAddress);
    }
    if (!message.confirmationHeight.equals(Long.UZERO)) {
      obj.confirmationHeight = (
        message.confirmationHeight || Long.UZERO
      ).toString();
    }
    if (message.participants !== undefined) {
      obj.participants = PollParticipants.toJSON(message.participants);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfirmKeyTransferStarted>, I>>(
    base?: I,
  ): ConfirmKeyTransferStarted {
    return ConfirmKeyTransferStarted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfirmKeyTransferStarted>, I>>(
    object: I,
  ): ConfirmKeyTransferStarted {
    const message = createBaseConfirmKeyTransferStarted();
    message.chain = object.chain ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.gatewayAddress = object.gatewayAddress ?? new Uint8Array(0);
    message.confirmationHeight =
      object.confirmationHeight !== undefined &&
      object.confirmationHeight !== null
        ? Long.fromValue(object.confirmationHeight)
        : Long.UZERO;
    message.participants =
      object.participants !== undefined && object.participants !== null
        ? PollParticipants.fromPartial(object.participants)
        : undefined;
    return message;
  },
};

function createBaseVoteEvents(): VoteEvents {
  return { chain: "", events: [] };
}

export const VoteEvents = {
  encode(
    message: VoteEvents,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoteEvents {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteEvents {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => Event.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VoteEvents): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VoteEvents>, I>>(base?: I): VoteEvents {
    return VoteEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VoteEvents>, I>>(
    object: I,
  ): VoteEvents {
    const message = createBaseVoteEvents();
    message.chain = object.chain ?? "";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSourceTxConfirmationEvent(): SourceTxConfirmationEvent {
  return {
    sender: "",
    destinationChain: "",
    amount: Long.UZERO,
    asset: "",
    payloadHash: new Uint8Array(0),
    payload: new Uint8Array(0),
    destinationContractAddress: "",
    destinationRecipientAddress: "",
  };
}

export const SourceTxConfirmationEvent = {
  encode(
    message: SourceTxConfirmationEvent,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(18).string(message.destinationChain);
    }
    if (!message.amount.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.asset !== "") {
      writer.uint32(34).string(message.asset);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(42).bytes(message.payloadHash);
    }
    if (message.payload.length !== 0) {
      writer.uint32(50).bytes(message.payload);
    }
    if (message.destinationContractAddress !== "") {
      writer.uint32(58).string(message.destinationContractAddress);
    }
    if (message.destinationRecipientAddress !== "") {
      writer.uint32(66).string(message.destinationRecipientAddress);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): SourceTxConfirmationEvent {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceTxConfirmationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.destinationContractAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.destinationRecipientAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SourceTxConfirmationEvent {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      amount: isSet(object.amount) ? Long.fromValue(object.amount) : Long.UZERO,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      payloadHash: isSet(object.payloadHash)
        ? bytesFromBase64(object.payloadHash)
        : new Uint8Array(0),
      payload: isSet(object.payload)
        ? bytesFromBase64(object.payload)
        : new Uint8Array(0),
      destinationContractAddress: isSet(object.destinationContractAddress)
        ? globalThis.String(object.destinationContractAddress)
        : "",
      destinationRecipientAddress: isSet(object.destinationRecipientAddress)
        ? globalThis.String(object.destinationRecipientAddress)
        : "",
    };
  },

  toJSON(message: SourceTxConfirmationEvent): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (!message.amount.equals(Long.UZERO)) {
      obj.amount = (message.amount || Long.UZERO).toString();
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.destinationContractAddress !== "") {
      obj.destinationContractAddress = message.destinationContractAddress;
    }
    if (message.destinationRecipientAddress !== "") {
      obj.destinationRecipientAddress = message.destinationRecipientAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceTxConfirmationEvent>, I>>(
    base?: I,
  ): SourceTxConfirmationEvent {
    return SourceTxConfirmationEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceTxConfirmationEvent>, I>>(
    object: I,
  ): SourceTxConfirmationEvent {
    const message = createBaseSourceTxConfirmationEvent();
    message.sender = object.sender ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Long.fromValue(object.amount)
        : Long.UZERO;
    message.asset = object.asset ?? "";
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    message.payload = object.payload ?? new Uint8Array(0);
    message.destinationContractAddress =
      object.destinationContractAddress ?? "";
    message.destinationRecipientAddress =
      object.destinationRecipientAddress ?? "";
    return message;
  },
};

function createBaseContractCallApproved(): ContractCallApproved {
  return {
    chain: "",
    eventId: "",
    commandId: new Uint8Array(0),
    sender: "",
    destinationChain: "",
    contractAddress: "",
    payloadHash: new Uint8Array(0),
  };
}

export const ContractCallApproved = {
  encode(
    message: ContractCallApproved,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(42).string(message.destinationChain);
    }
    if (message.contractAddress !== "") {
      writer.uint32(50).string(message.contractAddress);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(58).bytes(message.payloadHash);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ContractCallApproved {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractCallApproved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractCallApproved {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      contractAddress: isSet(object.contractAddress)
        ? globalThis.String(object.contractAddress)
        : "",
      payloadHash: isSet(object.payloadHash)
        ? bytesFromBase64(object.payloadHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ContractCallApproved): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContractCallApproved>, I>>(
    base?: I,
  ): ContractCallApproved {
    return ContractCallApproved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContractCallApproved>, I>>(
    object: I,
  ): ContractCallApproved {
    const message = createBaseContractCallApproved();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseContractCallFailed(): ContractCallFailed {
  return { chain: "", messageId: "" };
}

export const ContractCallFailed = {
  encode(
    message: ContractCallFailed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.messageId !== "") {
      writer.uint32(18).string(message.messageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ContractCallFailed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContractCallFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.messageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContractCallFailed {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      messageId: isSet(object.messageId)
        ? globalThis.String(object.messageId)
        : "",
    };
  },

  toJSON(message: ContractCallFailed): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContractCallFailed>, I>>(
    base?: I,
  ): ContractCallFailed {
    return ContractCallFailed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContractCallFailed>, I>>(
    object: I,
  ): ContractCallFailed {
    const message = createBaseContractCallFailed();
    message.chain = object.chain ?? "";
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseEventContractCallWithMintApproved(): EventContractCallWithMintApproved {
  return {
    chain: "",
    eventId: "",
    commandId: new Uint8Array(0),
    sender: "",
    destinationChain: "",
    contractAddress: "",
    payloadHash: new Uint8Array(0),
    asset: undefined,
  };
}

export const EventContractCallWithMintApproved = {
  encode(
    message: EventContractCallWithMintApproved,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(42).string(message.destinationChain);
    }
    if (message.contractAddress !== "") {
      writer.uint32(50).string(message.contractAddress);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(58).bytes(message.payloadHash);
    }
    if (message.asset !== undefined) {
      Coin.encode(message.asset, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventContractCallWithMintApproved {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventContractCallWithMintApproved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.asset = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventContractCallWithMintApproved {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      contractAddress: isSet(object.contractAddress)
        ? globalThis.String(object.contractAddress)
        : "",
      payloadHash: isSet(object.payloadHash)
        ? bytesFromBase64(object.payloadHash)
        : new Uint8Array(0),
      asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
    };
  },

  toJSON(message: EventContractCallWithMintApproved): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    if (message.asset !== undefined) {
      obj.asset = Coin.toJSON(message.asset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventContractCallWithMintApproved>, I>>(
    base?: I,
  ): EventContractCallWithMintApproved {
    return EventContractCallWithMintApproved.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<EventContractCallWithMintApproved>, I>,
  >(object: I): EventContractCallWithMintApproved {
    const message = createBaseEventContractCallWithMintApproved();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    message.sender = object.sender ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Coin.fromPartial(object.asset)
        : undefined;
    return message;
  },
};

function createBaseEventTokenSent(): EventTokenSent {
  return {
    chain: "",
    eventId: "",
    transferId: Long.UZERO,
    commandId: "",
    sender: "",
    destinationChain: "",
    destinationAddress: "",
    asset: undefined,
  };
}

export const EventTokenSent = {
  encode(
    message: EventTokenSent,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (!message.transferId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.transferId);
    }
    if (message.commandId !== "") {
      writer.uint32(34).string(message.commandId);
    }
    if (message.sender !== "") {
      writer.uint32(42).string(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(50).string(message.destinationChain);
    }
    if (message.destinationAddress !== "") {
      writer.uint32(58).string(message.destinationAddress);
    }
    if (message.asset !== undefined) {
      Coin.encode(message.asset, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventTokenSent {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTokenSent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.transferId = reader.uint64() as Long;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.commandId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sender = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.destinationAddress = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.asset = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTokenSent {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      transferId: isSet(object.transferId)
        ? Long.fromValue(object.transferId)
        : Long.UZERO,
      commandId: isSet(object.commandId)
        ? globalThis.String(object.commandId)
        : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      destinationAddress: isSet(object.destinationAddress)
        ? globalThis.String(object.destinationAddress)
        : "",
      asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
    };
  },

  toJSON(message: EventTokenSent): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (!message.transferId.equals(Long.UZERO)) {
      obj.transferId = (message.transferId || Long.UZERO).toString();
    }
    if (message.commandId !== "") {
      obj.commandId = message.commandId;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.destinationAddress !== "") {
      obj.destinationAddress = message.destinationAddress;
    }
    if (message.asset !== undefined) {
      obj.asset = Coin.toJSON(message.asset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTokenSent>, I>>(
    base?: I,
  ): EventTokenSent {
    return EventTokenSent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTokenSent>, I>>(
    object: I,
  ): EventTokenSent {
    const message = createBaseEventTokenSent();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.transferId =
      object.transferId !== undefined && object.transferId !== null
        ? Long.fromValue(object.transferId)
        : Long.UZERO;
    message.commandId = object.commandId ?? "";
    message.sender = object.sender ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.destinationAddress = object.destinationAddress ?? "";
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Coin.fromPartial(object.asset)
        : undefined;
    return message;
  },
};

function createBaseEventContractCall(): EventContractCall {
  return {
    sender: new Uint8Array(0),
    destinationChain: "",
    contractAddress: "",
    payloadHash: new Uint8Array(0),
  };
}

export const EventContractCall = {
  encode(
    message: EventContractCall,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(18).string(message.destinationChain);
    }
    if (message.contractAddress !== "") {
      writer.uint32(26).string(message.contractAddress);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(34).bytes(message.payloadHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventContractCall {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventContractCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventContractCall {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      contractAddress: isSet(object.contractAddress)
        ? globalThis.String(object.contractAddress)
        : "",
      payloadHash: isSet(object.payloadHash)
        ? bytesFromBase64(object.payloadHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EventContractCall): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventContractCall>, I>>(
    base?: I,
  ): EventContractCall {
    return EventContractCall.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventContractCall>, I>>(
    object: I,
  ): EventContractCall {
    const message = createBaseEventContractCall();
    message.sender = object.sender ?? new Uint8Array(0);
    message.destinationChain = object.destinationChain ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventContractCallWithToken(): EventContractCallWithToken {
  return {
    sender: new Uint8Array(0),
    destinationChain: "",
    contractAddress: "",
    payloadHash: new Uint8Array(0),
    symbol: "",
    amount: new Uint8Array(0),
    payload: new Uint8Array(0),
  };
}

export const EventContractCallWithToken = {
  encode(
    message: EventContractCallWithToken,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.sender.length !== 0) {
      writer.uint32(10).bytes(message.sender);
    }
    if (message.destinationChain !== "") {
      writer.uint32(18).string(message.destinationChain);
    }
    if (message.contractAddress !== "") {
      writer.uint32(26).string(message.contractAddress);
    }
    if (message.payloadHash.length !== 0) {
      writer.uint32(34).bytes(message.payloadHash);
    }
    if (message.symbol !== "") {
      writer.uint32(42).string(message.symbol);
    }
    if (message.amount.length !== 0) {
      writer.uint32(50).bytes(message.amount);
    }
    if (message.payload.length !== 0) {
      writer.uint32(58).bytes(message.payload);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventContractCallWithToken {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventContractCallWithToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sender = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.payloadHash = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.amount = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.payload = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventContractCallWithToken {
    return {
      sender: isSet(object.sender)
        ? bytesFromBase64(object.sender)
        : new Uint8Array(0),
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      contractAddress: isSet(object.contractAddress)
        ? globalThis.String(object.contractAddress)
        : "",
      payloadHash: isSet(object.payloadHash)
        ? bytesFromBase64(object.payloadHash)
        : new Uint8Array(0),
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      amount: isSet(object.amount)
        ? bytesFromBase64(object.amount)
        : new Uint8Array(0),
      payload: isSet(object.payload)
        ? bytesFromBase64(object.payload)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EventContractCallWithToken): unknown {
    const obj: any = {};
    if (message.sender.length !== 0) {
      obj.sender = base64FromBytes(message.sender);
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.payloadHash.length !== 0) {
      obj.payloadHash = base64FromBytes(message.payloadHash);
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.amount.length !== 0) {
      obj.amount = base64FromBytes(message.amount);
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventContractCallWithToken>, I>>(
    base?: I,
  ): EventContractCallWithToken {
    return EventContractCallWithToken.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventContractCallWithToken>, I>>(
    object: I,
  ): EventContractCallWithToken {
    const message = createBaseEventContractCallWithToken();
    message.sender = object.sender ?? new Uint8Array(0);
    message.destinationChain = object.destinationChain ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.payloadHash = object.payloadHash ?? new Uint8Array(0);
    message.symbol = object.symbol ?? "";
    message.amount = object.amount ?? new Uint8Array(0);
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventTransfer(): EventTransfer {
  return { to: new Uint8Array(0), amount: new Uint8Array(0) };
}

export const EventTransfer = {
  encode(
    message: EventTransfer,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.to.length !== 0) {
      writer.uint32(10).bytes(message.to);
    }
    if (message.amount.length !== 0) {
      writer.uint32(18).bytes(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventTransfer {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.to = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTransfer {
    return {
      to: isSet(object.to) ? bytesFromBase64(object.to) : new Uint8Array(0),
      amount: isSet(object.amount)
        ? bytesFromBase64(object.amount)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EventTransfer): unknown {
    const obj: any = {};
    if (message.to.length !== 0) {
      obj.to = base64FromBytes(message.to);
    }
    if (message.amount.length !== 0) {
      obj.amount = base64FromBytes(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTransfer>, I>>(
    base?: I,
  ): EventTransfer {
    return EventTransfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTransfer>, I>>(
    object: I,
  ): EventTransfer {
    const message = createBaseEventTransfer();
    message.to = object.to ?? new Uint8Array(0);
    message.amount = object.amount ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventTokenDeployed(): EventTokenDeployed {
  return { symbol: "", tokenAddress: new Uint8Array(0) };
}

export const EventTokenDeployed = {
  encode(
    message: EventTokenDeployed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.symbol !== "") {
      writer.uint32(10).string(message.symbol);
    }
    if (message.tokenAddress.length !== 0) {
      writer.uint32(18).bytes(message.tokenAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EventTokenDeployed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTokenDeployed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.symbol = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenAddress = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTokenDeployed {
    return {
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      tokenAddress: isSet(object.tokenAddress)
        ? bytesFromBase64(object.tokenAddress)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EventTokenDeployed): unknown {
    const obj: any = {};
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.tokenAddress.length !== 0) {
      obj.tokenAddress = base64FromBytes(message.tokenAddress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventTokenDeployed>, I>>(
    base?: I,
  ): EventTokenDeployed {
    return EventTokenDeployed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventTokenDeployed>, I>>(
    object: I,
  ): EventTokenDeployed {
    const message = createBaseEventTokenDeployed();
    message.symbol = object.symbol ?? "";
    message.tokenAddress = object.tokenAddress ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventMultisigOwnershipTransferred(): EventMultisigOwnershipTransferred {
  return {
    preOwners: [],
    prevThreshold: new Uint8Array(0),
    newOwners: [],
    newThreshold: new Uint8Array(0),
  };
}

export const EventMultisigOwnershipTransferred = {
  encode(
    message: EventMultisigOwnershipTransferred,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.preOwners) {
      writer.uint32(10).bytes(v!);
    }
    if (message.prevThreshold.length !== 0) {
      writer.uint32(18).bytes(message.prevThreshold);
    }
    for (const v of message.newOwners) {
      writer.uint32(26).bytes(v!);
    }
    if (message.newThreshold.length !== 0) {
      writer.uint32(34).bytes(message.newThreshold);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventMultisigOwnershipTransferred {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMultisigOwnershipTransferred();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.preOwners.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.prevThreshold = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newOwners.push(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.newThreshold = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMultisigOwnershipTransferred {
    return {
      preOwners: globalThis.Array.isArray(object?.preOwners)
        ? object.preOwners.map((e: any) => bytesFromBase64(e))
        : [],
      prevThreshold: isSet(object.prevThreshold)
        ? bytesFromBase64(object.prevThreshold)
        : new Uint8Array(0),
      newOwners: globalThis.Array.isArray(object?.newOwners)
        ? object.newOwners.map((e: any) => bytesFromBase64(e))
        : [],
      newThreshold: isSet(object.newThreshold)
        ? bytesFromBase64(object.newThreshold)
        : new Uint8Array(0),
    };
  },

  toJSON(message: EventMultisigOwnershipTransferred): unknown {
    const obj: any = {};
    if (message.preOwners?.length) {
      obj.preOwners = message.preOwners.map((e) => base64FromBytes(e));
    }
    if (message.prevThreshold.length !== 0) {
      obj.prevThreshold = base64FromBytes(message.prevThreshold);
    }
    if (message.newOwners?.length) {
      obj.newOwners = message.newOwners.map((e) => base64FromBytes(e));
    }
    if (message.newThreshold.length !== 0) {
      obj.newThreshold = base64FromBytes(message.newThreshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMultisigOwnershipTransferred>, I>>(
    base?: I,
  ): EventMultisigOwnershipTransferred {
    return EventMultisigOwnershipTransferred.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<EventMultisigOwnershipTransferred>, I>,
  >(object: I): EventMultisigOwnershipTransferred {
    const message = createBaseEventMultisigOwnershipTransferred();
    message.preOwners = object.preOwners?.map((e) => e) || [];
    message.prevThreshold = object.prevThreshold ?? new Uint8Array(0);
    message.newOwners = object.newOwners?.map((e) => e) || [];
    message.newThreshold = object.newThreshold ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventMultisigOperatorshipTransferred(): EventMultisigOperatorshipTransferred {
  return { newOperators: [], newThreshold: new Uint8Array(0), newWeights: [] };
}

export const EventMultisigOperatorshipTransferred = {
  encode(
    message: EventMultisigOperatorshipTransferred,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.newOperators) {
      writer.uint32(26).bytes(v!);
    }
    if (message.newThreshold.length !== 0) {
      writer.uint32(34).bytes(message.newThreshold);
    }
    for (const v of message.newWeights) {
      writer.uint32(42).bytes(v!);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): EventMultisigOperatorshipTransferred {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMultisigOperatorshipTransferred();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newOperators.push(reader.bytes());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.newThreshold = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.newWeights.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMultisigOperatorshipTransferred {
    return {
      newOperators: globalThis.Array.isArray(object?.newOperators)
        ? object.newOperators.map((e: any) => bytesFromBase64(e))
        : [],
      newThreshold: isSet(object.newThreshold)
        ? bytesFromBase64(object.newThreshold)
        : new Uint8Array(0),
      newWeights: globalThis.Array.isArray(object?.newWeights)
        ? object.newWeights.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: EventMultisigOperatorshipTransferred): unknown {
    const obj: any = {};
    if (message.newOperators?.length) {
      obj.newOperators = message.newOperators.map((e) => base64FromBytes(e));
    }
    if (message.newThreshold.length !== 0) {
      obj.newThreshold = base64FromBytes(message.newThreshold);
    }
    if (message.newWeights?.length) {
      obj.newWeights = message.newWeights.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventMultisigOperatorshipTransferred>, I>>(
    base?: I,
  ): EventMultisigOperatorshipTransferred {
    return EventMultisigOperatorshipTransferred.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<EventMultisigOperatorshipTransferred>, I>,
  >(object: I): EventMultisigOperatorshipTransferred {
    const message = createBaseEventMultisigOperatorshipTransferred();
    message.newOperators = object.newOperators?.map((e) => e) || [];
    message.newThreshold = object.newThreshold ?? new Uint8Array(0);
    message.newWeights = object.newWeights?.map((e) => e) || [];
    return message;
  },
};

function createBaseEvent(): Event {
  return {
    chain: "",
    txId: new Uint8Array(0),
    status: 0,
    index: Long.UZERO,
    tokenSent: undefined,
    contractCall: undefined,
    contractCallWithToken: undefined,
    contractCallWithMintApproved: undefined,
    transfer: undefined,
    tokenDeployed: undefined,
    multisigOperatorshipTransferred: undefined,
    sourceTxConfirmationEvent: undefined,
  };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.txId.length !== 0) {
      writer.uint32(18).bytes(message.txId);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (!message.index.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.index);
    }
    if (message.tokenSent !== undefined) {
      EventTokenSent.encode(
        message.tokenSent,
        writer.uint32(42).fork(),
      ).ldelim();
    }
    if (message.contractCall !== undefined) {
      EventContractCall.encode(
        message.contractCall,
        writer.uint32(50).fork(),
      ).ldelim();
    }
    if (message.contractCallWithToken !== undefined) {
      EventContractCallWithToken.encode(
        message.contractCallWithToken,
        writer.uint32(58).fork(),
      ).ldelim();
    }
    if (message.contractCallWithMintApproved !== undefined) {
      EventContractCallWithMintApproved.encode(
        message.contractCallWithMintApproved,
        writer.uint32(66).fork(),
      ).ldelim();
    }
    if (message.transfer !== undefined) {
      EventTransfer.encode(message.transfer, writer.uint32(74).fork()).ldelim();
    }
    if (message.tokenDeployed !== undefined) {
      EventTokenDeployed.encode(
        message.tokenDeployed,
        writer.uint32(82).fork(),
      ).ldelim();
    }
    if (message.multisigOperatorshipTransferred !== undefined) {
      EventMultisigOperatorshipTransferred.encode(
        message.multisigOperatorshipTransferred,
        writer.uint32(90).fork(),
      ).ldelim();
    }
    if (message.sourceTxConfirmationEvent !== undefined) {
      SourceTxConfirmationEvent.encode(
        message.sourceTxConfirmationEvent,
        writer.uint32(98).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.index = reader.uint64() as Long;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenSent = EventTokenSent.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.contractCall = EventContractCall.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.contractCallWithToken = EventContractCallWithToken.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.contractCallWithMintApproved =
            EventContractCallWithMintApproved.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.transfer = EventTransfer.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.tokenDeployed = EventTokenDeployed.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.multisigOperatorshipTransferred =
            EventMultisigOperatorshipTransferred.decode(
              reader,
              reader.uint32(),
            );
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.sourceTxConfirmationEvent = SourceTxConfirmationEvent.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      status: isSet(object.status) ? event_StatusFromJSON(object.status) : 0,
      index: isSet(object.index) ? Long.fromValue(object.index) : Long.UZERO,
      tokenSent: isSet(object.tokenSent)
        ? EventTokenSent.fromJSON(object.tokenSent)
        : undefined,
      contractCall: isSet(object.contractCall)
        ? EventContractCall.fromJSON(object.contractCall)
        : undefined,
      contractCallWithToken: isSet(object.contractCallWithToken)
        ? EventContractCallWithToken.fromJSON(object.contractCallWithToken)
        : undefined,
      contractCallWithMintApproved: isSet(object.contractCallWithMintApproved)
        ? EventContractCallWithMintApproved.fromJSON(
            object.contractCallWithMintApproved,
          )
        : undefined,
      transfer: isSet(object.transfer)
        ? EventTransfer.fromJSON(object.transfer)
        : undefined,
      tokenDeployed: isSet(object.tokenDeployed)
        ? EventTokenDeployed.fromJSON(object.tokenDeployed)
        : undefined,
      multisigOperatorshipTransferred: isSet(
        object.multisigOperatorshipTransferred,
      )
        ? EventMultisigOperatorshipTransferred.fromJSON(
            object.multisigOperatorshipTransferred,
          )
        : undefined,
      sourceTxConfirmationEvent: isSet(object.sourceTxConfirmationEvent)
        ? SourceTxConfirmationEvent.fromJSON(object.sourceTxConfirmationEvent)
        : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.status !== 0) {
      obj.status = event_StatusToJSON(message.status);
    }
    if (!message.index.equals(Long.UZERO)) {
      obj.index = (message.index || Long.UZERO).toString();
    }
    if (message.tokenSent !== undefined) {
      obj.tokenSent = EventTokenSent.toJSON(message.tokenSent);
    }
    if (message.contractCall !== undefined) {
      obj.contractCall = EventContractCall.toJSON(message.contractCall);
    }
    if (message.contractCallWithToken !== undefined) {
      obj.contractCallWithToken = EventContractCallWithToken.toJSON(
        message.contractCallWithToken,
      );
    }
    if (message.contractCallWithMintApproved !== undefined) {
      obj.contractCallWithMintApproved =
        EventContractCallWithMintApproved.toJSON(
          message.contractCallWithMintApproved,
        );
    }
    if (message.transfer !== undefined) {
      obj.transfer = EventTransfer.toJSON(message.transfer);
    }
    if (message.tokenDeployed !== undefined) {
      obj.tokenDeployed = EventTokenDeployed.toJSON(message.tokenDeployed);
    }
    if (message.multisigOperatorshipTransferred !== undefined) {
      obj.multisigOperatorshipTransferred =
        EventMultisigOperatorshipTransferred.toJSON(
          message.multisigOperatorshipTransferred,
        );
    }
    if (message.sourceTxConfirmationEvent !== undefined) {
      obj.sourceTxConfirmationEvent = SourceTxConfirmationEvent.toJSON(
        message.sourceTxConfirmationEvent,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.chain = object.chain ?? "";
    message.txId = object.txId ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.index =
      object.index !== undefined && object.index !== null
        ? Long.fromValue(object.index)
        : Long.UZERO;
    message.tokenSent =
      object.tokenSent !== undefined && object.tokenSent !== null
        ? EventTokenSent.fromPartial(object.tokenSent)
        : undefined;
    message.contractCall =
      object.contractCall !== undefined && object.contractCall !== null
        ? EventContractCall.fromPartial(object.contractCall)
        : undefined;
    message.contractCallWithToken =
      object.contractCallWithToken !== undefined &&
      object.contractCallWithToken !== null
        ? EventContractCallWithToken.fromPartial(object.contractCallWithToken)
        : undefined;
    message.contractCallWithMintApproved =
      object.contractCallWithMintApproved !== undefined &&
      object.contractCallWithMintApproved !== null
        ? EventContractCallWithMintApproved.fromPartial(
            object.contractCallWithMintApproved,
          )
        : undefined;
    message.transfer =
      object.transfer !== undefined && object.transfer !== null
        ? EventTransfer.fromPartial(object.transfer)
        : undefined;
    message.tokenDeployed =
      object.tokenDeployed !== undefined && object.tokenDeployed !== null
        ? EventTokenDeployed.fromPartial(object.tokenDeployed)
        : undefined;
    message.multisigOperatorshipTransferred =
      object.multisigOperatorshipTransferred !== undefined &&
      object.multisigOperatorshipTransferred !== null
        ? EventMultisigOperatorshipTransferred.fromPartial(
            object.multisigOperatorshipTransferred,
          )
        : undefined;
    message.sourceTxConfirmationEvent =
      object.sourceTxConfirmationEvent !== undefined &&
      object.sourceTxConfirmationEvent !== null
        ? SourceTxConfirmationEvent.fromPartial(
            object.sourceTxConfirmationEvent,
          )
        : undefined;
    return message;
  },
};

function createBaseNoEventsConfirmed(): NoEventsConfirmed {
  return { txId: new Uint8Array(0), chain: "", pollId: Long.UZERO };
}

export const NoEventsConfirmed = {
  encode(
    message: NoEventsConfirmed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.txId.length !== 0) {
      writer.uint32(10).bytes(message.txId);
    }
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (!message.pollId.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.pollId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NoEventsConfirmed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoEventsConfirmed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pollId = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoEventsConfirmed {
    return {
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      pollId: isSet(object.pollId) ? Long.fromValue(object.pollId) : Long.UZERO,
    };
  },

  toJSON(message: NoEventsConfirmed): unknown {
    const obj: any = {};
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.pollId.equals(Long.UZERO)) {
      obj.pollId = (message.pollId || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoEventsConfirmed>, I>>(
    base?: I,
  ): NoEventsConfirmed {
    return NoEventsConfirmed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoEventsConfirmed>, I>>(
    object: I,
  ): NoEventsConfirmed {
    const message = createBaseNoEventsConfirmed();
    message.txId = object.txId ?? new Uint8Array(0);
    message.chain = object.chain ?? "";
    message.pollId =
      object.pollId !== undefined && object.pollId !== null
        ? Long.fromValue(object.pollId)
        : Long.UZERO;
    return message;
  },
};

function createBaseChainEventConfirmed(): ChainEventConfirmed {
  return { chain: "", eventId: "", type: "" };
}

export const ChainEventConfirmed = {
  encode(
    message: ChainEventConfirmed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChainEventConfirmed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainEventConfirmed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainEventConfirmed {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ChainEventConfirmed): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainEventConfirmed>, I>>(
    base?: I,
  ): ChainEventConfirmed {
    return ChainEventConfirmed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainEventConfirmed>, I>>(
    object: I,
  ): ChainEventConfirmed {
    const message = createBaseChainEventConfirmed();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseChainEventCompleted(): ChainEventCompleted {
  return { chain: "", eventId: "", type: "" };
}

export const ChainEventCompleted = {
  encode(
    message: ChainEventCompleted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChainEventCompleted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainEventCompleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainEventCompleted {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ChainEventCompleted): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainEventCompleted>, I>>(
    base?: I,
  ): ChainEventCompleted {
    return ChainEventCompleted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainEventCompleted>, I>>(
    object: I,
  ): ChainEventCompleted {
    const message = createBaseChainEventCompleted();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseChainEventFailed(): ChainEventFailed {
  return { chain: "", eventId: "", type: "" };
}

export const ChainEventFailed = {
  encode(
    message: ChainEventFailed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChainEventFailed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainEventFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainEventFailed {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ChainEventFailed): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainEventFailed>, I>>(
    base?: I,
  ): ChainEventFailed {
    return ChainEventFailed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainEventFailed>, I>>(
    object: I,
  ): ChainEventFailed {
    const message = createBaseChainEventFailed();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseChainEventRetryFailed(): ChainEventRetryFailed {
  return { chain: "", eventId: "", type: "" };
}

export const ChainEventRetryFailed = {
  encode(
    message: ChainEventRetryFailed,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ChainEventRetryFailed {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainEventRetryFailed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainEventRetryFailed {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: ChainEventRetryFailed): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainEventRetryFailed>, I>>(
    base?: I,
  ): ChainEventRetryFailed {
    return ChainEventRetryFailed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainEventRetryFailed>, I>>(
    object: I,
  ): ChainEventRetryFailed {
    const message = createBaseChainEventRetryFailed();
    message.chain = object.chain ?? "";
    message.eventId = object.eventId ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseMintCommand(): MintCommand {
  return {
    chain: "",
    transferId: Long.UZERO,
    commandId: new Uint8Array(0),
    destinationChain: "",
    destinationAddress: "",
    asset: undefined,
  };
}

export const MintCommand = {
  encode(
    message: MintCommand,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (!message.transferId.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.transferId);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(26).bytes(message.commandId);
    }
    if (message.destinationChain !== "") {
      writer.uint32(34).string(message.destinationChain);
    }
    if (message.destinationAddress !== "") {
      writer.uint32(42).string(message.destinationAddress);
    }
    if (message.asset !== undefined) {
      Coin.encode(message.asset, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MintCommand {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.transferId = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.destinationAddress = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.asset = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintCommand {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      transferId: isSet(object.transferId)
        ? Long.fromValue(object.transferId)
        : Long.UZERO,
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      destinationAddress: isSet(object.destinationAddress)
        ? globalThis.String(object.destinationAddress)
        : "",
      asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
    };
  },

  toJSON(message: MintCommand): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (!message.transferId.equals(Long.UZERO)) {
      obj.transferId = (message.transferId || Long.UZERO).toString();
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.destinationAddress !== "") {
      obj.destinationAddress = message.destinationAddress;
    }
    if (message.asset !== undefined) {
      obj.asset = Coin.toJSON(message.asset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintCommand>, I>>(base?: I): MintCommand {
    return MintCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintCommand>, I>>(
    object: I,
  ): MintCommand {
    const message = createBaseMintCommand();
    message.chain = object.chain ?? "";
    message.transferId =
      object.transferId !== undefined && object.transferId !== null
        ? Long.fromValue(object.transferId)
        : Long.UZERO;
    message.commandId = object.commandId ?? new Uint8Array(0);
    message.destinationChain = object.destinationChain ?? "";
    message.destinationAddress = object.destinationAddress ?? "";
    message.asset =
      object.asset !== undefined && object.asset !== null
        ? Coin.fromPartial(object.asset)
        : undefined;
    return message;
  },
};

function createBaseBurnCommand(): BurnCommand {
  return {
    chain: "",
    commandId: new Uint8Array(0),
    destinationChain: "",
    depositAddress: "",
    asset: "",
  };
}

export const BurnCommand = {
  encode(
    message: BurnCommand,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    if (message.commandId.length !== 0) {
      writer.uint32(18).bytes(message.commandId);
    }
    if (message.destinationChain !== "") {
      writer.uint32(26).string(message.destinationChain);
    }
    if (message.depositAddress !== "") {
      writer.uint32(34).string(message.depositAddress);
    }
    if (message.asset !== "") {
      writer.uint32(42).string(message.asset);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BurnCommand {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBurnCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commandId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.depositAddress = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BurnCommand {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandId: isSet(object.commandId)
        ? bytesFromBase64(object.commandId)
        : new Uint8Array(0),
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      depositAddress: isSet(object.depositAddress)
        ? globalThis.String(object.depositAddress)
        : "",
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
    };
  },

  toJSON(message: BurnCommand): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandId.length !== 0) {
      obj.commandId = base64FromBytes(message.commandId);
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.depositAddress !== "") {
      obj.depositAddress = message.depositAddress;
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BurnCommand>, I>>(base?: I): BurnCommand {
    return BurnCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BurnCommand>, I>>(
    object: I,
  ): BurnCommand {
    const message = createBaseBurnCommand();
    message.chain = object.chain ?? "";
    message.commandId = object.commandId ?? new Uint8Array(0);
    message.destinationChain = object.destinationChain ?? "";
    message.depositAddress = object.depositAddress ?? "";
    message.asset = object.asset ?? "";
    return message;
  },
};

function createBaseCommandBatchSigned(): CommandBatchSigned {
  return { chain: "", commandBatchId: new Uint8Array(0) };
}

export const CommandBatchSigned = {
  encode(
    message: CommandBatchSigned,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.commandBatchId.length !== 0) {
      writer.uint32(26).bytes(message.commandBatchId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommandBatchSigned {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandBatchSigned();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandBatchId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandBatchSigned {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandBatchId: isSet(object.commandBatchId)
        ? bytesFromBase64(object.commandBatchId)
        : new Uint8Array(0),
    };
  },

  toJSON(message: CommandBatchSigned): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandBatchId.length !== 0) {
      obj.commandBatchId = base64FromBytes(message.commandBatchId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandBatchSigned>, I>>(
    base?: I,
  ): CommandBatchSigned {
    return CommandBatchSigned.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandBatchSigned>, I>>(
    object: I,
  ): CommandBatchSigned {
    const message = createBaseCommandBatchSigned();
    message.chain = object.chain ?? "";
    message.commandBatchId = object.commandBatchId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseCommandBatchAborted(): CommandBatchAborted {
  return { chain: "", commandBatchId: new Uint8Array(0) };
}

export const CommandBatchAborted = {
  encode(
    message: CommandBatchAborted,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(18).string(message.chain);
    }
    if (message.commandBatchId.length !== 0) {
      writer.uint32(26).bytes(message.commandBatchId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommandBatchAborted {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandBatchAborted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chain = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.commandBatchId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandBatchAborted {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
      commandBatchId: isSet(object.commandBatchId)
        ? bytesFromBase64(object.commandBatchId)
        : new Uint8Array(0),
    };
  },

  toJSON(message: CommandBatchAborted): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    if (message.commandBatchId.length !== 0) {
      obj.commandBatchId = base64FromBytes(message.commandBatchId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandBatchAborted>, I>>(
    base?: I,
  ): CommandBatchAborted {
    return CommandBatchAborted.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandBatchAborted>, I>>(
    object: I,
  ): CommandBatchAborted {
    const message = createBaseCommandBatchAborted();
    message.chain = object.chain ?? "";
    message.commandBatchId = object.commandBatchId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseChainAdded(): ChainAdded {
  return { chain: "" };
}

export const ChainAdded = {
  encode(
    message: ChainAdded,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.chain !== "") {
      writer.uint32(10).string(message.chain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChainAdded {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChainAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChainAdded {
    return {
      chain: isSet(object.chain) ? globalThis.String(object.chain) : "",
    };
  },

  toJSON(message: ChainAdded): unknown {
    const obj: any = {};
    if (message.chain !== "") {
      obj.chain = message.chain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChainAdded>, I>>(base?: I): ChainAdded {
    return ChainAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChainAdded>, I>>(
    object: I,
  ): ChainAdded {
    const message = createBaseChainAdded();
    message.chain = object.chain ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
