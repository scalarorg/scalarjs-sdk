// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/chains/v1beta1/redeem.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  Phase,
  phaseFromJSON,
  phaseToJSON,
} from "../../covenant/exported/v1beta1/types";

export const protobufPackage = "scalar.chains.v1beta1";

export interface RedeemSession {
  custodianGroupUid: Uint8Array;
  sequence: Long;
  currentPhase: Phase;
}

function createBaseRedeemSession(): RedeemSession {
  return {
    custodianGroupUid: new Uint8Array(0),
    sequence: Long.UZERO,
    currentPhase: 0,
  };
}

export const RedeemSession = {
  encode(
    message: RedeemSession,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.custodianGroupUid.length !== 0) {
      writer.uint32(10).bytes(message.custodianGroupUid);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.sequence);
    }
    if (message.currentPhase !== 0) {
      writer.uint32(24).int32(message.currentPhase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedeemSession {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedeemSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.custodianGroupUid = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequence = reader.uint64() as Long;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.currentPhase = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedeemSession {
    return {
      custodianGroupUid: isSet(object.custodianGroupUid)
        ? bytesFromBase64(object.custodianGroupUid)
        : new Uint8Array(0),
      sequence: isSet(object.sequence)
        ? Long.fromValue(object.sequence)
        : Long.UZERO,
      currentPhase: isSet(object.currentPhase)
        ? phaseFromJSON(object.currentPhase)
        : 0,
    };
  },

  toJSON(message: RedeemSession): unknown {
    const obj: any = {};
    if (message.custodianGroupUid.length !== 0) {
      obj.custodianGroupUid = base64FromBytes(message.custodianGroupUid);
    }
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.currentPhase !== 0) {
      obj.currentPhase = phaseToJSON(message.currentPhase);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedeemSession>, I>>(
    base?: I,
  ): RedeemSession {
    return RedeemSession.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedeemSession>, I>>(
    object: I,
  ): RedeemSession {
    const message = createBaseRedeemSession();
    message.custodianGroupUid = object.custodianGroupUid ?? new Uint8Array(0);
    message.sequence =
      object.sequence !== undefined && object.sequence !== null
        ? Long.fromValue(object.sequence)
        : Long.UZERO;
    message.currentPhase = object.currentPhase ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
