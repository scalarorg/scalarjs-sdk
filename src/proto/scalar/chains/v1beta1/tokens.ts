// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: scalar/chains/v1beta1/tokens.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Status, statusFromJSON, statusToJSON, TokenDetails } from "./types";

export const protobufPackage = "scalar.chains.v1beta1";

export interface ERC20TokenMetadata {
  asset: string;
  chainId: Uint8Array;
  details?: TokenDetails | undefined;
  tokenAddress: string;
  txHash: string;
  status: Status;
  isExternal: boolean;
  burnerCode: Uint8Array;
}

/** ERC20Deposit contains information for an ERC20 deposit */
export interface ERC20Deposit {
  txId: Uint8Array;
  amount: Uint8Array;
  asset: string;
  destinationChain: string;
  burnerAddress: Uint8Array;
  logIndex: Long;
}

function createBaseERC20TokenMetadata(): ERC20TokenMetadata {
  return {
    asset: "",
    chainId: new Uint8Array(0),
    details: undefined,
    tokenAddress: "",
    txHash: "",
    status: 0,
    isExternal: false,
    burnerCode: new Uint8Array(0),
  };
}

export const ERC20TokenMetadata = {
  encode(
    message: ERC20TokenMetadata,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.asset !== "") {
      writer.uint32(10).string(message.asset);
    }
    if (message.chainId.length !== 0) {
      writer.uint32(18).bytes(message.chainId);
    }
    if (message.details !== undefined) {
      TokenDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    if (message.tokenAddress !== "") {
      writer.uint32(34).string(message.tokenAddress);
    }
    if (message.txHash !== "") {
      writer.uint32(42).string(message.txHash);
    }
    if (message.status !== 0) {
      writer.uint32(56).int32(message.status);
    }
    if (message.isExternal !== false) {
      writer.uint32(64).bool(message.isExternal);
    }
    if (message.burnerCode.length !== 0) {
      writer.uint32(74).bytes(message.burnerCode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ERC20TokenMetadata {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseERC20TokenMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = TokenDetails.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tokenAddress = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.txHash = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isExternal = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.burnerCode = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ERC20TokenMetadata {
    return {
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      chainId: isSet(object.chainId)
        ? bytesFromBase64(object.chainId)
        : new Uint8Array(0),
      details: isSet(object.details)
        ? TokenDetails.fromJSON(object.details)
        : undefined,
      tokenAddress: isSet(object.tokenAddress)
        ? globalThis.String(object.tokenAddress)
        : "",
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      status: isSet(object.status) ? statusFromJSON(object.status) : 0,
      isExternal: isSet(object.isExternal)
        ? globalThis.Boolean(object.isExternal)
        : false,
      burnerCode: isSet(object.burnerCode)
        ? bytesFromBase64(object.burnerCode)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ERC20TokenMetadata): unknown {
    const obj: any = {};
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.chainId.length !== 0) {
      obj.chainId = base64FromBytes(message.chainId);
    }
    if (message.details !== undefined) {
      obj.details = TokenDetails.toJSON(message.details);
    }
    if (message.tokenAddress !== "") {
      obj.tokenAddress = message.tokenAddress;
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.status !== 0) {
      obj.status = statusToJSON(message.status);
    }
    if (message.isExternal !== false) {
      obj.isExternal = message.isExternal;
    }
    if (message.burnerCode.length !== 0) {
      obj.burnerCode = base64FromBytes(message.burnerCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ERC20TokenMetadata>, I>>(
    base?: I,
  ): ERC20TokenMetadata {
    return ERC20TokenMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ERC20TokenMetadata>, I>>(
    object: I,
  ): ERC20TokenMetadata {
    const message = createBaseERC20TokenMetadata();
    message.asset = object.asset ?? "";
    message.chainId = object.chainId ?? new Uint8Array(0);
    message.details =
      object.details !== undefined && object.details !== null
        ? TokenDetails.fromPartial(object.details)
        : undefined;
    message.tokenAddress = object.tokenAddress ?? "";
    message.txHash = object.txHash ?? "";
    message.status = object.status ?? 0;
    message.isExternal = object.isExternal ?? false;
    message.burnerCode = object.burnerCode ?? new Uint8Array(0);
    return message;
  },
};

function createBaseERC20Deposit(): ERC20Deposit {
  return {
    txId: new Uint8Array(0),
    amount: new Uint8Array(0),
    asset: "",
    destinationChain: "",
    burnerAddress: new Uint8Array(0),
    logIndex: Long.UZERO,
  };
}

export const ERC20Deposit = {
  encode(
    message: ERC20Deposit,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.txId.length !== 0) {
      writer.uint32(10).bytes(message.txId);
    }
    if (message.amount.length !== 0) {
      writer.uint32(18).bytes(message.amount);
    }
    if (message.asset !== "") {
      writer.uint32(26).string(message.asset);
    }
    if (message.destinationChain !== "") {
      writer.uint32(34).string(message.destinationChain);
    }
    if (message.burnerAddress.length !== 0) {
      writer.uint32(42).bytes(message.burnerAddress);
    }
    if (!message.logIndex.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.logIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ERC20Deposit {
    const reader =
      input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseERC20Deposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.asset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.burnerAddress = reader.bytes();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.logIndex = reader.uint64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ERC20Deposit {
    return {
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      amount: isSet(object.amount)
        ? bytesFromBase64(object.amount)
        : new Uint8Array(0),
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
      destinationChain: isSet(object.destinationChain)
        ? globalThis.String(object.destinationChain)
        : "",
      burnerAddress: isSet(object.burnerAddress)
        ? bytesFromBase64(object.burnerAddress)
        : new Uint8Array(0),
      logIndex: isSet(object.logIndex)
        ? Long.fromValue(object.logIndex)
        : Long.UZERO,
    };
  },

  toJSON(message: ERC20Deposit): unknown {
    const obj: any = {};
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.amount.length !== 0) {
      obj.amount = base64FromBytes(message.amount);
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.burnerAddress.length !== 0) {
      obj.burnerAddress = base64FromBytes(message.burnerAddress);
    }
    if (!message.logIndex.equals(Long.UZERO)) {
      obj.logIndex = (message.logIndex || Long.UZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ERC20Deposit>, I>>(
    base?: I,
  ): ERC20Deposit {
    return ERC20Deposit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ERC20Deposit>, I>>(
    object: I,
  ): ERC20Deposit {
    const message = createBaseERC20Deposit();
    message.txId = object.txId ?? new Uint8Array(0);
    message.amount = object.amount ?? new Uint8Array(0);
    message.asset = object.asset ?? "";
    message.destinationChain = object.destinationChain ?? "";
    message.burnerAddress = object.burnerAddress ?? new Uint8Array(0);
    message.logIndex =
      object.logIndex !== undefined && object.logIndex !== null
        ? Long.fromValue(object.logIndex)
        : Long.UZERO;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in keyof T]?: DeepPartial<T[K]> }
          : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
