// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "tendermint/abci/types.proto" (package "tendermint.abci", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PublicKey } from "../crypto/keys";
import { VersionParams } from "../types/params";
import { ValidatorParams } from "../types/params";
import { EvidenceParams } from "../types/params";
import { ProofOps } from "../crypto/proof";
import { Header } from "../types/types";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * @generated from protobuf message tendermint.abci.Request
 */
export interface Request {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "echo";
        /**
         * @generated from protobuf field: tendermint.abci.RequestEcho echo = 1;
         */
        echo: RequestEcho;
    } | {
        oneofKind: "flush";
        /**
         * @generated from protobuf field: tendermint.abci.RequestFlush flush = 2;
         */
        flush: RequestFlush;
    } | {
        oneofKind: "info";
        /**
         * @generated from protobuf field: tendermint.abci.RequestInfo info = 3;
         */
        info: RequestInfo;
    } | {
        oneofKind: "setOption";
        /**
         * @generated from protobuf field: tendermint.abci.RequestSetOption set_option = 4;
         */
        setOption: RequestSetOption;
    } | {
        oneofKind: "initChain";
        /**
         * @generated from protobuf field: tendermint.abci.RequestInitChain init_chain = 5;
         */
        initChain: RequestInitChain;
    } | {
        oneofKind: "query";
        /**
         * @generated from protobuf field: tendermint.abci.RequestQuery query = 6;
         */
        query: RequestQuery;
    } | {
        oneofKind: "beginBlock";
        /**
         * @generated from protobuf field: tendermint.abci.RequestBeginBlock begin_block = 7;
         */
        beginBlock: RequestBeginBlock;
    } | {
        oneofKind: "checkTx";
        /**
         * @generated from protobuf field: tendermint.abci.RequestCheckTx check_tx = 8;
         */
        checkTx: RequestCheckTx;
    } | {
        oneofKind: "deliverTx";
        /**
         * @generated from protobuf field: tendermint.abci.RequestDeliverTx deliver_tx = 9;
         */
        deliverTx: RequestDeliverTx;
    } | {
        oneofKind: "endBlock";
        /**
         * @generated from protobuf field: tendermint.abci.RequestEndBlock end_block = 10;
         */
        endBlock: RequestEndBlock;
    } | {
        oneofKind: "commit";
        /**
         * @generated from protobuf field: tendermint.abci.RequestCommit commit = 11;
         */
        commit: RequestCommit;
    } | {
        oneofKind: "listSnapshots";
        /**
         * @generated from protobuf field: tendermint.abci.RequestListSnapshots list_snapshots = 12;
         */
        listSnapshots: RequestListSnapshots;
    } | {
        oneofKind: "offerSnapshot";
        /**
         * @generated from protobuf field: tendermint.abci.RequestOfferSnapshot offer_snapshot = 13;
         */
        offerSnapshot: RequestOfferSnapshot;
    } | {
        oneofKind: "loadSnapshotChunk";
        /**
         * @generated from protobuf field: tendermint.abci.RequestLoadSnapshotChunk load_snapshot_chunk = 14;
         */
        loadSnapshotChunk: RequestLoadSnapshotChunk;
    } | {
        oneofKind: "applySnapshotChunk";
        /**
         * @generated from protobuf field: tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
         */
        applySnapshotChunk: RequestApplySnapshotChunk;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tendermint.abci.RequestEcho
 */
export interface RequestEcho {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message tendermint.abci.RequestFlush
 */
export interface RequestFlush {
}
/**
 * @generated from protobuf message tendermint.abci.RequestInfo
 */
export interface RequestInfo {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: uint64 block_version = 2;
     */
    blockVersion: string;
    /**
     * @generated from protobuf field: uint64 p2p_version = 3 [json_name = "p2pVersion"];
     */
    p2PVersion: string;
}
/**
 * nondeterministic
 *
 * @generated from protobuf message tendermint.abci.RequestSetOption
 */
export interface RequestSetOption {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message tendermint.abci.RequestInitChain
 */
export interface RequestInitChain {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 1;
     */
    time?: Timestamp;
    /**
     * @generated from protobuf field: string chain_id = 2;
     */
    chainId: string;
    /**
     * @generated from protobuf field: tendermint.abci.ConsensusParams consensus_params = 3;
     */
    consensusParams?: ConsensusParams;
    /**
     * @generated from protobuf field: repeated tendermint.abci.ValidatorUpdate validators = 4;
     */
    validators: ValidatorUpdate[];
    /**
     * @generated from protobuf field: bytes app_state_bytes = 5;
     */
    appStateBytes: Uint8Array;
    /**
     * @generated from protobuf field: int64 initial_height = 6;
     */
    initialHeight: string;
}
/**
 * @generated from protobuf message tendermint.abci.RequestQuery
 */
export interface RequestQuery {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
    /**
     * @generated from protobuf field: int64 height = 3;
     */
    height: string;
    /**
     * @generated from protobuf field: bool prove = 4;
     */
    prove: boolean;
}
/**
 * @generated from protobuf message tendermint.abci.RequestBeginBlock
 */
export interface RequestBeginBlock {
    /**
     * @generated from protobuf field: bytes hash = 1;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.types.Header header = 2;
     */
    header?: Header;
    /**
     * @generated from protobuf field: tendermint.abci.LastCommitInfo last_commit_info = 3;
     */
    lastCommitInfo?: LastCommitInfo;
    /**
     * @generated from protobuf field: repeated tendermint.abci.Evidence byzantine_validators = 4;
     */
    byzantineValidators: Evidence[];
}
/**
 * @generated from protobuf message tendermint.abci.RequestCheckTx
 */
export interface RequestCheckTx {
    /**
     * @generated from protobuf field: bytes tx = 1;
     */
    tx: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.abci.CheckTxType type = 2;
     */
    type: CheckTxType;
}
/**
 * @generated from protobuf message tendermint.abci.RequestDeliverTx
 */
export interface RequestDeliverTx {
    /**
     * @generated from protobuf field: bytes tx = 1;
     */
    tx: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.abci.RequestEndBlock
 */
export interface RequestEndBlock {
    /**
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
}
/**
 * @generated from protobuf message tendermint.abci.RequestCommit
 */
export interface RequestCommit {
}
/**
 * lists available snapshots
 *
 * @generated from protobuf message tendermint.abci.RequestListSnapshots
 */
export interface RequestListSnapshots {
}
/**
 * offers a snapshot to the application
 *
 * @generated from protobuf message tendermint.abci.RequestOfferSnapshot
 */
export interface RequestOfferSnapshot {
    /**
     * @generated from protobuf field: tendermint.abci.Snapshot snapshot = 1;
     */
    snapshot?: Snapshot;
    /**
     * @generated from protobuf field: bytes app_hash = 2;
     */
    appHash: Uint8Array;
}
/**
 * loads a snapshot chunk
 *
 * @generated from protobuf message tendermint.abci.RequestLoadSnapshotChunk
 */
export interface RequestLoadSnapshotChunk {
    /**
     * @generated from protobuf field: uint64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: uint32 format = 2;
     */
    format: number;
    /**
     * @generated from protobuf field: uint32 chunk = 3;
     */
    chunk: number;
}
/**
 * Applies a snapshot chunk
 *
 * @generated from protobuf message tendermint.abci.RequestApplySnapshotChunk
 */
export interface RequestApplySnapshotChunk {
    /**
     * @generated from protobuf field: uint32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: bytes chunk = 2;
     */
    chunk: Uint8Array;
    /**
     * @generated from protobuf field: string sender = 3;
     */
    sender: string;
}
/**
 * @generated from protobuf message tendermint.abci.Response
 */
export interface Response {
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "exception";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseException exception = 1;
         */
        exception: ResponseException;
    } | {
        oneofKind: "echo";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseEcho echo = 2;
         */
        echo: ResponseEcho;
    } | {
        oneofKind: "flush";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseFlush flush = 3;
         */
        flush: ResponseFlush;
    } | {
        oneofKind: "info";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseInfo info = 4;
         */
        info: ResponseInfo;
    } | {
        oneofKind: "setOption";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseSetOption set_option = 5;
         */
        setOption: ResponseSetOption;
    } | {
        oneofKind: "initChain";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseInitChain init_chain = 6;
         */
        initChain: ResponseInitChain;
    } | {
        oneofKind: "query";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseQuery query = 7;
         */
        query: ResponseQuery;
    } | {
        oneofKind: "beginBlock";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseBeginBlock begin_block = 8;
         */
        beginBlock: ResponseBeginBlock;
    } | {
        oneofKind: "checkTx";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseCheckTx check_tx = 9;
         */
        checkTx: ResponseCheckTx;
    } | {
        oneofKind: "deliverTx";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseDeliverTx deliver_tx = 10;
         */
        deliverTx: ResponseDeliverTx;
    } | {
        oneofKind: "endBlock";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseEndBlock end_block = 11;
         */
        endBlock: ResponseEndBlock;
    } | {
        oneofKind: "commit";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseCommit commit = 12;
         */
        commit: ResponseCommit;
    } | {
        oneofKind: "listSnapshots";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseListSnapshots list_snapshots = 13;
         */
        listSnapshots: ResponseListSnapshots;
    } | {
        oneofKind: "offerSnapshot";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseOfferSnapshot offer_snapshot = 14;
         */
        offerSnapshot: ResponseOfferSnapshot;
    } | {
        oneofKind: "loadSnapshotChunk";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseLoadSnapshotChunk load_snapshot_chunk = 15;
         */
        loadSnapshotChunk: ResponseLoadSnapshotChunk;
    } | {
        oneofKind: "applySnapshotChunk";
        /**
         * @generated from protobuf field: tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
         */
        applySnapshotChunk: ResponseApplySnapshotChunk;
    } | {
        oneofKind: undefined;
    };
}
/**
 * nondeterministic
 *
 * @generated from protobuf message tendermint.abci.ResponseException
 */
export interface ResponseException {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseEcho
 */
export interface ResponseEcho {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseFlush
 */
export interface ResponseFlush {
}
/**
 * @generated from protobuf message tendermint.abci.ResponseInfo
 */
export interface ResponseInfo {
    /**
     * @generated from protobuf field: string data = 1;
     */
    data: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
    /**
     * @generated from protobuf field: uint64 app_version = 3;
     */
    appVersion: string;
    /**
     * @generated from protobuf field: int64 last_block_height = 4;
     */
    lastBlockHeight: string;
    /**
     * @generated from protobuf field: bytes last_block_app_hash = 5;
     */
    lastBlockAppHash: Uint8Array;
}
/**
 * nondeterministic
 *
 * @generated from protobuf message tendermint.abci.ResponseSetOption
 */
export interface ResponseSetOption {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * bytes data = 2;
     *
     * @generated from protobuf field: string log = 3;
     */
    log: string;
    /**
     * @generated from protobuf field: string info = 4;
     */
    info: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseInitChain
 */
export interface ResponseInitChain {
    /**
     * @generated from protobuf field: tendermint.abci.ConsensusParams consensus_params = 1;
     */
    consensusParams?: ConsensusParams;
    /**
     * @generated from protobuf field: repeated tendermint.abci.ValidatorUpdate validators = 2;
     */
    validators: ValidatorUpdate[];
    /**
     * @generated from protobuf field: bytes app_hash = 3;
     */
    appHash: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseQuery
 */
export interface ResponseQuery {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * bytes data = 2; // use "value" instead.
     *
     * @generated from protobuf field: string log = 3;
     */
    log: string;
    /**
     * @generated from protobuf field: string info = 4;
     */
    info: string;
    /**
     * @generated from protobuf field: int64 index = 5;
     */
    index: string;
    /**
     * @generated from protobuf field: bytes key = 6;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 7;
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.crypto.ProofOps proof_ops = 8;
     */
    proofOps?: ProofOps;
    /**
     * @generated from protobuf field: int64 height = 9;
     */
    height: string;
    /**
     * @generated from protobuf field: string codespace = 10;
     */
    codespace: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseBeginBlock
 */
export interface ResponseBeginBlock {
    /**
     * @generated from protobuf field: repeated tendermint.abci.Event events = 1;
     */
    events: Event[];
}
/**
 * @generated from protobuf message tendermint.abci.ResponseCheckTx
 */
export interface ResponseCheckTx {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string log = 3;
     */
    log: string;
    /**
     * @generated from protobuf field: string info = 4;
     */
    info: string;
    /**
     * @generated from protobuf field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
     */
    gasWanted: string;
    /**
     * @generated from protobuf field: int64 gas_used = 6 [json_name = "gas_used"];
     */
    gasUsed: string;
    /**
     * @generated from protobuf field: repeated tendermint.abci.Event events = 7;
     */
    events: Event[];
    /**
     * @generated from protobuf field: string codespace = 8;
     */
    codespace: string;
    /**
     * @generated from protobuf field: string sender = 9;
     */
    sender: string;
    /**
     * @generated from protobuf field: int64 priority = 10;
     */
    priority: string;
    /**
     * mempool_error is set by CometBFT.
     * ABCI applictions creating a ResponseCheckTX should not set mempool_error.
     *
     * @generated from protobuf field: string mempool_error = 11;
     */
    mempoolError: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseDeliverTx
 */
export interface ResponseDeliverTx {
    /**
     * @generated from protobuf field: uint32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string log = 3;
     */
    log: string;
    /**
     * @generated from protobuf field: string info = 4;
     */
    info: string;
    /**
     * @generated from protobuf field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
     */
    gasWanted: string;
    /**
     * @generated from protobuf field: int64 gas_used = 6 [json_name = "gas_used"];
     */
    gasUsed: string;
    /**
     * @generated from protobuf field: repeated tendermint.abci.Event events = 7;
     */
    events: Event[];
    /**
     * @generated from protobuf field: string codespace = 8;
     */
    codespace: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseEndBlock
 */
export interface ResponseEndBlock {
    /**
     * @generated from protobuf field: repeated tendermint.abci.ValidatorUpdate validator_updates = 1;
     */
    validatorUpdates: ValidatorUpdate[];
    /**
     * @generated from protobuf field: tendermint.abci.ConsensusParams consensus_param_updates = 2;
     */
    consensusParamUpdates?: ConsensusParams;
    /**
     * @generated from protobuf field: repeated tendermint.abci.Event events = 3;
     */
    events: Event[];
}
/**
 * @generated from protobuf message tendermint.abci.ResponseCommit
 */
export interface ResponseCommit {
    /**
     * reserve 1
     *
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int64 retain_height = 3;
     */
    retainHeight: string;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseListSnapshots
 */
export interface ResponseListSnapshots {
    /**
     * @generated from protobuf field: repeated tendermint.abci.Snapshot snapshots = 1;
     */
    snapshots: Snapshot[];
}
/**
 * @generated from protobuf message tendermint.abci.ResponseOfferSnapshot
 */
export interface ResponseOfferSnapshot {
    /**
     * @generated from protobuf field: tendermint.abci.ResponseOfferSnapshot.Result result = 1;
     */
    result: ResponseOfferSnapshot_Result;
}
/**
 * @generated from protobuf enum tendermint.abci.ResponseOfferSnapshot.Result
 */
export declare enum ResponseOfferSnapshot_Result {
    /**
     * Unknown result, abort all snapshot restoration
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Snapshot accepted, apply chunks
     *
     * @generated from protobuf enum value: ACCEPT = 1;
     */
    ACCEPT = 1,
    /**
     * Abort all snapshot restoration
     *
     * @generated from protobuf enum value: ABORT = 2;
     */
    ABORT = 2,
    /**
     * Reject this specific snapshot, try others
     *
     * @generated from protobuf enum value: REJECT = 3;
     */
    REJECT = 3,
    /**
     * Reject all snapshots of this format, try others
     *
     * @generated from protobuf enum value: REJECT_FORMAT = 4;
     */
    REJECT_FORMAT = 4,
    /**
     * Reject all snapshots from the sender(s), try others
     *
     * @generated from protobuf enum value: REJECT_SENDER = 5;
     */
    REJECT_SENDER = 5
}
/**
 * @generated from protobuf message tendermint.abci.ResponseLoadSnapshotChunk
 */
export interface ResponseLoadSnapshotChunk {
    /**
     * @generated from protobuf field: bytes chunk = 1;
     */
    chunk: Uint8Array;
}
/**
 * @generated from protobuf message tendermint.abci.ResponseApplySnapshotChunk
 */
export interface ResponseApplySnapshotChunk {
    /**
     * @generated from protobuf field: tendermint.abci.ResponseApplySnapshotChunk.Result result = 1;
     */
    result: ResponseApplySnapshotChunk_Result;
    /**
     * @generated from protobuf field: repeated uint32 refetch_chunks = 2;
     */
    refetchChunks: number[];
    /**
     * @generated from protobuf field: repeated string reject_senders = 3;
     */
    rejectSenders: string[];
}
/**
 * @generated from protobuf enum tendermint.abci.ResponseApplySnapshotChunk.Result
 */
export declare enum ResponseApplySnapshotChunk_Result {
    /**
     * Unknown result, abort all snapshot restoration
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * Chunk successfully accepted
     *
     * @generated from protobuf enum value: ACCEPT = 1;
     */
    ACCEPT = 1,
    /**
     * Abort all snapshot restoration
     *
     * @generated from protobuf enum value: ABORT = 2;
     */
    ABORT = 2,
    /**
     * Retry chunk (combine with refetch and reject)
     *
     * @generated from protobuf enum value: RETRY = 3;
     */
    RETRY = 3,
    /**
     * Retry snapshot (combine with refetch and reject)
     *
     * @generated from protobuf enum value: RETRY_SNAPSHOT = 4;
     */
    RETRY_SNAPSHOT = 4,
    /**
     * Reject this snapshot, try others
     *
     * @generated from protobuf enum value: REJECT_SNAPSHOT = 5;
     */
    REJECT_SNAPSHOT = 5
}
/**
 * ConsensusParams contains all consensus-relevant parameters
 * that can be adjusted by the abci app
 *
 * @generated from protobuf message tendermint.abci.ConsensusParams
 */
export interface ConsensusParams {
    /**
     * @generated from protobuf field: tendermint.abci.BlockParams block = 1;
     */
    block?: BlockParams;
    /**
     * @generated from protobuf field: tendermint.types.EvidenceParams evidence = 2;
     */
    evidence?: EvidenceParams;
    /**
     * @generated from protobuf field: tendermint.types.ValidatorParams validator = 3;
     */
    validator?: ValidatorParams;
    /**
     * @generated from protobuf field: tendermint.types.VersionParams version = 4;
     */
    version?: VersionParams;
}
/**
 * BlockParams contains limits on the block size.
 *
 * @generated from protobuf message tendermint.abci.BlockParams
 */
export interface BlockParams {
    /**
     * Note: must be greater than 0
     *
     * @generated from protobuf field: int64 max_bytes = 1;
     */
    maxBytes: string;
    /**
     * Note: must be greater or equal to -1
     *
     * @generated from protobuf field: int64 max_gas = 2;
     */
    maxGas: string;
}
/**
 * @generated from protobuf message tendermint.abci.LastCommitInfo
 */
export interface LastCommitInfo {
    /**
     * @generated from protobuf field: int32 round = 1;
     */
    round: number;
    /**
     * @generated from protobuf field: repeated tendermint.abci.VoteInfo votes = 2;
     */
    votes: VoteInfo[];
}
/**
 * Event allows application developers to attach additional information to
 * ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 *
 * @generated from protobuf message tendermint.abci.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated tendermint.abci.EventAttribute attributes = 2;
     */
    attributes: EventAttribute[];
}
/**
 * EventAttribute is a single key-value pair, associated with an event.
 *
 * @generated from protobuf message tendermint.abci.EventAttribute
 */
export interface EventAttribute {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: bool index = 3;
     */
    index: boolean;
}
/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 *
 * @generated from protobuf message tendermint.abci.TxResult
 */
export interface TxResult {
    /**
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: uint32 index = 2;
     */
    index: number;
    /**
     * @generated from protobuf field: bytes tx = 3;
     */
    tx: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.abci.ResponseDeliverTx result = 4;
     */
    result?: ResponseDeliverTx;
}
/**
 * Validator
 *
 * @generated from protobuf message tendermint.abci.Validator
 */
export interface Validator {
    /**
     * @generated from protobuf field: bytes address = 1;
     */
    address: Uint8Array;
    /**
     * PubKey pub_key = 2 [(gogoproto.nullable)=false];
     *
     * @generated from protobuf field: int64 power = 3;
     */
    power: string;
}
/**
 * ValidatorUpdate
 *
 * @generated from protobuf message tendermint.abci.ValidatorUpdate
 */
export interface ValidatorUpdate {
    /**
     * @generated from protobuf field: tendermint.crypto.PublicKey pub_key = 1;
     */
    pubKey?: PublicKey;
    /**
     * @generated from protobuf field: int64 power = 2;
     */
    power: string;
}
/**
 * VoteInfo
 *
 * @generated from protobuf message tendermint.abci.VoteInfo
 */
export interface VoteInfo {
    /**
     * @generated from protobuf field: tendermint.abci.Validator validator = 1;
     */
    validator?: Validator;
    /**
     * @generated from protobuf field: bool signed_last_block = 2;
     */
    signedLastBlock: boolean;
}
/**
 * @generated from protobuf message tendermint.abci.Evidence
 */
export interface Evidence {
    /**
     * @generated from protobuf field: tendermint.abci.EvidenceType type = 1;
     */
    type: EvidenceType;
    /**
     * The offending validator
     *
     * @generated from protobuf field: tendermint.abci.Validator validator = 2;
     */
    validator?: Validator;
    /**
     * The height when the offense occurred
     *
     * @generated from protobuf field: int64 height = 3;
     */
    height: string;
    /**
     * The corresponding time where the offense occurred
     *
     * @generated from protobuf field: google.protobuf.Timestamp time = 4;
     */
    time?: Timestamp;
    /**
     * Total voting power of the validator set in case the ABCI application does
     * not store historical validators.
     * https://github.com/tendermint/tendermint/issues/4581
     *
     * @generated from protobuf field: int64 total_voting_power = 5;
     */
    totalVotingPower: string;
}
/**
 * @generated from protobuf message tendermint.abci.Snapshot
 */
export interface Snapshot {
    /**
     * @generated from protobuf field: uint64 height = 1;
     */
    height: string;
    /**
     * @generated from protobuf field: uint32 format = 2;
     */
    format: number;
    /**
     * @generated from protobuf field: uint32 chunks = 3;
     */
    chunks: number;
    /**
     * @generated from protobuf field: bytes hash = 4;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: bytes metadata = 5;
     */
    metadata: Uint8Array;
}
/**
 * @generated from protobuf enum tendermint.abci.CheckTxType
 */
export declare enum CheckTxType {
    /**
     * @generated from protobuf enum value: NEW = 0;
     */
    NEW = 0,
    /**
     * @generated from protobuf enum value: RECHECK = 1;
     */
    RECHECK = 1
}
/**
 * @generated from protobuf enum tendermint.abci.EvidenceType
 */
export declare enum EvidenceType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: DUPLICATE_VOTE = 1;
     */
    DUPLICATE_VOTE = 1,
    /**
     * @generated from protobuf enum value: LIGHT_CLIENT_ATTACK = 2;
     */
    LIGHT_CLIENT_ATTACK = 2
}
declare class Request$Type extends MessageType<Request> {
    constructor();
    create(value?: PartialMessage<Request>): Request;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request;
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Request
 */
export declare const Request: Request$Type;
declare class RequestEcho$Type extends MessageType<RequestEcho> {
    constructor();
    create(value?: PartialMessage<RequestEcho>): RequestEcho;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestEcho): RequestEcho;
    internalBinaryWrite(message: RequestEcho, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestEcho
 */
export declare const RequestEcho: RequestEcho$Type;
declare class RequestFlush$Type extends MessageType<RequestFlush> {
    constructor();
    create(value?: PartialMessage<RequestFlush>): RequestFlush;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestFlush): RequestFlush;
    internalBinaryWrite(message: RequestFlush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestFlush
 */
export declare const RequestFlush: RequestFlush$Type;
declare class RequestInfo$Type extends MessageType<RequestInfo> {
    constructor();
    create(value?: PartialMessage<RequestInfo>): RequestInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestInfo): RequestInfo;
    internalBinaryWrite(message: RequestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestInfo
 */
export declare const RequestInfo: RequestInfo$Type;
declare class RequestSetOption$Type extends MessageType<RequestSetOption> {
    constructor();
    create(value?: PartialMessage<RequestSetOption>): RequestSetOption;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestSetOption): RequestSetOption;
    internalBinaryWrite(message: RequestSetOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestSetOption
 */
export declare const RequestSetOption: RequestSetOption$Type;
declare class RequestInitChain$Type extends MessageType<RequestInitChain> {
    constructor();
    create(value?: PartialMessage<RequestInitChain>): RequestInitChain;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestInitChain): RequestInitChain;
    internalBinaryWrite(message: RequestInitChain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestInitChain
 */
export declare const RequestInitChain: RequestInitChain$Type;
declare class RequestQuery$Type extends MessageType<RequestQuery> {
    constructor();
    create(value?: PartialMessage<RequestQuery>): RequestQuery;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestQuery): RequestQuery;
    internalBinaryWrite(message: RequestQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestQuery
 */
export declare const RequestQuery: RequestQuery$Type;
declare class RequestBeginBlock$Type extends MessageType<RequestBeginBlock> {
    constructor();
    create(value?: PartialMessage<RequestBeginBlock>): RequestBeginBlock;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestBeginBlock): RequestBeginBlock;
    internalBinaryWrite(message: RequestBeginBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestBeginBlock
 */
export declare const RequestBeginBlock: RequestBeginBlock$Type;
declare class RequestCheckTx$Type extends MessageType<RequestCheckTx> {
    constructor();
    create(value?: PartialMessage<RequestCheckTx>): RequestCheckTx;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCheckTx): RequestCheckTx;
    internalBinaryWrite(message: RequestCheckTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestCheckTx
 */
export declare const RequestCheckTx: RequestCheckTx$Type;
declare class RequestDeliverTx$Type extends MessageType<RequestDeliverTx> {
    constructor();
    create(value?: PartialMessage<RequestDeliverTx>): RequestDeliverTx;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestDeliverTx): RequestDeliverTx;
    internalBinaryWrite(message: RequestDeliverTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestDeliverTx
 */
export declare const RequestDeliverTx: RequestDeliverTx$Type;
declare class RequestEndBlock$Type extends MessageType<RequestEndBlock> {
    constructor();
    create(value?: PartialMessage<RequestEndBlock>): RequestEndBlock;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestEndBlock): RequestEndBlock;
    internalBinaryWrite(message: RequestEndBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestEndBlock
 */
export declare const RequestEndBlock: RequestEndBlock$Type;
declare class RequestCommit$Type extends MessageType<RequestCommit> {
    constructor();
    create(value?: PartialMessage<RequestCommit>): RequestCommit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCommit): RequestCommit;
    internalBinaryWrite(message: RequestCommit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestCommit
 */
export declare const RequestCommit: RequestCommit$Type;
declare class RequestListSnapshots$Type extends MessageType<RequestListSnapshots> {
    constructor();
    create(value?: PartialMessage<RequestListSnapshots>): RequestListSnapshots;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestListSnapshots): RequestListSnapshots;
    internalBinaryWrite(message: RequestListSnapshots, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestListSnapshots
 */
export declare const RequestListSnapshots: RequestListSnapshots$Type;
declare class RequestOfferSnapshot$Type extends MessageType<RequestOfferSnapshot> {
    constructor();
    create(value?: PartialMessage<RequestOfferSnapshot>): RequestOfferSnapshot;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestOfferSnapshot): RequestOfferSnapshot;
    internalBinaryWrite(message: RequestOfferSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestOfferSnapshot
 */
export declare const RequestOfferSnapshot: RequestOfferSnapshot$Type;
declare class RequestLoadSnapshotChunk$Type extends MessageType<RequestLoadSnapshotChunk> {
    constructor();
    create(value?: PartialMessage<RequestLoadSnapshotChunk>): RequestLoadSnapshotChunk;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLoadSnapshotChunk): RequestLoadSnapshotChunk;
    internalBinaryWrite(message: RequestLoadSnapshotChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestLoadSnapshotChunk
 */
export declare const RequestLoadSnapshotChunk: RequestLoadSnapshotChunk$Type;
declare class RequestApplySnapshotChunk$Type extends MessageType<RequestApplySnapshotChunk> {
    constructor();
    create(value?: PartialMessage<RequestApplySnapshotChunk>): RequestApplySnapshotChunk;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestApplySnapshotChunk): RequestApplySnapshotChunk;
    internalBinaryWrite(message: RequestApplySnapshotChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.RequestApplySnapshotChunk
 */
export declare const RequestApplySnapshotChunk: RequestApplySnapshotChunk$Type;
declare class Response$Type extends MessageType<Response> {
    constructor();
    create(value?: PartialMessage<Response>): Response;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response;
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Response
 */
export declare const Response: Response$Type;
declare class ResponseException$Type extends MessageType<ResponseException> {
    constructor();
    create(value?: PartialMessage<ResponseException>): ResponseException;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseException): ResponseException;
    internalBinaryWrite(message: ResponseException, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseException
 */
export declare const ResponseException: ResponseException$Type;
declare class ResponseEcho$Type extends MessageType<ResponseEcho> {
    constructor();
    create(value?: PartialMessage<ResponseEcho>): ResponseEcho;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseEcho): ResponseEcho;
    internalBinaryWrite(message: ResponseEcho, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseEcho
 */
export declare const ResponseEcho: ResponseEcho$Type;
declare class ResponseFlush$Type extends MessageType<ResponseFlush> {
    constructor();
    create(value?: PartialMessage<ResponseFlush>): ResponseFlush;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseFlush): ResponseFlush;
    internalBinaryWrite(message: ResponseFlush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseFlush
 */
export declare const ResponseFlush: ResponseFlush$Type;
declare class ResponseInfo$Type extends MessageType<ResponseInfo> {
    constructor();
    create(value?: PartialMessage<ResponseInfo>): ResponseInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseInfo): ResponseInfo;
    internalBinaryWrite(message: ResponseInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseInfo
 */
export declare const ResponseInfo: ResponseInfo$Type;
declare class ResponseSetOption$Type extends MessageType<ResponseSetOption> {
    constructor();
    create(value?: PartialMessage<ResponseSetOption>): ResponseSetOption;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseSetOption): ResponseSetOption;
    internalBinaryWrite(message: ResponseSetOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseSetOption
 */
export declare const ResponseSetOption: ResponseSetOption$Type;
declare class ResponseInitChain$Type extends MessageType<ResponseInitChain> {
    constructor();
    create(value?: PartialMessage<ResponseInitChain>): ResponseInitChain;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseInitChain): ResponseInitChain;
    internalBinaryWrite(message: ResponseInitChain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseInitChain
 */
export declare const ResponseInitChain: ResponseInitChain$Type;
declare class ResponseQuery$Type extends MessageType<ResponseQuery> {
    constructor();
    create(value?: PartialMessage<ResponseQuery>): ResponseQuery;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseQuery): ResponseQuery;
    internalBinaryWrite(message: ResponseQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseQuery
 */
export declare const ResponseQuery: ResponseQuery$Type;
declare class ResponseBeginBlock$Type extends MessageType<ResponseBeginBlock> {
    constructor();
    create(value?: PartialMessage<ResponseBeginBlock>): ResponseBeginBlock;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseBeginBlock): ResponseBeginBlock;
    internalBinaryWrite(message: ResponseBeginBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseBeginBlock
 */
export declare const ResponseBeginBlock: ResponseBeginBlock$Type;
declare class ResponseCheckTx$Type extends MessageType<ResponseCheckTx> {
    constructor();
    create(value?: PartialMessage<ResponseCheckTx>): ResponseCheckTx;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseCheckTx): ResponseCheckTx;
    internalBinaryWrite(message: ResponseCheckTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseCheckTx
 */
export declare const ResponseCheckTx: ResponseCheckTx$Type;
declare class ResponseDeliverTx$Type extends MessageType<ResponseDeliverTx> {
    constructor();
    create(value?: PartialMessage<ResponseDeliverTx>): ResponseDeliverTx;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseDeliverTx): ResponseDeliverTx;
    internalBinaryWrite(message: ResponseDeliverTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseDeliverTx
 */
export declare const ResponseDeliverTx: ResponseDeliverTx$Type;
declare class ResponseEndBlock$Type extends MessageType<ResponseEndBlock> {
    constructor();
    create(value?: PartialMessage<ResponseEndBlock>): ResponseEndBlock;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseEndBlock): ResponseEndBlock;
    internalBinaryWrite(message: ResponseEndBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseEndBlock
 */
export declare const ResponseEndBlock: ResponseEndBlock$Type;
declare class ResponseCommit$Type extends MessageType<ResponseCommit> {
    constructor();
    create(value?: PartialMessage<ResponseCommit>): ResponseCommit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseCommit): ResponseCommit;
    internalBinaryWrite(message: ResponseCommit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseCommit
 */
export declare const ResponseCommit: ResponseCommit$Type;
declare class ResponseListSnapshots$Type extends MessageType<ResponseListSnapshots> {
    constructor();
    create(value?: PartialMessage<ResponseListSnapshots>): ResponseListSnapshots;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseListSnapshots): ResponseListSnapshots;
    internalBinaryWrite(message: ResponseListSnapshots, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseListSnapshots
 */
export declare const ResponseListSnapshots: ResponseListSnapshots$Type;
declare class ResponseOfferSnapshot$Type extends MessageType<ResponseOfferSnapshot> {
    constructor();
    create(value?: PartialMessage<ResponseOfferSnapshot>): ResponseOfferSnapshot;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseOfferSnapshot): ResponseOfferSnapshot;
    internalBinaryWrite(message: ResponseOfferSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseOfferSnapshot
 */
export declare const ResponseOfferSnapshot: ResponseOfferSnapshot$Type;
declare class ResponseLoadSnapshotChunk$Type extends MessageType<ResponseLoadSnapshotChunk> {
    constructor();
    create(value?: PartialMessage<ResponseLoadSnapshotChunk>): ResponseLoadSnapshotChunk;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseLoadSnapshotChunk): ResponseLoadSnapshotChunk;
    internalBinaryWrite(message: ResponseLoadSnapshotChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseLoadSnapshotChunk
 */
export declare const ResponseLoadSnapshotChunk: ResponseLoadSnapshotChunk$Type;
declare class ResponseApplySnapshotChunk$Type extends MessageType<ResponseApplySnapshotChunk> {
    constructor();
    create(value?: PartialMessage<ResponseApplySnapshotChunk>): ResponseApplySnapshotChunk;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseApplySnapshotChunk): ResponseApplySnapshotChunk;
    internalBinaryWrite(message: ResponseApplySnapshotChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ResponseApplySnapshotChunk
 */
export declare const ResponseApplySnapshotChunk: ResponseApplySnapshotChunk$Type;
declare class ConsensusParams$Type extends MessageType<ConsensusParams> {
    constructor();
    create(value?: PartialMessage<ConsensusParams>): ConsensusParams;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsensusParams): ConsensusParams;
    internalBinaryWrite(message: ConsensusParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ConsensusParams
 */
export declare const ConsensusParams: ConsensusParams$Type;
declare class BlockParams$Type extends MessageType<BlockParams> {
    constructor();
    create(value?: PartialMessage<BlockParams>): BlockParams;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockParams): BlockParams;
    internalBinaryWrite(message: BlockParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.BlockParams
 */
export declare const BlockParams: BlockParams$Type;
declare class LastCommitInfo$Type extends MessageType<LastCommitInfo> {
    constructor();
    create(value?: PartialMessage<LastCommitInfo>): LastCommitInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastCommitInfo): LastCommitInfo;
    internalBinaryWrite(message: LastCommitInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.LastCommitInfo
 */
export declare const LastCommitInfo: LastCommitInfo$Type;
declare class Event$Type extends MessageType<Event> {
    constructor();
    create(value?: PartialMessage<Event>): Event;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event;
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Event
 */
export declare const Event: Event$Type;
declare class EventAttribute$Type extends MessageType<EventAttribute> {
    constructor();
    create(value?: PartialMessage<EventAttribute>): EventAttribute;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventAttribute): EventAttribute;
    internalBinaryWrite(message: EventAttribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.EventAttribute
 */
export declare const EventAttribute: EventAttribute$Type;
declare class TxResult$Type extends MessageType<TxResult> {
    constructor();
    create(value?: PartialMessage<TxResult>): TxResult;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TxResult): TxResult;
    internalBinaryWrite(message: TxResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.TxResult
 */
export declare const TxResult: TxResult$Type;
declare class Validator$Type extends MessageType<Validator> {
    constructor();
    create(value?: PartialMessage<Validator>): Validator;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Validator): Validator;
    internalBinaryWrite(message: Validator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Validator
 */
export declare const Validator: Validator$Type;
declare class ValidatorUpdate$Type extends MessageType<ValidatorUpdate> {
    constructor();
    create(value?: PartialMessage<ValidatorUpdate>): ValidatorUpdate;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorUpdate): ValidatorUpdate;
    internalBinaryWrite(message: ValidatorUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.ValidatorUpdate
 */
export declare const ValidatorUpdate: ValidatorUpdate$Type;
declare class VoteInfo$Type extends MessageType<VoteInfo> {
    constructor();
    create(value?: PartialMessage<VoteInfo>): VoteInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoteInfo): VoteInfo;
    internalBinaryWrite(message: VoteInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.VoteInfo
 */
export declare const VoteInfo: VoteInfo$Type;
declare class Evidence$Type extends MessageType<Evidence> {
    constructor();
    create(value?: PartialMessage<Evidence>): Evidence;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Evidence): Evidence;
    internalBinaryWrite(message: Evidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Evidence
 */
export declare const Evidence: Evidence$Type;
declare class Snapshot$Type extends MessageType<Snapshot> {
    constructor();
    create(value?: PartialMessage<Snapshot>): Snapshot;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Snapshot): Snapshot;
    internalBinaryWrite(message: Snapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.abci.Snapshot
 */
export declare const Snapshot: Snapshot$Type;
/**
 * @generated ServiceType for protobuf service tendermint.abci.ABCIApplication
 */
export declare const ABCIApplication: any;
export {};
