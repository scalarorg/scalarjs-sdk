// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "tendermint/version/types.proto" (package "tendermint.version", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * App includes the protocol and software version for the application.
 * This information is included in ResponseInfo. The App.Protocol can be
 * updated in ResponseEndBlock.
 *
 * @generated from protobuf message tendermint.version.App
 */
export interface App {
    /**
     * @generated from protobuf field: uint64 protocol = 1;
     */
    protocol: string;
    /**
     * @generated from protobuf field: string software = 2;
     */
    software: string;
}
/**
 * Consensus captures the consensus rules for processing a block in the blockchain,
 * including all blockchain data structures and the rules of the application's
 * state transition machine.
 *
 * @generated from protobuf message tendermint.version.Consensus
 */
export interface Consensus {
    /**
     * @generated from protobuf field: uint64 block = 1;
     */
    block: string;
    /**
     * @generated from protobuf field: uint64 app = 2;
     */
    app: string;
}
declare class App$Type extends MessageType<App> {
    constructor();
    create(value?: PartialMessage<App>): App;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: App): App;
    internalBinaryWrite(message: App, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.version.App
 */
export declare const App: App$Type;
declare class Consensus$Type extends MessageType<Consensus> {
    constructor();
    create(value?: PartialMessage<Consensus>): Consensus;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consensus): Consensus;
    internalBinaryWrite(message: Consensus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.version.Consensus
 */
export declare const Consensus: Consensus$Type;
export {};
