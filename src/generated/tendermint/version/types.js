// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "tendermint/version/types.proto" (package "tendermint.version", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class App$Type extends MessageType {
    constructor() {
        super("tendermint.version.App", [
            { no: 1, name: "protocol", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "software", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.protocol = "0";
        message.software = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 protocol */ 1:
                    message.protocol = reader.uint64().toString();
                    break;
                case /* string software */ 2:
                    message.software = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 protocol = 1; */
        if (message.protocol !== "0")
            writer.tag(1, WireType.Varint).uint64(message.protocol);
        /* string software = 2; */
        if (message.software !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.software);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.version.App
 */
export const App = new App$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Consensus$Type extends MessageType {
    constructor() {
        super("tendermint.version.Consensus", [
            { no: 1, name: "block", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "app", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.block = "0";
        message.app = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 block */ 1:
                    message.block = reader.uint64().toString();
                    break;
                case /* uint64 app */ 2:
                    message.app = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 block = 1; */
        if (message.block !== "0")
            writer.tag(1, WireType.Varint).uint64(message.block);
        /* uint64 app = 2; */
        if (message.app !== "0")
            writer.tag(2, WireType.Varint).uint64(message.app);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tendermint.version.Consensus
 */
export const Consensus = new Consensus$Type();
