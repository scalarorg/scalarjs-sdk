// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "tendermint/types/evidence.proto" (package "tendermint.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Validator } from "./validator";
import { LightBlock } from "./types";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Vote } from "./types";
/**
 * @generated from protobuf message tendermint.types.Evidence
 */
export interface Evidence {
    /**
     * @generated from protobuf oneof: sum
     */
    sum: {
        oneofKind: "duplicateVoteEvidence";
        /**
         * @generated from protobuf field: tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1;
         */
        duplicateVoteEvidence: DuplicateVoteEvidence;
    } | {
        oneofKind: "lightClientAttackEvidence";
        /**
         * @generated from protobuf field: tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2;
         */
        lightClientAttackEvidence: LightClientAttackEvidence;
    } | {
        oneofKind: undefined;
    };
}
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 *
 * @generated from protobuf message tendermint.types.DuplicateVoteEvidence
 */
export interface DuplicateVoteEvidence {
    /**
     * @generated from protobuf field: tendermint.types.Vote vote_a = 1;
     */
    voteA?: Vote;
    /**
     * @generated from protobuf field: tendermint.types.Vote vote_b = 2;
     */
    voteB?: Vote;
    /**
     * @generated from protobuf field: int64 total_voting_power = 3;
     */
    totalVotingPower: string;
    /**
     * @generated from protobuf field: int64 validator_power = 4;
     */
    validatorPower: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
}
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 *
 * @generated from protobuf message tendermint.types.LightClientAttackEvidence
 */
export interface LightClientAttackEvidence {
    /**
     * @generated from protobuf field: tendermint.types.LightBlock conflicting_block = 1;
     */
    conflictingBlock?: LightBlock;
    /**
     * @generated from protobuf field: int64 common_height = 2;
     */
    commonHeight: string;
    /**
     * @generated from protobuf field: repeated tendermint.types.Validator byzantine_validators = 3;
     */
    byzantineValidators: Validator[];
    /**
     * @generated from protobuf field: int64 total_voting_power = 4;
     */
    totalVotingPower: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 5;
     */
    timestamp?: Timestamp;
}
/**
 * @generated from protobuf message tendermint.types.EvidenceList
 */
export interface EvidenceList {
    /**
     * @generated from protobuf field: repeated tendermint.types.Evidence evidence = 1;
     */
    evidence: Evidence[];
}
declare class Evidence$Type extends MessageType<Evidence> {
    constructor();
    create(value?: PartialMessage<Evidence>): Evidence;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Evidence): Evidence;
    internalBinaryWrite(message: Evidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.Evidence
 */
export declare const Evidence: Evidence$Type;
declare class DuplicateVoteEvidence$Type extends MessageType<DuplicateVoteEvidence> {
    constructor();
    create(value?: PartialMessage<DuplicateVoteEvidence>): DuplicateVoteEvidence;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DuplicateVoteEvidence): DuplicateVoteEvidence;
    internalBinaryWrite(message: DuplicateVoteEvidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.DuplicateVoteEvidence
 */
export declare const DuplicateVoteEvidence: DuplicateVoteEvidence$Type;
declare class LightClientAttackEvidence$Type extends MessageType<LightClientAttackEvidence> {
    constructor();
    create(value?: PartialMessage<LightClientAttackEvidence>): LightClientAttackEvidence;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LightClientAttackEvidence): LightClientAttackEvidence;
    internalBinaryWrite(message: LightClientAttackEvidence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.LightClientAttackEvidence
 */
export declare const LightClientAttackEvidence: LightClientAttackEvidence$Type;
declare class EvidenceList$Type extends MessageType<EvidenceList> {
    constructor();
    create(value?: PartialMessage<EvidenceList>): EvidenceList;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvidenceList): EvidenceList;
    internalBinaryWrite(message: EvidenceList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.EvidenceList
 */
export declare const EvidenceList: EvidenceList$Type;
export {};
