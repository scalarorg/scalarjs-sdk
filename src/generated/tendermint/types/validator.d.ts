// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "tendermint/types/validator.proto" (package "tendermint.types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PublicKey } from "../crypto/keys";
/**
 * @generated from protobuf message tendermint.types.ValidatorSet
 */
export interface ValidatorSet {
    /**
     * @generated from protobuf field: repeated tendermint.types.Validator validators = 1;
     */
    validators: Validator[];
    /**
     * @generated from protobuf field: tendermint.types.Validator proposer = 2;
     */
    proposer?: Validator;
    /**
     * @generated from protobuf field: int64 total_voting_power = 3;
     */
    totalVotingPower: string;
}
/**
 * @generated from protobuf message tendermint.types.Validator
 */
export interface Validator {
    /**
     * @generated from protobuf field: bytes address = 1;
     */
    address: Uint8Array;
    /**
     * @generated from protobuf field: tendermint.crypto.PublicKey pub_key = 2;
     */
    pubKey?: PublicKey;
    /**
     * @generated from protobuf field: int64 voting_power = 3;
     */
    votingPower: string;
    /**
     * @generated from protobuf field: int64 proposer_priority = 4;
     */
    proposerPriority: string;
}
/**
 * @generated from protobuf message tendermint.types.SimpleValidator
 */
export interface SimpleValidator {
    /**
     * @generated from protobuf field: tendermint.crypto.PublicKey pub_key = 1;
     */
    pubKey?: PublicKey;
    /**
     * @generated from protobuf field: int64 voting_power = 2;
     */
    votingPower: string;
}
declare class ValidatorSet$Type extends MessageType<ValidatorSet> {
    constructor();
    create(value?: PartialMessage<ValidatorSet>): ValidatorSet;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorSet): ValidatorSet;
    internalBinaryWrite(message: ValidatorSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.ValidatorSet
 */
export declare const ValidatorSet: ValidatorSet$Type;
declare class Validator$Type extends MessageType<Validator> {
    constructor();
    create(value?: PartialMessage<Validator>): Validator;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Validator): Validator;
    internalBinaryWrite(message: Validator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.Validator
 */
export declare const Validator: Validator$Type;
declare class SimpleValidator$Type extends MessageType<SimpleValidator> {
    constructor();
    create(value?: PartialMessage<SimpleValidator>): SimpleValidator;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleValidator): SimpleValidator;
    internalBinaryWrite(message: SimpleValidator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tendermint.types.SimpleValidator
 */
export declare const SimpleValidator: SimpleValidator$Type;
export {};
