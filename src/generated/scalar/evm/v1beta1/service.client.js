// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/evm/v1beta1/service.proto" (package "scalar.evm.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/evm/v1beta1/service.proto" (package "scalar.evm.v1beta1", syntax proto3)
// tslint:disable
import { QueryService } from "./service";
import { MsgService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the evm Msg service.
 *
 * @generated from protobuf service scalar.evm.v1beta1.MsgService
 */
export class MsgServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = MsgService.typeName;
        this.methods = MsgService.methods;
        this.options = MsgService.options;
    }
    /**
     * @generated from protobuf rpc: SetGateway(scalar.evm.v1beta1.SetGatewayRequest) returns (scalar.evm.v1beta1.SetGatewayResponse);
     */
    setGateway(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Deprecated: use ConfirmGatewayTxs instead
     *
     * @generated from protobuf rpc: ConfirmGatewayTx(scalar.evm.v1beta1.ConfirmGatewayTxRequest) returns (scalar.evm.v1beta1.ConfirmGatewayTxResponse);
     */
    confirmGatewayTx(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfirmGatewayTxs(scalar.evm.v1beta1.ConfirmGatewayTxsRequest) returns (scalar.evm.v1beta1.ConfirmGatewayTxsResponse);
     */
    confirmGatewayTxs(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Link(scalar.evm.v1beta1.LinkRequest) returns (scalar.evm.v1beta1.LinkResponse);
     */
    link(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfirmToken(scalar.evm.v1beta1.ConfirmTokenRequest) returns (scalar.evm.v1beta1.ConfirmTokenResponse);
     */
    confirmToken(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfirmDeposit(scalar.evm.v1beta1.ConfirmDepositRequest) returns (scalar.evm.v1beta1.ConfirmDepositResponse);
     */
    confirmDeposit(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConfirmTransferKey(scalar.evm.v1beta1.ConfirmTransferKeyRequest) returns (scalar.evm.v1beta1.ConfirmTransferKeyResponse);
     */
    confirmTransferKey(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateDeployToken(scalar.evm.v1beta1.CreateDeployTokenRequest) returns (scalar.evm.v1beta1.CreateDeployTokenResponse);
     */
    createDeployToken(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateBurnTokens(scalar.evm.v1beta1.CreateBurnTokensRequest) returns (scalar.evm.v1beta1.CreateBurnTokensResponse);
     */
    createBurnTokens(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePendingTransfers(scalar.evm.v1beta1.CreatePendingTransfersRequest) returns (scalar.evm.v1beta1.CreatePendingTransfersResponse);
     */
    createPendingTransfers(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateTransferOperatorship(scalar.evm.v1beta1.CreateTransferOperatorshipRequest) returns (scalar.evm.v1beta1.CreateTransferOperatorshipResponse);
     */
    createTransferOperatorship(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SignCommands(scalar.evm.v1beta1.SignCommandsRequest) returns (scalar.evm.v1beta1.SignCommandsResponse);
     */
    signCommands(input, options) {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddChain(scalar.evm.v1beta1.AddChainRequest) returns (scalar.evm.v1beta1.AddChainResponse);
     */
    addChain(input, options) {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RetryFailedEvent(scalar.evm.v1beta1.RetryFailedEventRequest) returns (scalar.evm.v1beta1.RetryFailedEventResponse);
     */
    retryFailedEvent(input, options) {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service scalar.evm.v1beta1.QueryService
 */
export class QueryServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = QueryService.typeName;
        this.methods = QueryService.methods;
        this.options = QueryService.options;
    }
    /**
     * BatchedCommands queries the batched commands for a specified chain and
     * BatchedCommandsID if no BatchedCommandsID is specified, then it returns the
     * latest batched commands
     *
     * @generated from protobuf rpc: BatchedCommands(scalar.evm.v1beta1.BatchedCommandsRequest) returns (scalar.evm.v1beta1.BatchedCommandsResponse);
     */
    batchedCommands(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * BurnerInfo queries the burner info for the specified address
     *
     * @generated from protobuf rpc: BurnerInfo(scalar.evm.v1beta1.BurnerInfoRequest) returns (scalar.evm.v1beta1.BurnerInfoResponse);
     */
    burnerInfo(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ConfirmationHeight queries the confirmation height for the specified chain
     *
     * @generated from protobuf rpc: ConfirmationHeight(scalar.evm.v1beta1.ConfirmationHeightRequest) returns (scalar.evm.v1beta1.ConfirmationHeightResponse);
     */
    confirmationHeight(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DepositState queries the state of the specified deposit
     *
     * @deprecated
     * @generated from protobuf rpc: DepositState(scalar.evm.v1beta1.DepositStateRequest) returns (scalar.evm.v1beta1.DepositStateResponse);
     */
    depositState(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * PendingCommands queries the pending commands for the specified chain
     *
     * @generated from protobuf rpc: PendingCommands(scalar.evm.v1beta1.PendingCommandsRequest) returns (scalar.evm.v1beta1.PendingCommandsResponse);
     */
    pendingCommands(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Chains queries the available evm chains
     *
     * @generated from protobuf rpc: Chains(scalar.evm.v1beta1.ChainsRequest) returns (scalar.evm.v1beta1.ChainsResponse);
     */
    chains(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Command queries the command of a chain provided the command id
     *
     * @generated from protobuf rpc: Command(scalar.evm.v1beta1.CommandRequest) returns (scalar.evm.v1beta1.CommandResponse);
     */
    command(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * KeyAddress queries the address of key of a chain
     *
     * @generated from protobuf rpc: KeyAddress(scalar.evm.v1beta1.KeyAddressRequest) returns (scalar.evm.v1beta1.KeyAddressResponse);
     */
    keyAddress(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GatewayAddress queries the address of scalar gateway at the specified
     * chain
     *
     * @generated from protobuf rpc: GatewayAddress(scalar.evm.v1beta1.GatewayAddressRequest) returns (scalar.evm.v1beta1.GatewayAddressResponse);
     */
    gatewayAddress(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Bytecode queries the bytecode of a specified gateway at the specified
     * chain
     *
     * @generated from protobuf rpc: Bytecode(scalar.evm.v1beta1.BytecodeRequest) returns (scalar.evm.v1beta1.BytecodeResponse);
     */
    bytecode(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Event queries an event at the specified chain
     *
     * @generated from protobuf rpc: Event(scalar.evm.v1beta1.EventRequest) returns (scalar.evm.v1beta1.EventResponse);
     */
    event(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ERC20Tokens queries the ERC20 tokens registered for a chain
     *
     * @generated from protobuf rpc: ERC20Tokens(scalar.evm.v1beta1.ERC20TokensRequest) returns (scalar.evm.v1beta1.ERC20TokensResponse);
     */
    eRC20Tokens(input, options) {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TokenInfo queries the token info for a registered ERC20 Token
     *
     * @generated from protobuf rpc: TokenInfo(scalar.evm.v1beta1.TokenInfoRequest) returns (scalar.evm.v1beta1.TokenInfoResponse);
     */
    tokenInfo(input, options) {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Params(scalar.evm.v1beta1.ParamsRequest) returns (scalar.evm.v1beta1.ParamsResponse);
     */
    params(input, options) {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
