// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/nexus/v1beta1/types.proto" (package "scalar.nexus.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TransferDirection } from "../exported/v1beta1/types";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { CrossChainAddress } from "../exported/v1beta1/types";
import { Asset } from "../exported/v1beta1/types";
import { Chain } from "../exported/v1beta1/types";
import { Bitmap } from "../../utils/v1beta1/bitmap";
// @generated message type with reflection information, may provide speed optimized methods
class MaintainerState$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.MaintainerState", [
            { no: 1, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 2, name: "missing_votes", kind: "message", T: () => Bitmap, options: { "gogoproto.nullable": false } },
            { no: 3, name: "incorrect_votes", kind: "message", T: () => Bitmap, options: { "gogoproto.nullable": false } },
            { no: 4, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = new Uint8Array(0);
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address */ 1:
                    message.address = reader.bytes();
                    break;
                case /* scalar.utils.v1beta1.Bitmap missing_votes */ 2:
                    message.missingVotes = Bitmap.internalBinaryRead(reader, reader.uint32(), options, message.missingVotes);
                    break;
                case /* scalar.utils.v1beta1.Bitmap incorrect_votes */ 3:
                    message.incorrectVotes = Bitmap.internalBinaryRead(reader, reader.uint32(), options, message.incorrectVotes);
                    break;
                case /* string chain */ 4:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes address = 1; */
        if (message.address.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.address);
        /* scalar.utils.v1beta1.Bitmap missing_votes = 2; */
        if (message.missingVotes)
            Bitmap.internalBinaryWrite(message.missingVotes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* scalar.utils.v1beta1.Bitmap incorrect_votes = 3; */
        if (message.incorrectVotes)
            Bitmap.internalBinaryWrite(message.incorrectVotes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string chain = 4; */
        if (message.chain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.MaintainerState
 */
export const MaintainerState = new MaintainerState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainState$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.ChainState", [
            { no: 1, name: "chain", kind: "message", T: () => Chain, options: { "gogoproto.nullable": false } },
            { no: 3, name: "activated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Asset, options: { "gogoproto.nullable": false } },
            { no: 6, name: "maintainer_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MaintainerState, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.activated = false;
        message.assets = [];
        message.maintainerStates = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.nexus.exported.v1beta1.Chain chain */ 1:
                    message.chain = Chain.internalBinaryRead(reader, reader.uint32(), options, message.chain);
                    break;
                case /* bool activated */ 3:
                    message.activated = reader.bool();
                    break;
                case /* repeated scalar.nexus.exported.v1beta1.Asset assets */ 5:
                    message.assets.push(Asset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated scalar.nexus.v1beta1.MaintainerState maintainer_states = 6 [deprecated = true];*/ 6:
                    message.maintainerStates.push(MaintainerState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.nexus.exported.v1beta1.Chain chain = 1; */
        if (message.chain)
            Chain.internalBinaryWrite(message.chain, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool activated = 3; */
        if (message.activated !== false)
            writer.tag(3, WireType.Varint).bool(message.activated);
        /* repeated scalar.nexus.exported.v1beta1.Asset assets = 5; */
        for (let i = 0; i < message.assets.length; i++)
            Asset.internalBinaryWrite(message.assets[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated scalar.nexus.v1beta1.MaintainerState maintainer_states = 6 [deprecated = true]; */
        for (let i = 0; i < message.maintainerStates.length; i++)
            MaintainerState.internalBinaryWrite(message.maintainerStates[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.ChainState
 */
export const ChainState = new ChainState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkedAddresses$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.LinkedAddresses", [
            { no: 1, name: "deposit_address", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } },
            { no: 2, name: "recipient_address", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.nexus.exported.v1beta1.CrossChainAddress deposit_address */ 1:
                    message.depositAddress = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.depositAddress);
                    break;
                case /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient_address */ 2:
                    message.recipientAddress = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.recipientAddress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.nexus.exported.v1beta1.CrossChainAddress deposit_address = 1; */
        if (message.depositAddress)
            CrossChainAddress.internalBinaryWrite(message.depositAddress, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient_address = 2; */
        if (message.recipientAddress)
            CrossChainAddress.internalBinaryWrite(message.recipientAddress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.LinkedAddresses
 */
export const LinkedAddresses = new LinkedAddresses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RateLimit$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.RateLimit", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "limit", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 3, name: "window", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin limit */ 2:
                    message.limit = Coin.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.Duration window */ 3:
                    message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* cosmos.base.v1beta1.Coin limit = 2; */
        if (message.limit)
            Coin.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration window = 3; */
        if (message.window)
            Duration.internalBinaryWrite(message.window, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.RateLimit
 */
export const RateLimit = new RateLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferEpoch$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.TransferEpoch", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 3, name: "epoch", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "direction", kind: "enum", T: () => ["scalar.nexus.exported.v1beta1.TransferDirection", TransferDirection, "TRANSFER_DIRECTION_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.epoch = "0";
        message.direction = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 2:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* uint64 epoch */ 3:
                    message.epoch = reader.uint64().toString();
                    break;
                case /* scalar.nexus.exported.v1beta1.TransferDirection direction */ 4:
                    message.direction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* cosmos.base.v1beta1.Coin amount = 2; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 epoch = 3; */
        if (message.epoch !== "0")
            writer.tag(3, WireType.Varint).uint64(message.epoch);
        /* scalar.nexus.exported.v1beta1.TransferDirection direction = 4; */
        if (message.direction !== 0)
            writer.tag(4, WireType.Varint).int32(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.TransferEpoch
 */
export const TransferEpoch = new TransferEpoch$Type();
