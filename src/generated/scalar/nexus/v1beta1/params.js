// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/nexus/v1beta1/params.proto" (package "scalar.nexus.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Threshold } from "../../utils/v1beta1/threshold";
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("scalar.nexus.v1beta1.Params", [
            { no: 1, name: "chain_activation_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 2, name: "chain_maintainer_missing_vote_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 3, name: "chain_maintainer_incorrect_vote_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 4, name: "chain_maintainer_check_window", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "gateway", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 6, name: "end_blocker_limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chainMaintainerCheckWindow = 0;
        message.gateway = new Uint8Array(0);
        message.endBlockerLimit = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.utils.v1beta1.Threshold chain_activation_threshold */ 1:
                    message.chainActivationThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.chainActivationThreshold);
                    break;
                case /* scalar.utils.v1beta1.Threshold chain_maintainer_missing_vote_threshold */ 2:
                    message.chainMaintainerMissingVoteThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.chainMaintainerMissingVoteThreshold);
                    break;
                case /* scalar.utils.v1beta1.Threshold chain_maintainer_incorrect_vote_threshold */ 3:
                    message.chainMaintainerIncorrectVoteThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.chainMaintainerIncorrectVoteThreshold);
                    break;
                case /* int32 chain_maintainer_check_window */ 4:
                    message.chainMaintainerCheckWindow = reader.int32();
                    break;
                case /* bytes gateway */ 5:
                    message.gateway = reader.bytes();
                    break;
                case /* uint64 end_blocker_limit */ 6:
                    message.endBlockerLimit = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.utils.v1beta1.Threshold chain_activation_threshold = 1; */
        if (message.chainActivationThreshold)
            Threshold.internalBinaryWrite(message.chainActivationThreshold, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* scalar.utils.v1beta1.Threshold chain_maintainer_missing_vote_threshold = 2; */
        if (message.chainMaintainerMissingVoteThreshold)
            Threshold.internalBinaryWrite(message.chainMaintainerMissingVoteThreshold, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* scalar.utils.v1beta1.Threshold chain_maintainer_incorrect_vote_threshold = 3; */
        if (message.chainMaintainerIncorrectVoteThreshold)
            Threshold.internalBinaryWrite(message.chainMaintainerIncorrectVoteThreshold, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 chain_maintainer_check_window = 4; */
        if (message.chainMaintainerCheckWindow !== 0)
            writer.tag(4, WireType.Varint).int32(message.chainMaintainerCheckWindow);
        /* bytes gateway = 5; */
        if (message.gateway.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.gateway);
        /* uint64 end_blocker_limit = 6; */
        if (message.endBlockerLimit !== "0")
            writer.tag(6, WireType.Varint).uint64(message.endBlockerLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.v1beta1.Params
 */
export const Params = new Params$Type();
