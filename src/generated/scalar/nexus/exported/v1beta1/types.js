// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/nexus/exported/v1beta1/types.proto" (package "scalar.nexus.exported.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { KeyType } from "../../../tss/exported/v1beta1/types";
/**
 * @generated from protobuf enum scalar.nexus.exported.v1beta1.GeneralMessage.Status
 */
export var GeneralMessage_Status;
(function (GeneralMessage_Status) {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    GeneralMessage_Status[GeneralMessage_Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_APPROVED = 1;
     */
    GeneralMessage_Status[GeneralMessage_Status["APPROVED"] = 1] = "APPROVED";
    /**
     * @generated from protobuf enum value: STATUS_PROCESSING = 2;
     */
    GeneralMessage_Status[GeneralMessage_Status["PROCESSING"] = 2] = "PROCESSING";
    /**
     * @generated from protobuf enum value: STATUS_EXECUTED = 3;
     */
    GeneralMessage_Status[GeneralMessage_Status["EXECUTED"] = 3] = "EXECUTED";
    /**
     * @generated from protobuf enum value: STATUS_FAILED = 4;
     */
    GeneralMessage_Status[GeneralMessage_Status["FAILED"] = 4] = "FAILED";
})(GeneralMessage_Status || (GeneralMessage_Status = {}));
/**
 * @generated from protobuf enum scalar.nexus.exported.v1beta1.TransferState
 */
export var TransferState;
(function (TransferState) {
    /**
     * @generated from protobuf enum value: TRANSFER_STATE_UNSPECIFIED = 0;
     */
    TransferState[TransferState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: TRANSFER_STATE_PENDING = 1;
     */
    TransferState[TransferState["PENDING"] = 1] = "PENDING";
    /**
     * @generated from protobuf enum value: TRANSFER_STATE_ARCHIVED = 2;
     */
    TransferState[TransferState["ARCHIVED"] = 2] = "ARCHIVED";
    /**
     * @generated from protobuf enum value: TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3;
     */
    TransferState[TransferState["INSUFFICIENT_AMOUNT"] = 3] = "INSUFFICIENT_AMOUNT";
    /**
     * @generated from protobuf enum value: TRANSFER_STATE_FAILED = 4;
     */
    TransferState[TransferState["FAILED"] = 4] = "FAILED";
})(TransferState || (TransferState = {}));
/**
 * @generated from protobuf enum scalar.nexus.exported.v1beta1.TransferDirection
 */
export var TransferDirection;
(function (TransferDirection) {
    /**
     * @generated from protobuf enum value: TRANSFER_DIRECTION_UNSPECIFIED = 0;
     */
    TransferDirection[TransferDirection["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: TRANSFER_DIRECTION_FROM = 1;
     */
    TransferDirection[TransferDirection["FROM"] = 1] = "FROM";
    /**
     * @generated from protobuf enum value: TRANSFER_DIRECTION_TO = 2;
     */
    TransferDirection[TransferDirection["TO"] = 2] = "TO";
})(TransferDirection || (TransferDirection = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Chain$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.Chain", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "ChainName" } },
            { no: 2, name: "supports_foreign_assets", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "key_type", kind: "enum", T: () => ["scalar.tss.exported.v1beta1.KeyType", KeyType, "KEY_TYPE_"] },
            { no: 4, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.supportsForeignAssets = false;
        message.keyType = 0;
        message.module = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool supports_foreign_assets */ 2:
                    message.supportsForeignAssets = reader.bool();
                    break;
                case /* scalar.tss.exported.v1beta1.KeyType key_type */ 3:
                    message.keyType = reader.int32();
                    break;
                case /* string module */ 4:
                    message.module = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool supports_foreign_assets = 2; */
        if (message.supportsForeignAssets !== false)
            writer.tag(2, WireType.Varint).bool(message.supportsForeignAssets);
        /* scalar.tss.exported.v1beta1.KeyType key_type = 3; */
        if (message.keyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.keyType);
        /* string module = 4; */
        if (message.module !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.Chain
 */
export const Chain = new Chain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossChainAddress$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.CrossChainAddress", [
            { no: 1, name: "chain", kind: "message", T: () => Chain, options: { "gogoproto.nullable": false } },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.nexus.exported.v1beta1.Chain chain */ 1:
                    message.chain = Chain.internalBinaryRead(reader, reader.uint32(), options, message.chain);
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.nexus.exported.v1beta1.Chain chain = 1; */
        if (message.chain)
            Chain.internalBinaryWrite(message.chain, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.CrossChainAddress
 */
export const CrossChainAddress = new CrossChainAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrossChainTransfer$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.CrossChainTransfer", [
            { no: 1, name: "recipient", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } },
            { no: 2, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 3, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "TransferID" } },
            { no: 4, name: "state", kind: "enum", T: () => ["scalar.nexus.exported.v1beta1.TransferState", TransferState, "TRANSFER_STATE_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient */ 1:
                    message.recipient = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.recipient);
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 2:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* uint64 id */ 3:
                    message.id = reader.uint64().toString();
                    break;
                case /* scalar.nexus.exported.v1beta1.TransferState state */ 4:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient = 1; */
        if (message.recipient)
            CrossChainAddress.internalBinaryWrite(message.recipient, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.v1beta1.Coin asset = 2; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 3; */
        if (message.id !== "0")
            writer.tag(3, WireType.Varint).uint64(message.id);
        /* scalar.nexus.exported.v1beta1.TransferState state = 4; */
        if (message.state !== 0)
            writer.tag(4, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.CrossChainTransfer
 */
export const CrossChainTransfer = new CrossChainTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferFee$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.TransferFee", [
            { no: 1, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.coins = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin coins */ 1:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.Coin coins = 1; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.TransferFee
 */
export const TransferFee = new TransferFee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeeInfo$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.FeeInfo", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "ChainName" } },
            { no: 2, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fee_rate", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } },
            { no: 4, name: "min_fee", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 5, name: "max_fee", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.asset = "";
        message.feeRate = new Uint8Array(0);
        message.minFee = new Uint8Array(0);
        message.maxFee = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string asset */ 2:
                    message.asset = reader.string();
                    break;
                case /* bytes fee_rate */ 3:
                    message.feeRate = reader.bytes();
                    break;
                case /* bytes min_fee */ 4:
                    message.minFee = reader.bytes();
                    break;
                case /* bytes max_fee */ 5:
                    message.maxFee = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string asset = 2; */
        if (message.asset !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.asset);
        /* bytes fee_rate = 3; */
        if (message.feeRate.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.feeRate);
        /* bytes min_fee = 4; */
        if (message.minFee.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.minFee);
        /* bytes max_fee = 5; */
        if (message.maxFee.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.maxFee);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.FeeInfo
 */
export const FeeInfo = new FeeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Asset$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.Asset", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "is_native_asset", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.denom = "";
        message.isNativeAsset = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* bool is_native_asset */ 3:
                    message.isNativeAsset = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* bool is_native_asset = 3; */
        if (message.isNativeAsset !== false)
            writer.tag(3, WireType.Varint).bool(message.isNativeAsset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.Asset
 */
export const Asset = new Asset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralMessage$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.GeneralMessage", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "sender", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } },
            { no: 3, name: "recipient", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } },
            { no: 4, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["scalar.nexus.exported.v1beta1.GeneralMessage.Status", GeneralMessage_Status, "STATUS_"] },
            { no: 6, name: "asset", kind: "message", T: () => Coin },
            { no: 7, name: "source_tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "SourceTxID" } },
            { no: 8, name: "source_tx_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.payloadHash = new Uint8Array(0);
        message.status = 0;
        message.sourceTxId = new Uint8Array(0);
        message.sourceTxIndex = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* scalar.nexus.exported.v1beta1.CrossChainAddress sender */ 2:
                    message.sender = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.sender);
                    break;
                case /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient */ 3:
                    message.recipient = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.recipient);
                    break;
                case /* bytes payload_hash */ 4:
                    message.payloadHash = reader.bytes();
                    break;
                case /* scalar.nexus.exported.v1beta1.GeneralMessage.Status status */ 5:
                    message.status = reader.int32();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 6:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* bytes source_tx_id */ 7:
                    message.sourceTxId = reader.bytes();
                    break;
                case /* uint64 source_tx_index */ 8:
                    message.sourceTxIndex = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* scalar.nexus.exported.v1beta1.CrossChainAddress sender = 2; */
        if (message.sender)
            CrossChainAddress.internalBinaryWrite(message.sender, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* scalar.nexus.exported.v1beta1.CrossChainAddress recipient = 3; */
        if (message.recipient)
            CrossChainAddress.internalBinaryWrite(message.recipient, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes payload_hash = 4; */
        if (message.payloadHash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.payloadHash);
        /* scalar.nexus.exported.v1beta1.GeneralMessage.Status status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* cosmos.base.v1beta1.Coin asset = 6; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bytes source_tx_id = 7; */
        if (message.sourceTxId.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.sourceTxId);
        /* uint64 source_tx_index = 8; */
        if (message.sourceTxIndex !== "0")
            writer.tag(8, WireType.Varint).uint64(message.sourceTxIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.GeneralMessage
 */
export const GeneralMessage = new GeneralMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WasmMessage$Type extends MessageType {
    constructor() {
        super("scalar.nexus.exported.v1beta1.WasmMessage", [
            { no: 1, name: "source_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "ChainName" } },
            { no: 2, name: "source_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "ChainName" } },
            { no: 4, name: "destination_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "WasmBytes" } },
            { no: 6, name: "source_tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "SourceTxID", "gogoproto.casttype": "WasmBytes" } },
            { no: 7, name: "source_tx_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "source_tx_index" } },
            { no: 8, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 9, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sourceChain = "";
        message.sourceAddress = "";
        message.destinationChain = "";
        message.destinationAddress = "";
        message.payloadHash = new Uint8Array(0);
        message.sourceTxId = new Uint8Array(0);
        message.sourceTxIndex = "0";
        message.sender = new Uint8Array(0);
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_chain */ 1:
                    message.sourceChain = reader.string();
                    break;
                case /* string source_address */ 2:
                    message.sourceAddress = reader.string();
                    break;
                case /* string destination_chain */ 3:
                    message.destinationChain = reader.string();
                    break;
                case /* string destination_address */ 4:
                    message.destinationAddress = reader.string();
                    break;
                case /* bytes payload_hash */ 5:
                    message.payloadHash = reader.bytes();
                    break;
                case /* bytes source_tx_id */ 6:
                    message.sourceTxId = reader.bytes();
                    break;
                case /* uint64 source_tx_index */ 7:
                    message.sourceTxIndex = reader.uint64().toString();
                    break;
                case /* bytes sender */ 8:
                    message.sender = reader.bytes();
                    break;
                case /* string id */ 9:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string source_chain = 1; */
        if (message.sourceChain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourceChain);
        /* string source_address = 2; */
        if (message.sourceAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceAddress);
        /* string destination_chain = 3; */
        if (message.destinationChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.destinationChain);
        /* string destination_address = 4; */
        if (message.destinationAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationAddress);
        /* bytes payload_hash = 5; */
        if (message.payloadHash.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.payloadHash);
        /* bytes source_tx_id = 6; */
        if (message.sourceTxId.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.sourceTxId);
        /* uint64 source_tx_index = 7; */
        if (message.sourceTxIndex !== "0")
            writer.tag(7, WireType.Varint).uint64(message.sourceTxIndex);
        /* bytes sender = 8; */
        if (message.sender.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.sender);
        /* string id = 9; */
        if (message.id !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.nexus.exported.v1beta1.WasmMessage
 */
export const WasmMessage = new WasmMessage$Type();
