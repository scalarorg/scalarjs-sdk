// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/protocol/v1beta1/tx.proto" (package "scalar.protocol.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "./types";
import { Protocol } from "./types";
import { SupportedChain } from "./types";
import { CustodianGroup } from "../../covenant/v1beta1/types";
import { ProtocolAttribute } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class CreateProtocolRequest$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.CreateProtocolRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "attribute", kind: "message", T: () => ProtocolAttribute },
            { no: 5, name: "custodian_group", kind: "message", T: () => CustodianGroup },
            { no: 6, name: "chains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SupportedChain }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.name = "";
        message.tag = "";
        message.chains = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string tag */ 3:
                    message.tag = reader.string();
                    break;
                case /* scalar.protocol.v1beta1.ProtocolAttribute attribute */ 4:
                    message.attribute = ProtocolAttribute.internalBinaryRead(reader, reader.uint32(), options, message.attribute);
                    break;
                case /* scalar.covenant.v1beta1.CustodianGroup custodian_group */ 5:
                    message.custodianGroup = CustodianGroup.internalBinaryRead(reader, reader.uint32(), options, message.custodianGroup);
                    break;
                case /* repeated scalar.protocol.v1beta1.SupportedChain chains */ 6:
                    message.chains.push(SupportedChain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string tag = 3; */
        if (message.tag !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tag);
        /* scalar.protocol.v1beta1.ProtocolAttribute attribute = 4; */
        if (message.attribute)
            ProtocolAttribute.internalBinaryWrite(message.attribute, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* scalar.covenant.v1beta1.CustodianGroup custodian_group = 5; */
        if (message.custodianGroup)
            CustodianGroup.internalBinaryWrite(message.custodianGroup, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated scalar.protocol.v1beta1.SupportedChain chains = 6; */
        for (let i = 0; i < message.chains.length; i++)
            SupportedChain.internalBinaryWrite(message.chains[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.CreateProtocolRequest
 */
export const CreateProtocolRequest = new CreateProtocolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateProtocolResponse$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.CreateProtocolResponse", [
            { no: 1, name: "protocol", kind: "message", T: () => Protocol }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.protocol.v1beta1.Protocol protocol */ 1:
                    message.protocol = Protocol.internalBinaryRead(reader, reader.uint32(), options, message.protocol);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.protocol.v1beta1.Protocol protocol = 1; */
        if (message.protocol)
            Protocol.internalBinaryWrite(message.protocol, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.CreateProtocolResponse
 */
export const CreateProtocolResponse = new CreateProtocolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProtocolRequest$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.UpdateProtocolRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.name = "";
        message.tag = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string tag */ 3:
                    message.tag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string tag = 3; */
        if (message.tag !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.UpdateProtocolRequest
 */
export const UpdateProtocolRequest = new UpdateProtocolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateProtocolResponse$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.UpdateProtocolResponse", [
            { no: 1, name: "protocol", kind: "message", T: () => Protocol }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.protocol.v1beta1.Protocol protocol */ 1:
                    message.protocol = Protocol.internalBinaryRead(reader, reader.uint32(), options, message.protocol);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.protocol.v1beta1.Protocol protocol = 1; */
        if (message.protocol)
            Protocol.internalBinaryWrite(message.protocol, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.UpdateProtocolResponse
 */
export const UpdateProtocolResponse = new UpdateProtocolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddSupportedChainRequest$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.AddSupportedChainRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "message", T: () => SupportedChain }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* scalar.protocol.v1beta1.SupportedChain chain */ 2:
                    message.chain = SupportedChain.internalBinaryRead(reader, reader.uint32(), options, message.chain);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* scalar.protocol.v1beta1.SupportedChain chain = 2; */
        if (message.chain)
            SupportedChain.internalBinaryWrite(message.chain, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.AddSupportedChainRequest
 */
export const AddSupportedChainRequest = new AddSupportedChainRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddSupportedChainResponse$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.AddSupportedChainResponse", [
            { no: 1, name: "protocol", kind: "message", T: () => Protocol }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.protocol.v1beta1.Protocol protocol */ 1:
                    message.protocol = Protocol.internalBinaryRead(reader, reader.uint32(), options, message.protocol);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.protocol.v1beta1.Protocol protocol = 1; */
        if (message.protocol)
            Protocol.internalBinaryWrite(message.protocol, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.AddSupportedChainResponse
 */
export const AddSupportedChainResponse = new AddSupportedChainResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSupportedChainRequest$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.UpdateSupportedChainRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain_family", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chain_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["scalar.protocol.v1beta1.Status", Status, "STATUS_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chainFamily = "";
        message.chainId = "0";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain_family */ 2:
                    message.chainFamily = reader.string();
                    break;
                case /* uint64 chain_id */ 3:
                    message.chainId = reader.uint64().toString();
                    break;
                case /* scalar.protocol.v1beta1.Status status */ 4:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain_family = 2; */
        if (message.chainFamily !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chainFamily);
        /* uint64 chain_id = 3; */
        if (message.chainId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.chainId);
        /* scalar.protocol.v1beta1.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.UpdateSupportedChainRequest
 */
export const UpdateSupportedChainRequest = new UpdateSupportedChainRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSupportedChainResponse$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.UpdateSupportedChainResponse", [
            { no: 1, name: "protocol", kind: "message", T: () => Protocol }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.protocol.v1beta1.Protocol protocol */ 1:
                    message.protocol = Protocol.internalBinaryRead(reader, reader.uint32(), options, message.protocol);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.protocol.v1beta1.Protocol protocol = 1; */
        if (message.protocol)
            Protocol.internalBinaryWrite(message.protocol, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.UpdateSupportedChainResponse
 */
export const UpdateSupportedChainResponse = new UpdateSupportedChainResponse$Type();
