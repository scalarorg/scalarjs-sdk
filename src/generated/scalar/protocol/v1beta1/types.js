// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/protocol/v1beta1/types.proto" (package "scalar.protocol.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Asset } from "../../chains/v1beta1/types";
import { CustodianGroup } from "../../covenant/v1beta1/types";
/**
 * @generated from protobuf enum scalar.protocol.v1beta1.LiquidityModel
 */
export var LiquidityModel;
(function (LiquidityModel) {
    /**
     * @generated from protobuf enum value: LIQUIDITY_MODEL_POOLING = 0;
     */
    LiquidityModel[LiquidityModel["POOLING"] = 0] = "POOLING";
    /**
     * @generated from protobuf enum value: LIQUIDITY_MODEL_TRANSACTIONAL = 1;
     */
    LiquidityModel[LiquidityModel["TRANSACTIONAL"] = 1] = "TRANSACTIONAL";
})(LiquidityModel || (LiquidityModel = {}));
/**
 * @generated from protobuf enum scalar.protocol.v1beta1.Status
 */
export var Status;
(function (Status) {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    Status[Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_ACTIVATED = 1;
     */
    Status[Status["ACTIVATED"] = 1] = "ACTIVATED";
    /**
     * @generated from protobuf enum value: STATUS_DEACTIVATED = 2;
     */
    Status[Status["DEACTIVATED"] = 2] = "DEACTIVATED";
})(Status || (Status = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ProtocolAttribute$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.ProtocolAttribute", [
            { no: 1, name: "model", kind: "enum", T: () => ["scalar.protocol.v1beta1.LiquidityModel", LiquidityModel, "LIQUIDITY_MODEL_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.model = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.protocol.v1beta1.LiquidityModel model */ 1:
                    message.model = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.protocol.v1beta1.LiquidityModel model = 1; */
        if (message.model !== 0)
            writer.tag(1, WireType.Varint).int32(message.model);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.ProtocolAttribute
 */
export const ProtocolAttribute = new ProtocolAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SupportedChain$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.SupportedChain", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.SupportedChain
 */
export const SupportedChain = new SupportedChain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Protocol$Type extends MessageType {
    constructor() {
        super("scalar.protocol.v1beta1.Protocol", [
            { no: 1, name: "pubkey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "attribute", kind: "message", T: () => ProtocolAttribute },
            { no: 6, name: "status", kind: "enum", T: () => ["scalar.protocol.v1beta1.Status", Status, "STATUS_"] },
            { no: 7, name: "custodian_group", kind: "message", T: () => CustodianGroup },
            { no: 8, name: "asset", kind: "message", T: () => Asset },
            { no: 9, name: "chains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SupportedChain }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pubkey = new Uint8Array(0);
        message.address = new Uint8Array(0);
        message.name = "";
        message.tag = "";
        message.status = 0;
        message.chains = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes pubkey */ 1:
                    message.pubkey = reader.bytes();
                    break;
                case /* bytes address */ 2:
                    message.address = reader.bytes();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string tag */ 4:
                    message.tag = reader.string();
                    break;
                case /* scalar.protocol.v1beta1.ProtocolAttribute attribute */ 5:
                    message.attribute = ProtocolAttribute.internalBinaryRead(reader, reader.uint32(), options, message.attribute);
                    break;
                case /* scalar.protocol.v1beta1.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* scalar.covenant.v1beta1.CustodianGroup custodian_group */ 7:
                    message.custodianGroup = CustodianGroup.internalBinaryRead(reader, reader.uint32(), options, message.custodianGroup);
                    break;
                case /* scalar.chains.v1beta1.Asset asset */ 8:
                    message.asset = Asset.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* repeated scalar.protocol.v1beta1.SupportedChain chains */ 9:
                    message.chains.push(SupportedChain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes pubkey = 1; */
        if (message.pubkey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.pubkey);
        /* bytes address = 2; */
        if (message.address.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.address);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string tag = 4; */
        if (message.tag !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tag);
        /* scalar.protocol.v1beta1.ProtocolAttribute attribute = 5; */
        if (message.attribute)
            ProtocolAttribute.internalBinaryWrite(message.attribute, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* scalar.protocol.v1beta1.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* scalar.covenant.v1beta1.CustodianGroup custodian_group = 7; */
        if (message.custodianGroup)
            CustodianGroup.internalBinaryWrite(message.custodianGroup, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* scalar.chains.v1beta1.Asset asset = 8; */
        if (message.asset)
            Asset.internalBinaryWrite(message.asset, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated scalar.protocol.v1beta1.SupportedChain chains = 9; */
        for (let i = 0; i < message.chains.length; i++)
            SupportedChain.internalBinaryWrite(message.chains[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.protocol.v1beta1.Protocol
 */
export const Protocol = new Protocol$Type();
