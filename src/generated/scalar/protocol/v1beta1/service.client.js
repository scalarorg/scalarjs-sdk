// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/protocol/v1beta1/service.proto" (package "scalar.protocol.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/protocol/v1beta1/service.proto" (package "scalar.protocol.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./service";
import { Msg } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service scalar.protocol.v1beta1.Msg
 */
export class MsgClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Msg.typeName;
        this.methods = Msg.methods;
        this.options = Msg.options;
    }
    /**
     * Create protocol
     *
     * @generated from protobuf rpc: CreateProtocol(scalar.protocol.v1beta1.CreateProtocolRequest) returns (scalar.protocol.v1beta1.CreateProtocolResponse);
     */
    createProtocol(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProtocol(scalar.protocol.v1beta1.UpdateProtocolRequest) returns (scalar.protocol.v1beta1.UpdateProtocolResponse);
     */
    updateProtocol(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Add DestinationChain into protocol
     *
     * @generated from protobuf rpc: AddSupportedChain(scalar.protocol.v1beta1.AddSupportedChainRequest) returns (scalar.protocol.v1beta1.AddSupportedChainResponse);
     */
    addSupportedChain(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Delete DestinationChain from protocol
     *
     * @generated from protobuf rpc: UpdateSupportedChain(scalar.protocol.v1beta1.UpdateSupportedChainRequest) returns (scalar.protocol.v1beta1.UpdateSupportedChainResponse);
     */
    updateSupportedChain(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
/**
 * Query defines the gRPC querier service
 *
 * @generated from protobuf service scalar.protocol.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * GetProtocols returns all Protocol
     *
     * @generated from protobuf rpc: Protocols(scalar.protocol.v1beta1.ProtocolsRequest) returns (scalar.protocol.v1beta1.ProtocolsResponse);
     */
    protocols(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
