// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/multisig/v1beta1/types.proto" (package "scalar.multisig.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { MultisigState } from "../exported/v1beta1/types";
import { KeyState } from "../exported/v1beta1/types";
import { Threshold } from "../../utils/v1beta1/threshold";
import { Snapshot } from "../../snapshot/exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class Key$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.Key", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 2, name: "snapshot", kind: "message", T: () => Snapshot, options: { "gogoproto.nullable": false } },
            { no: 3, name: "pub_keys", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ }, options: { "gogoproto.castvalue": "github.com/scalarorg/scalar-core/x/multisig/exported.PublicKey" } },
            { no: 4, name: "signing_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 5, name: "state", kind: "enum", T: () => ["scalar.multisig.exported.v1beta1.KeyState", KeyState, "KEY_STATE_"] }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.pubKeys = {};
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* scalar.snapshot.exported.v1beta1.Snapshot snapshot */ 2:
                    message.snapshot = Snapshot.internalBinaryRead(reader, reader.uint32(), options, message.snapshot);
                    break;
                case /* map<string, bytes> pub_keys */ 3:
                    this.binaryReadMap3(message.pubKeys, reader, options);
                    break;
                case /* scalar.utils.v1beta1.Threshold signing_threshold */ 4:
                    message.signingThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.signingThreshold);
                    break;
                case /* scalar.multisig.exported.v1beta1.KeyState state */ 5:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.multisig.v1beta1.Key.pub_keys");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* scalar.snapshot.exported.v1beta1.Snapshot snapshot = 2; */
        if (message.snapshot)
            Snapshot.internalBinaryWrite(message.snapshot, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, bytes> pub_keys = 3; */
        for (let k of globalThis.Object.keys(message.pubKeys))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.pubKeys[k]).join();
        /* scalar.utils.v1beta1.Threshold signing_threshold = 4; */
        if (message.signingThreshold)
            Threshold.internalBinaryWrite(message.signingThreshold, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* scalar.multisig.exported.v1beta1.KeyState state = 5; */
        if (message.state !== 0)
            writer.tag(5, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.Key
 */
export const Key = new Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenSession$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenSession", [
            { no: 1, name: "key", kind: "message", T: () => Key, options: { "gogoproto.nullable": false } },
            { no: 2, name: "state", kind: "enum", T: () => ["scalar.multisig.exported.v1beta1.MultisigState", MultisigState, "MULTISIG_STATE_"] },
            { no: 3, name: "keygen_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 4, name: "expires_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "completed_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "is_pub_key_received", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 7, name: "grace_period", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.state = 0;
        message.expiresAt = "0";
        message.completedAt = "0";
        message.isPubKeyReceived = {};
        message.gracePeriod = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.multisig.v1beta1.Key key */ 1:
                    message.key = Key.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* scalar.multisig.exported.v1beta1.MultisigState state */ 2:
                    message.state = reader.int32();
                    break;
                case /* scalar.utils.v1beta1.Threshold keygen_threshold */ 3:
                    message.keygenThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.keygenThreshold);
                    break;
                case /* int64 expires_at */ 4:
                    message.expiresAt = reader.int64().toString();
                    break;
                case /* int64 completed_at */ 5:
                    message.completedAt = reader.int64().toString();
                    break;
                case /* map<string, bool> is_pub_key_received */ 6:
                    this.binaryReadMap6(message.isPubKeyReceived, reader, options);
                    break;
                case /* int64 grace_period */ 7:
                    message.gracePeriod = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.multisig.v1beta1.KeygenSession.is_pub_key_received");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : false;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.multisig.v1beta1.Key key = 1; */
        if (message.key)
            Key.internalBinaryWrite(message.key, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* scalar.multisig.exported.v1beta1.MultisigState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* scalar.utils.v1beta1.Threshold keygen_threshold = 3; */
        if (message.keygenThreshold)
            Threshold.internalBinaryWrite(message.keygenThreshold, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 expires_at = 4; */
        if (message.expiresAt !== "0")
            writer.tag(4, WireType.Varint).int64(message.expiresAt);
        /* int64 completed_at = 5; */
        if (message.completedAt !== "0")
            writer.tag(5, WireType.Varint).int64(message.completedAt);
        /* map<string, bool> is_pub_key_received = 6; */
        for (let k of globalThis.Object.keys(message.isPubKeyReceived))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).bool(message.isPubKeyReceived[k]).join();
        /* int64 grace_period = 7; */
        if (message.gracePeriod !== "0")
            writer.tag(7, WireType.Varint).int64(message.gracePeriod);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenSession
 */
export const KeygenSession = new KeygenSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultiSig$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.MultiSig", [
            { no: 1, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 2, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.Hash" } },
            { no: 3, name: "sigs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ }, options: { "gogoproto.castvalue": "Signature" } }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyId = "";
        message.payloadHash = new Uint8Array(0);
        message.sigs = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_id */ 1:
                    message.keyId = reader.string();
                    break;
                case /* bytes payload_hash */ 2:
                    message.payloadHash = reader.bytes();
                    break;
                case /* map<string, bytes> sigs */ 3:
                    this.binaryReadMap3(message.sigs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.multisig.v1beta1.MultiSig.sigs");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
    }
    internalBinaryWrite(message, writer, options) {
        /* string key_id = 1; */
        if (message.keyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyId);
        /* bytes payload_hash = 2; */
        if (message.payloadHash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payloadHash);
        /* map<string, bytes> sigs = 3; */
        for (let k of globalThis.Object.keys(message.sigs))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.sigs[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.MultiSig
 */
export const MultiSig = new MultiSig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningSession$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.SigningSession", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "multi_sig", kind: "message", T: () => MultiSig, options: { "gogoproto.nullable": false } },
            { no: 3, name: "state", kind: "enum", T: () => ["scalar.multisig.exported.v1beta1.MultisigState", MultisigState, "MULTISIG_STATE_"] },
            { no: 4, name: "key", kind: "message", T: () => Key, options: { "gogoproto.nullable": false } },
            { no: 5, name: "expires_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "completed_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 7, name: "grace_period", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 8, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "module_metadata", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "github.com/cosmos/codec/ProtoMarshaler" } }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.state = 0;
        message.expiresAt = "0";
        message.completedAt = "0";
        message.gracePeriod = "0";
        message.module = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* scalar.multisig.v1beta1.MultiSig multi_sig */ 2:
                    message.multiSig = MultiSig.internalBinaryRead(reader, reader.uint32(), options, message.multiSig);
                    break;
                case /* scalar.multisig.exported.v1beta1.MultisigState state */ 3:
                    message.state = reader.int32();
                    break;
                case /* scalar.multisig.v1beta1.Key key */ 4:
                    message.key = Key.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* int64 expires_at */ 5:
                    message.expiresAt = reader.int64().toString();
                    break;
                case /* int64 completed_at */ 6:
                    message.completedAt = reader.int64().toString();
                    break;
                case /* int64 grace_period */ 7:
                    message.gracePeriod = reader.int64().toString();
                    break;
                case /* string module */ 8:
                    message.module = reader.string();
                    break;
                case /* google.protobuf.Any module_metadata */ 9:
                    message.moduleMetadata = Any.internalBinaryRead(reader, reader.uint32(), options, message.moduleMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* scalar.multisig.v1beta1.MultiSig multi_sig = 2; */
        if (message.multiSig)
            MultiSig.internalBinaryWrite(message.multiSig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* scalar.multisig.exported.v1beta1.MultisigState state = 3; */
        if (message.state !== 0)
            writer.tag(3, WireType.Varint).int32(message.state);
        /* scalar.multisig.v1beta1.Key key = 4; */
        if (message.key)
            Key.internalBinaryWrite(message.key, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 expires_at = 5; */
        if (message.expiresAt !== "0")
            writer.tag(5, WireType.Varint).int64(message.expiresAt);
        /* int64 completed_at = 6; */
        if (message.completedAt !== "0")
            writer.tag(6, WireType.Varint).int64(message.completedAt);
        /* int64 grace_period = 7; */
        if (message.gracePeriod !== "0")
            writer.tag(7, WireType.Varint).int64(message.gracePeriod);
        /* string module = 8; */
        if (message.module !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.module);
        /* google.protobuf.Any module_metadata = 9; */
        if (message.moduleMetadata)
            Any.internalBinaryWrite(message.moduleMetadata, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SigningSession
 */
export const SigningSession = new SigningSession$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyEpoch$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeyEpoch", [
            { no: 1, name: "epoch", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.epoch = "0";
        message.chain = "";
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 epoch */ 1:
                    message.epoch = reader.uint64().toString();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* string key_id */ 3:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 epoch = 1; */
        if (message.epoch !== "0")
            writer.tag(1, WireType.Varint).uint64(message.epoch);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* string key_id = 3; */
        if (message.keyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeyEpoch
 */
export const KeyEpoch = new KeyEpoch$Type();
