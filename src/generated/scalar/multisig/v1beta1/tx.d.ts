// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/multisig/v1beta1/tx.proto" (package "scalar.multisig.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message scalar.multisig.v1beta1.StartKeygenRequest
 */
export interface StartKeygenRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.StartKeygenResponse
 */
export interface StartKeygenResponse {
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.SubmitPubKeyRequest
 */
export interface SubmitPubKeyRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
    /**
     * @generated from protobuf field: bytes pub_key = 3;
     */
    pubKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 4;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.SubmitPubKeyResponse
 */
export interface SubmitPubKeyResponse {
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.SubmitSignatureRequest
 */
export interface SubmitSignatureRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 sig_id = 2;
     */
    sigId: string;
    /**
     * @generated from protobuf field: bytes signature = 3;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.SubmitSignatureResponse
 */
export interface SubmitSignatureResponse {
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.RotateKeyRequest
 */
export interface RotateKeyRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.RotateKeyResponse
 */
export interface RotateKeyResponse {
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.KeygenOptOutRequest
 */
export interface KeygenOptOutRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.KeygenOptOutResponse
 */
export interface KeygenOptOutResponse {
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.KeygenOptInRequest
 */
export interface KeygenOptInRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
}
/**
 * @generated from protobuf message scalar.multisig.v1beta1.KeygenOptInResponse
 */
export interface KeygenOptInResponse {
}
declare class StartKeygenRequest$Type extends MessageType<StartKeygenRequest> {
    constructor();
    create(value?: PartialMessage<StartKeygenRequest>): StartKeygenRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartKeygenRequest): StartKeygenRequest;
    internalBinaryWrite(message: StartKeygenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.StartKeygenRequest
 */
export declare const StartKeygenRequest: StartKeygenRequest$Type;
declare class StartKeygenResponse$Type extends MessageType<StartKeygenResponse> {
    constructor();
    create(value?: PartialMessage<StartKeygenResponse>): StartKeygenResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartKeygenResponse): StartKeygenResponse;
    internalBinaryWrite(message: StartKeygenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.StartKeygenResponse
 */
export declare const StartKeygenResponse: StartKeygenResponse$Type;
declare class SubmitPubKeyRequest$Type extends MessageType<SubmitPubKeyRequest> {
    constructor();
    create(value?: PartialMessage<SubmitPubKeyRequest>): SubmitPubKeyRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitPubKeyRequest): SubmitPubKeyRequest;
    internalBinaryWrite(message: SubmitPubKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SubmitPubKeyRequest
 */
export declare const SubmitPubKeyRequest: SubmitPubKeyRequest$Type;
declare class SubmitPubKeyResponse$Type extends MessageType<SubmitPubKeyResponse> {
    constructor();
    create(value?: PartialMessage<SubmitPubKeyResponse>): SubmitPubKeyResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitPubKeyResponse): SubmitPubKeyResponse;
    internalBinaryWrite(message: SubmitPubKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SubmitPubKeyResponse
 */
export declare const SubmitPubKeyResponse: SubmitPubKeyResponse$Type;
declare class SubmitSignatureRequest$Type extends MessageType<SubmitSignatureRequest> {
    constructor();
    create(value?: PartialMessage<SubmitSignatureRequest>): SubmitSignatureRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitSignatureRequest): SubmitSignatureRequest;
    internalBinaryWrite(message: SubmitSignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SubmitSignatureRequest
 */
export declare const SubmitSignatureRequest: SubmitSignatureRequest$Type;
declare class SubmitSignatureResponse$Type extends MessageType<SubmitSignatureResponse> {
    constructor();
    create(value?: PartialMessage<SubmitSignatureResponse>): SubmitSignatureResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitSignatureResponse): SubmitSignatureResponse;
    internalBinaryWrite(message: SubmitSignatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SubmitSignatureResponse
 */
export declare const SubmitSignatureResponse: SubmitSignatureResponse$Type;
declare class RotateKeyRequest$Type extends MessageType<RotateKeyRequest> {
    constructor();
    create(value?: PartialMessage<RotateKeyRequest>): RotateKeyRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RotateKeyRequest): RotateKeyRequest;
    internalBinaryWrite(message: RotateKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.RotateKeyRequest
 */
export declare const RotateKeyRequest: RotateKeyRequest$Type;
declare class RotateKeyResponse$Type extends MessageType<RotateKeyResponse> {
    constructor();
    create(value?: PartialMessage<RotateKeyResponse>): RotateKeyResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RotateKeyResponse): RotateKeyResponse;
    internalBinaryWrite(message: RotateKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.RotateKeyResponse
 */
export declare const RotateKeyResponse: RotateKeyResponse$Type;
declare class KeygenOptOutRequest$Type extends MessageType<KeygenOptOutRequest> {
    constructor();
    create(value?: PartialMessage<KeygenOptOutRequest>): KeygenOptOutRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptOutRequest): KeygenOptOutRequest;
    internalBinaryWrite(message: KeygenOptOutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptOutRequest
 */
export declare const KeygenOptOutRequest: KeygenOptOutRequest$Type;
declare class KeygenOptOutResponse$Type extends MessageType<KeygenOptOutResponse> {
    constructor();
    create(value?: PartialMessage<KeygenOptOutResponse>): KeygenOptOutResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptOutResponse): KeygenOptOutResponse;
    internalBinaryWrite(message: KeygenOptOutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptOutResponse
 */
export declare const KeygenOptOutResponse: KeygenOptOutResponse$Type;
declare class KeygenOptInRequest$Type extends MessageType<KeygenOptInRequest> {
    constructor();
    create(value?: PartialMessage<KeygenOptInRequest>): KeygenOptInRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptInRequest): KeygenOptInRequest;
    internalBinaryWrite(message: KeygenOptInRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptInRequest
 */
export declare const KeygenOptInRequest: KeygenOptInRequest$Type;
declare class KeygenOptInResponse$Type extends MessageType<KeygenOptInResponse> {
    constructor();
    create(value?: PartialMessage<KeygenOptInResponse>): KeygenOptInResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptInResponse): KeygenOptInResponse;
    internalBinaryWrite(message: KeygenOptInResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptInResponse
 */
export declare const KeygenOptInResponse: KeygenOptInResponse$Type;
export {};
