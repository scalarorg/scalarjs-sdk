// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/multisig/v1beta1/service.proto" (package "scalar.multisig.v1beta1", syntax proto3)
// tslint:disable
import type { ParamsResponse } from "./query";
import type { ParamsRequest } from "./query";
import type { KeygenSessionResponse } from "./query";
import type { KeygenSessionRequest } from "./query";
import type { KeyResponse } from "./query";
import type { KeyRequest } from "./query";
import type { NextKeyIDResponse } from "./query";
import type { NextKeyIDRequest } from "./query";
import type { KeyIDResponse } from "./query";
import type { KeyIDRequest } from "./query";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { KeygenOptInResponse } from "./tx";
import type { KeygenOptInRequest } from "./tx";
import type { KeygenOptOutResponse } from "./tx";
import type { KeygenOptOutRequest } from "./tx";
import type { RotateKeyResponse } from "./tx";
import type { RotateKeyRequest } from "./tx";
import type { SubmitSignatureResponse } from "./tx";
import type { SubmitSignatureRequest } from "./tx";
import type { SubmitPubKeyResponse } from "./tx";
import type { SubmitPubKeyRequest } from "./tx";
import type { StartKeygenResponse } from "./tx";
import type { StartKeygenRequest } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the multisig Msg service.
 *
 * @generated from protobuf service scalar.multisig.v1beta1.MsgService
 */
export interface IMsgServiceClient {
    /**
     * @generated from protobuf rpc: StartKeygen(scalar.multisig.v1beta1.StartKeygenRequest) returns (scalar.multisig.v1beta1.StartKeygenResponse);
     */
    startKeygen(input: StartKeygenRequest, options?: RpcOptions): UnaryCall<StartKeygenRequest, StartKeygenResponse>;
    /**
     * @generated from protobuf rpc: SubmitPubKey(scalar.multisig.v1beta1.SubmitPubKeyRequest) returns (scalar.multisig.v1beta1.SubmitPubKeyResponse);
     */
    submitPubKey(input: SubmitPubKeyRequest, options?: RpcOptions): UnaryCall<SubmitPubKeyRequest, SubmitPubKeyResponse>;
    /**
     * @generated from protobuf rpc: SubmitSignature(scalar.multisig.v1beta1.SubmitSignatureRequest) returns (scalar.multisig.v1beta1.SubmitSignatureResponse);
     */
    submitSignature(input: SubmitSignatureRequest, options?: RpcOptions): UnaryCall<SubmitSignatureRequest, SubmitSignatureResponse>;
    /**
     * @generated from protobuf rpc: RotateKey(scalar.multisig.v1beta1.RotateKeyRequest) returns (scalar.multisig.v1beta1.RotateKeyResponse);
     */
    rotateKey(input: RotateKeyRequest, options?: RpcOptions): UnaryCall<RotateKeyRequest, RotateKeyResponse>;
    /**
     * @generated from protobuf rpc: KeygenOptOut(scalar.multisig.v1beta1.KeygenOptOutRequest) returns (scalar.multisig.v1beta1.KeygenOptOutResponse);
     */
    keygenOptOut(input: KeygenOptOutRequest, options?: RpcOptions): UnaryCall<KeygenOptOutRequest, KeygenOptOutResponse>;
    /**
     * @generated from protobuf rpc: KeygenOptIn(scalar.multisig.v1beta1.KeygenOptInRequest) returns (scalar.multisig.v1beta1.KeygenOptInResponse);
     */
    keygenOptIn(input: KeygenOptInRequest, options?: RpcOptions): UnaryCall<KeygenOptInRequest, KeygenOptInResponse>;
}
/**
 * Msg defines the multisig Msg service.
 *
 * @generated from protobuf service scalar.multisig.v1beta1.MsgService
 */
export declare class MsgServiceClient implements IMsgServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: StartKeygen(scalar.multisig.v1beta1.StartKeygenRequest) returns (scalar.multisig.v1beta1.StartKeygenResponse);
     */
    startKeygen(input: StartKeygenRequest, options?: RpcOptions): UnaryCall<StartKeygenRequest, StartKeygenResponse>;
    /**
     * @generated from protobuf rpc: SubmitPubKey(scalar.multisig.v1beta1.SubmitPubKeyRequest) returns (scalar.multisig.v1beta1.SubmitPubKeyResponse);
     */
    submitPubKey(input: SubmitPubKeyRequest, options?: RpcOptions): UnaryCall<SubmitPubKeyRequest, SubmitPubKeyResponse>;
    /**
     * @generated from protobuf rpc: SubmitSignature(scalar.multisig.v1beta1.SubmitSignatureRequest) returns (scalar.multisig.v1beta1.SubmitSignatureResponse);
     */
    submitSignature(input: SubmitSignatureRequest, options?: RpcOptions): UnaryCall<SubmitSignatureRequest, SubmitSignatureResponse>;
    /**
     * @generated from protobuf rpc: RotateKey(scalar.multisig.v1beta1.RotateKeyRequest) returns (scalar.multisig.v1beta1.RotateKeyResponse);
     */
    rotateKey(input: RotateKeyRequest, options?: RpcOptions): UnaryCall<RotateKeyRequest, RotateKeyResponse>;
    /**
     * @generated from protobuf rpc: KeygenOptOut(scalar.multisig.v1beta1.KeygenOptOutRequest) returns (scalar.multisig.v1beta1.KeygenOptOutResponse);
     */
    keygenOptOut(input: KeygenOptOutRequest, options?: RpcOptions): UnaryCall<KeygenOptOutRequest, KeygenOptOutResponse>;
    /**
     * @generated from protobuf rpc: KeygenOptIn(scalar.multisig.v1beta1.KeygenOptInRequest) returns (scalar.multisig.v1beta1.KeygenOptInResponse);
     */
    keygenOptIn(input: KeygenOptInRequest, options?: RpcOptions): UnaryCall<KeygenOptInRequest, KeygenOptInResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service scalar.multisig.v1beta1.QueryService
 */
export interface IQueryServiceClient {
    /**
     * KeyID returns the key ID of a key assigned to a given chain.
     * If no key is assigned, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: KeyID(scalar.multisig.v1beta1.KeyIDRequest) returns (scalar.multisig.v1beta1.KeyIDResponse);
     */
    keyID(input: KeyIDRequest, options?: RpcOptions): UnaryCall<KeyIDRequest, KeyIDResponse>;
    /**
     * NextKeyID returns the key ID assigned for the next rotation on a given
     * chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
     * error.
     *
     * @generated from protobuf rpc: NextKeyID(scalar.multisig.v1beta1.NextKeyIDRequest) returns (scalar.multisig.v1beta1.NextKeyIDResponse);
     */
    nextKeyID(input: NextKeyIDRequest, options?: RpcOptions): UnaryCall<NextKeyIDRequest, NextKeyIDResponse>;
    /**
     * Key returns the key corresponding to a given key ID.
     * If no key is found, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: Key(scalar.multisig.v1beta1.KeyRequest) returns (scalar.multisig.v1beta1.KeyResponse);
     */
    key(input: KeyRequest, options?: RpcOptions): UnaryCall<KeyRequest, KeyResponse>;
    /**
     * KeygenSession returns the keygen session info for a given key ID.
     * If no key is found, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: KeygenSession(scalar.multisig.v1beta1.KeygenSessionRequest) returns (scalar.multisig.v1beta1.KeygenSessionResponse);
     */
    keygenSession(input: KeygenSessionRequest, options?: RpcOptions): UnaryCall<KeygenSessionRequest, KeygenSessionResponse>;
    /**
     * @generated from protobuf rpc: Params(scalar.multisig.v1beta1.ParamsRequest) returns (scalar.multisig.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service scalar.multisig.v1beta1.QueryService
 */
export declare class QueryServiceClient implements IQueryServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * KeyID returns the key ID of a key assigned to a given chain.
     * If no key is assigned, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: KeyID(scalar.multisig.v1beta1.KeyIDRequest) returns (scalar.multisig.v1beta1.KeyIDResponse);
     */
    keyID(input: KeyIDRequest, options?: RpcOptions): UnaryCall<KeyIDRequest, KeyIDResponse>;
    /**
     * NextKeyID returns the key ID assigned for the next rotation on a given
     * chain. If no key rotation is in progress, it returns the grpc NOT_FOUND
     * error.
     *
     * @generated from protobuf rpc: NextKeyID(scalar.multisig.v1beta1.NextKeyIDRequest) returns (scalar.multisig.v1beta1.NextKeyIDResponse);
     */
    nextKeyID(input: NextKeyIDRequest, options?: RpcOptions): UnaryCall<NextKeyIDRequest, NextKeyIDResponse>;
    /**
     * Key returns the key corresponding to a given key ID.
     * If no key is found, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: Key(scalar.multisig.v1beta1.KeyRequest) returns (scalar.multisig.v1beta1.KeyResponse);
     */
    key(input: KeyRequest, options?: RpcOptions): UnaryCall<KeyRequest, KeyResponse>;
    /**
     * KeygenSession returns the keygen session info for a given key ID.
     * If no key is found, it returns the grpc NOT_FOUND error.
     *
     * @generated from protobuf rpc: KeygenSession(scalar.multisig.v1beta1.KeygenSessionRequest) returns (scalar.multisig.v1beta1.KeygenSessionResponse);
     */
    keygenSession(input: KeygenSessionRequest, options?: RpcOptions): UnaryCall<KeygenSessionRequest, KeygenSessionResponse>;
    /**
     * @generated from protobuf rpc: Params(scalar.multisig.v1beta1.ParamsRequest) returns (scalar.multisig.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
