// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/multisig/v1beta1/events.proto" (package "scalar.multisig.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class KeygenStarted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenStarted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 3, name: "participants", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.keyId = "";
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string key_id */ 2:
                    message.keyId = reader.string();
                    break;
                case /* repeated bytes participants */ 3:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string key_id = 2; */
        if (message.keyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyId);
        /* repeated bytes participants = 3; */
        for (let i = 0; i < message.participants.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.participants[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenStarted
 */
export const KeygenStarted = new KeygenStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenCompleted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenCompleted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } }
        ], { "gogoproto.messagename": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string key_id */ 2:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string key_id = 2; */
        if (message.keyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenCompleted
 */
export const KeygenCompleted = new KeygenCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenExpired$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenExpired", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } }
        ], { "gogoproto.messagename": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string key_id */ 2:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string key_id = 2; */
        if (message.keyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenExpired
 */
export const KeygenExpired = new KeygenExpired$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PubKeySubmitted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.PubKeySubmitted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 3, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 4, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.PublicKey" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.keyId = "";
        message.participant = new Uint8Array(0);
        message.pubKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string key_id */ 2:
                    message.keyId = reader.string();
                    break;
                case /* bytes participant */ 3:
                    message.participant = reader.bytes();
                    break;
                case /* bytes pub_key */ 4:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string key_id = 2; */
        if (message.keyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyId);
        /* bytes participant = 3; */
        if (message.participant.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.participant);
        /* bytes pub_key = 4; */
        if (message.pubKey.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.PubKeySubmitted
 */
export const PubKeySubmitted = new PubKeySubmitted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningStarted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.SigningStarted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } },
            { no: 3, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 4, name: "pub_keys", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ }, options: { "gogoproto.castvalue": "github.com/scalarorg/scalar-core/x/multisig/exported.PublicKey" } },
            { no: 5, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.Hash" } },
            { no: 6, name: "requesting_module", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        message.keyId = "";
        message.pubKeys = {};
        message.payloadHash = new Uint8Array(0);
        message.requestingModule = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                case /* string key_id */ 3:
                    message.keyId = reader.string();
                    break;
                case /* map<string, bytes> pub_keys */ 4:
                    this.binaryReadMap4(message.pubKeys, reader, options);
                    break;
                case /* bytes payload_hash */ 5:
                    message.payloadHash = reader.bytes();
                    break;
                case /* string requesting_module */ 6:
                    message.requestingModule = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.multisig.v1beta1.SigningStarted.pub_keys");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        /* string key_id = 3; */
        if (message.keyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyId);
        /* map<string, bytes> pub_keys = 4; */
        for (let k of globalThis.Object.keys(message.pubKeys))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.pubKeys[k]).join();
        /* bytes payload_hash = 5; */
        if (message.payloadHash.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.payloadHash);
        /* string requesting_module = 6; */
        if (message.requestingModule !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.requestingModule);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SigningStarted
 */
export const SigningStarted = new SigningStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningCompleted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.SigningCompleted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SigningCompleted
 */
export const SigningCompleted = new SigningCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningExpired$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.SigningExpired", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SigningExpired
 */
export const SigningExpired = new SigningExpired$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureSubmitted$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.SignatureSubmitted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } },
            { no: 3, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 4, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "Signature" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        message.participant = new Uint8Array(0);
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                case /* bytes participant */ 3:
                    message.participant = reader.bytes();
                    break;
                case /* bytes signature */ 4:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        /* bytes participant = 3; */
        if (message.participant.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.participant);
        /* bytes signature = 4; */
        if (message.signature.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.SignatureSubmitted
 */
export const SignatureSubmitted = new SignatureSubmitted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyAssigned$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeyAssigned", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.chain = "";
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* string key_id */ 3:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* string key_id = 3; */
        if (message.keyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeyAssigned
 */
export const KeyAssigned = new KeyAssigned$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyRotated$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeyRotated", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.chain = "";
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* string key_id */ 3:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* string key_id = 3; */
        if (message.keyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeyRotated
 */
export const KeyRotated = new KeyRotated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenOptOut$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenOptOut", [
            { no: 1, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.participant = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes participant */ 1:
                    message.participant = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes participant = 1; */
        if (message.participant.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.participant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptOut
 */
export const KeygenOptOut = new KeygenOptOut$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenOptIn$Type extends MessageType {
    constructor() {
        super("scalar.multisig.v1beta1.KeygenOptIn", [
            { no: 1, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.participant = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes participant */ 1:
                    message.participant = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes participant = 1; */
        if (message.participant.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.participant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.multisig.v1beta1.KeygenOptIn
 */
export const KeygenOptIn = new KeygenOptIn$Type();
