// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/snapshot/v1beta1/query.proto" (package "scalar.snapshot.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./params";
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorsResponse$Type extends MessageType {
    constructor() {
        super("scalar.snapshot.v1beta1.QueryValidatorsResponse", [
            { no: 1, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryValidatorsResponse_Validator }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validators = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated scalar.snapshot.v1beta1.QueryValidatorsResponse.Validator validators */ 1:
                    message.validators.push(QueryValidatorsResponse_Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated scalar.snapshot.v1beta1.QueryValidatorsResponse.Validator validators = 1; */
        for (let i = 0; i < message.validators.length; i++)
            QueryValidatorsResponse_Validator.internalBinaryWrite(message.validators[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.snapshot.v1beta1.QueryValidatorsResponse
 */
export const QueryValidatorsResponse = new QueryValidatorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorsResponse_TssIllegibilityInfo$Type extends MessageType {
    constructor() {
        super("scalar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo", [
            { no: 1, name: "tombstoned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "jailed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "missed_too_many_blocks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "no_proxy_registered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "tss_suspended", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "proxy_insuficient_funds", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "stale_tss_heartbeat", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tombstoned = false;
        message.jailed = false;
        message.missedTooManyBlocks = false;
        message.noProxyRegistered = false;
        message.tssSuspended = false;
        message.proxyInsuficientFunds = false;
        message.staleTssHeartbeat = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool tombstoned */ 1:
                    message.tombstoned = reader.bool();
                    break;
                case /* bool jailed */ 2:
                    message.jailed = reader.bool();
                    break;
                case /* bool missed_too_many_blocks */ 3:
                    message.missedTooManyBlocks = reader.bool();
                    break;
                case /* bool no_proxy_registered */ 4:
                    message.noProxyRegistered = reader.bool();
                    break;
                case /* bool tss_suspended */ 5:
                    message.tssSuspended = reader.bool();
                    break;
                case /* bool proxy_insuficient_funds */ 6:
                    message.proxyInsuficientFunds = reader.bool();
                    break;
                case /* bool stale_tss_heartbeat */ 7:
                    message.staleTssHeartbeat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool tombstoned = 1; */
        if (message.tombstoned !== false)
            writer.tag(1, WireType.Varint).bool(message.tombstoned);
        /* bool jailed = 2; */
        if (message.jailed !== false)
            writer.tag(2, WireType.Varint).bool(message.jailed);
        /* bool missed_too_many_blocks = 3; */
        if (message.missedTooManyBlocks !== false)
            writer.tag(3, WireType.Varint).bool(message.missedTooManyBlocks);
        /* bool no_proxy_registered = 4; */
        if (message.noProxyRegistered !== false)
            writer.tag(4, WireType.Varint).bool(message.noProxyRegistered);
        /* bool tss_suspended = 5; */
        if (message.tssSuspended !== false)
            writer.tag(5, WireType.Varint).bool(message.tssSuspended);
        /* bool proxy_insuficient_funds = 6; */
        if (message.proxyInsuficientFunds !== false)
            writer.tag(6, WireType.Varint).bool(message.proxyInsuficientFunds);
        /* bool stale_tss_heartbeat = 7; */
        if (message.staleTssHeartbeat !== false)
            writer.tag(7, WireType.Varint).bool(message.staleTssHeartbeat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo
 */
export const QueryValidatorsResponse_TssIllegibilityInfo = new QueryValidatorsResponse_TssIllegibilityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorsResponse_Validator$Type extends MessageType {
    constructor() {
        super("scalar.snapshot.v1beta1.QueryValidatorsResponse.Validator", [
            { no: 1, name: "operator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "moniker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tss_illegibility_info", kind: "message", T: () => QueryValidatorsResponse_TssIllegibilityInfo, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.operatorAddress = "";
        message.moniker = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operator_address */ 1:
                    message.operatorAddress = reader.string();
                    break;
                case /* string moniker */ 2:
                    message.moniker = reader.string();
                    break;
                case /* scalar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo tss_illegibility_info */ 3:
                    message.tssIllegibilityInfo = QueryValidatorsResponse_TssIllegibilityInfo.internalBinaryRead(reader, reader.uint32(), options, message.tssIllegibilityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string operator_address = 1; */
        if (message.operatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.operatorAddress);
        /* string moniker = 2; */
        if (message.moniker !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.moniker);
        /* scalar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo tss_illegibility_info = 3; */
        if (message.tssIllegibilityInfo)
            QueryValidatorsResponse_TssIllegibilityInfo.internalBinaryWrite(message.tssIllegibilityInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.snapshot.v1beta1.QueryValidatorsResponse.Validator
 */
export const QueryValidatorsResponse_Validator = new QueryValidatorsResponse_Validator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsRequest$Type extends MessageType {
    constructor() {
        super("scalar.snapshot.v1beta1.ParamsRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.snapshot.v1beta1.ParamsRequest
 */
export const ParamsRequest = new ParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsResponse$Type extends MessageType {
    constructor() {
        super("scalar.snapshot.v1beta1.ParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.snapshot.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.snapshot.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.snapshot.v1beta1.ParamsResponse
 */
export const ParamsResponse = new ParamsResponse$Type();
