// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/chains/evm/v1beta1/types.proto" (package "scalar.chains.evm.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum scalar.chains.evm.v1beta1.Status
 */
export var Status;
(function (Status) {
    /**
     * these enum values are used for bitwise operations, therefore they need to
     * be powers of 2
     *
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    Status[Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_INITIALIZED = 1;
     */
    Status[Status["INITIALIZED"] = 1] = "INITIALIZED";
    /**
     * @generated from protobuf enum value: STATUS_PENDING = 2;
     */
    Status[Status["PENDING"] = 2] = "PENDING";
    /**
     * @generated from protobuf enum value: STATUS_CONFIRMED = 4;
     */
    Status[Status["CONFIRMED"] = 4] = "CONFIRMED";
})(Status || (Status = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ERC20Deposit$Type extends MessageType {
    constructor() {
        super("scalar.chains.evm.v1beta1.ERC20Deposit", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } },
            { no: 3, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "burner_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 6, name: "log_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.amount = new Uint8Array(0);
        message.asset = "";
        message.destinationChain = "";
        message.burnerAddress = new Uint8Array(0);
        message.logIndex = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* bytes amount */ 2:
                    message.amount = reader.bytes();
                    break;
                case /* string asset */ 3:
                    message.asset = reader.string();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* bytes burner_address */ 5:
                    message.burnerAddress = reader.bytes();
                    break;
                case /* uint64 log_index */ 6:
                    message.logIndex = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* bytes amount = 2; */
        if (message.amount.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.amount);
        /* string asset = 3; */
        if (message.asset !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.asset);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* bytes burner_address = 5; */
        if (message.burnerAddress.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.burnerAddress);
        /* uint64 log_index = 6; */
        if (message.logIndex !== "0")
            writer.tag(6, WireType.Varint).uint64(message.logIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.evm.v1beta1.ERC20Deposit
 */
export const ERC20Deposit = new ERC20Deposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ERC20TokenMetadata$Type extends MessageType {
    constructor() {
        super("scalar.chains.evm.v1beta1.ERC20TokenMetadata", [
            { no: 1, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.customname": "ChainID" } },
            { no: 3, name: "details", kind: "message", T: () => TokenDetails, options: { "gogoproto.nullable": false } },
            { no: 4, name: "token_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 5, name: "tx_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } },
            { no: 7, name: "status", kind: "enum", T: () => ["scalar.chains.evm.v1beta1.Status", Status, "STATUS_"] },
            { no: 8, name: "is_external", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "burner_code", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.asset = "";
        message.chainId = new Uint8Array(0);
        message.tokenAddress = "";
        message.txHash = "";
        message.status = 0;
        message.isExternal = false;
        message.burnerCode = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string asset */ 1:
                    message.asset = reader.string();
                    break;
                case /* bytes chain_id */ 2:
                    message.chainId = reader.bytes();
                    break;
                case /* scalar.chains.evm.v1beta1.TokenDetails details */ 3:
                    message.details = TokenDetails.internalBinaryRead(reader, reader.uint32(), options, message.details);
                    break;
                case /* string token_address */ 4:
                    message.tokenAddress = reader.string();
                    break;
                case /* string tx_hash */ 5:
                    message.txHash = reader.string();
                    break;
                case /* scalar.chains.evm.v1beta1.Status status */ 7:
                    message.status = reader.int32();
                    break;
                case /* bool is_external */ 8:
                    message.isExternal = reader.bool();
                    break;
                case /* bytes burner_code */ 9:
                    message.burnerCode = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string asset = 1; */
        if (message.asset !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.asset);
        /* bytes chain_id = 2; */
        if (message.chainId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.chainId);
        /* scalar.chains.evm.v1beta1.TokenDetails details = 3; */
        if (message.details)
            TokenDetails.internalBinaryWrite(message.details, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string token_address = 4; */
        if (message.tokenAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenAddress);
        /* string tx_hash = 5; */
        if (message.txHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.txHash);
        /* scalar.chains.evm.v1beta1.Status status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* bool is_external = 8; */
        if (message.isExternal !== false)
            writer.tag(8, WireType.Varint).bool(message.isExternal);
        /* bytes burner_code = 9; */
        if (message.burnerCode.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.burnerCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.evm.v1beta1.ERC20TokenMetadata
 */
export const ERC20TokenMetadata = new ERC20TokenMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenDetails$Type extends MessageType {
    constructor() {
        super("scalar.chains.evm.v1beta1.TokenDetails", [
            { no: 1, name: "token_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.casttype": "uint8" } },
            { no: 4, name: "capacity", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tokenName = "";
        message.symbol = "";
        message.decimals = 0;
        message.capacity = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_name */ 1:
                    message.tokenName = reader.string();
                    break;
                case /* string symbol */ 2:
                    message.symbol = reader.string();
                    break;
                case /* uint32 decimals */ 3:
                    message.decimals = reader.uint32();
                    break;
                case /* bytes capacity */ 4:
                    message.capacity = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string token_name = 1; */
        if (message.tokenName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenName);
        /* string symbol = 2; */
        if (message.symbol !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.symbol);
        /* uint32 decimals = 3; */
        if (message.decimals !== 0)
            writer.tag(3, WireType.Varint).uint32(message.decimals);
        /* bytes capacity = 4; */
        if (message.capacity.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.capacity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.evm.v1beta1.TokenDetails
 */
export const TokenDetails = new TokenDetails$Type();
