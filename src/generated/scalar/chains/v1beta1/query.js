// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/chains/v1beta1/query.proto" (package "scalar.chains.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Proof } from "./types";
import { BatchedCommandsStatus } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class BatchedCommandsRequest$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.BatchedCommandsRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.BatchedCommandsRequest
 */
export const BatchedCommandsRequest = new BatchedCommandsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BatchedCommandsResponse$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.BatchedCommandsResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["scalar.chains.v1beta1.BatchedCommandsStatus", BatchedCommandsStatus, "BATCHED_COMMANDS_STATUS_"] },
            { no: 4, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 6, name: "execute_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "prev_batched_commands_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PrevBatchedCommandsID" } },
            { no: 8, name: "command_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "CommandIDs" } },
            { no: 9, name: "proof", kind: "message", T: () => Proof }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.data = "";
        message.status = 0;
        message.keyId = "";
        message.executeData = "";
        message.prevBatchedCommandsId = "";
        message.commandIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string data */ 2:
                    message.data = reader.string();
                    break;
                case /* scalar.chains.v1beta1.BatchedCommandsStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string key_id */ 4:
                    message.keyId = reader.string();
                    break;
                case /* string execute_data */ 6:
                    message.executeData = reader.string();
                    break;
                case /* string prev_batched_commands_id */ 7:
                    message.prevBatchedCommandsId = reader.string();
                    break;
                case /* repeated string command_ids */ 8:
                    message.commandIds.push(reader.string());
                    break;
                case /* scalar.chains.v1beta1.Proof proof */ 9:
                    message.proof = Proof.internalBinaryRead(reader, reader.uint32(), options, message.proof);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string data = 2; */
        if (message.data !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.data);
        /* scalar.chains.v1beta1.BatchedCommandsStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string key_id = 4; */
        if (message.keyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.keyId);
        /* string execute_data = 6; */
        if (message.executeData !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.executeData);
        /* string prev_batched_commands_id = 7; */
        if (message.prevBatchedCommandsId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.prevBatchedCommandsId);
        /* repeated string command_ids = 8; */
        for (let i = 0; i < message.commandIds.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.commandIds[i]);
        /* scalar.chains.v1beta1.Proof proof = 9; */
        if (message.proof)
            Proof.internalBinaryWrite(message.proof, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.BatchedCommandsResponse
 */
export const BatchedCommandsResponse = new BatchedCommandsResponse$Type();
