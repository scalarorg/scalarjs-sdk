// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/chains/v1beta1/params.proto" (package "scalar.chains.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Threshold } from "../../utils/v1beta1/threshold";
import { NetworkKind } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.Params", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "network_kind", kind: "enum", T: () => ["scalar.chains.v1beta1.NetworkKind", NetworkKind, "NETWORK_KIND_"] },
            { no: 4, name: "revote_locking_period", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "chain_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 6, name: "voting_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 7, name: "min_voter_count", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 8, name: "voting_grace_period", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 9, name: "end_blocker_limit", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 10, name: "transfer_limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.confirmationHeight = "0";
        message.networkKind = 0;
        message.revoteLockingPeriod = "0";
        message.chainId = new Uint8Array(0);
        message.minVoterCount = "0";
        message.votingGracePeriod = "0";
        message.endBlockerLimit = "0";
        message.transferLimit = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* uint64 confirmation_height */ 2:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* scalar.chains.v1beta1.NetworkKind network_kind */ 3:
                    message.networkKind = reader.int32();
                    break;
                case /* int64 revote_locking_period */ 4:
                    message.revoteLockingPeriod = reader.int64().toString();
                    break;
                case /* bytes chain_id */ 5:
                    message.chainId = reader.bytes();
                    break;
                case /* scalar.utils.v1beta1.Threshold voting_threshold */ 6:
                    message.votingThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.votingThreshold);
                    break;
                case /* int64 min_voter_count */ 7:
                    message.minVoterCount = reader.int64().toString();
                    break;
                case /* int64 voting_grace_period */ 8:
                    message.votingGracePeriod = reader.int64().toString();
                    break;
                case /* int64 end_blocker_limit */ 9:
                    message.endBlockerLimit = reader.int64().toString();
                    break;
                case /* uint64 transfer_limit */ 10:
                    message.transferLimit = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* uint64 confirmation_height = 2; */
        if (message.confirmationHeight !== "0")
            writer.tag(2, WireType.Varint).uint64(message.confirmationHeight);
        /* scalar.chains.v1beta1.NetworkKind network_kind = 3; */
        if (message.networkKind !== 0)
            writer.tag(3, WireType.Varint).int32(message.networkKind);
        /* int64 revote_locking_period = 4; */
        if (message.revoteLockingPeriod !== "0")
            writer.tag(4, WireType.Varint).int64(message.revoteLockingPeriod);
        /* bytes chain_id = 5; */
        if (message.chainId.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.chainId);
        /* scalar.utils.v1beta1.Threshold voting_threshold = 6; */
        if (message.votingThreshold)
            Threshold.internalBinaryWrite(message.votingThreshold, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 min_voter_count = 7; */
        if (message.minVoterCount !== "0")
            writer.tag(7, WireType.Varint).int64(message.minVoterCount);
        /* int64 voting_grace_period = 8; */
        if (message.votingGracePeriod !== "0")
            writer.tag(8, WireType.Varint).int64(message.votingGracePeriod);
        /* int64 end_blocker_limit = 9; */
        if (message.endBlockerLimit !== "0")
            writer.tag(9, WireType.Varint).int64(message.endBlockerLimit);
        /* uint64 transfer_limit = 10; */
        if (message.transferLimit !== "0")
            writer.tag(10, WireType.Varint).uint64(message.transferLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.Params
 */
export const Params = new Params$Type();
