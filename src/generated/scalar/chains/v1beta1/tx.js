// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/chains/v1beta1/tx.proto" (package "scalar.chains.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PollMapping } from "./poll";
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmSourceTxsRequest$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.ConfirmSourceTxsRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "tx_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxIDs" } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.txIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* repeated bytes tx_ids */ 3:
                    message.txIds.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* repeated bytes tx_ids = 3; */
        for (let i = 0; i < message.txIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.txIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.ConfirmSourceTxsRequest
 */
export const ConfirmSourceTxsRequest = new ConfirmSourceTxsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmSourceTxsResponse$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.ConfirmSourceTxsResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.ConfirmSourceTxsResponse
 */
export const ConfirmSourceTxsResponse = new ConfirmSourceTxsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDestTxsRequest$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.ConfirmDestTxsRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "tx_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxIDs" } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.txIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* repeated bytes tx_ids */ 3:
                    message.txIds.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* repeated bytes tx_ids = 3; */
        for (let i = 0; i < message.txIds.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.txIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.ConfirmDestTxsRequest
 */
export const ConfirmDestTxsRequest = new ConfirmDestTxsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDestTxsResponse$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.ConfirmDestTxsResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.ConfirmDestTxsResponse
 */
export const ConfirmDestTxsResponse = new ConfirmDestTxsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventConfirmSourceTxsStarted$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.EventConfirmSourceTxsStarted", [
            { no: 1, name: "poll_mappings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PollMapping, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "poll_mappings,omitempty" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "participants", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pollMappings = [];
        message.chain = "";
        message.confirmationHeight = "0";
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated scalar.chains.v1beta1.PollMapping poll_mappings */ 1:
                    message.pollMappings.push(PollMapping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 confirmation_height */ 3:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* repeated bytes participants */ 4:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated scalar.chains.v1beta1.PollMapping poll_mappings = 1; */
        for (let i = 0; i < message.pollMappings.length; i++)
            PollMapping.internalBinaryWrite(message.pollMappings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 confirmation_height = 3; */
        if (message.confirmationHeight !== "0")
            writer.tag(3, WireType.Varint).uint64(message.confirmationHeight);
        /* repeated bytes participants = 4; */
        for (let i = 0; i < message.participants.length; i++)
            writer.tag(4, WireType.LengthDelimited).bytes(message.participants[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.EventConfirmSourceTxsStarted
 */
export const EventConfirmSourceTxsStarted = new EventConfirmSourceTxsStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventConfirmDestTxsStarted$Type extends MessageType {
    constructor() {
        super("scalar.chains.v1beta1.EventConfirmDestTxsStarted", [
            { no: 1, name: "poll_mappings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PollMapping, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "poll_mappings,omitempty" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "participants", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pollMappings = [];
        message.chain = "";
        message.confirmationHeight = "0";
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated scalar.chains.v1beta1.PollMapping poll_mappings */ 1:
                    message.pollMappings.push(PollMapping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 confirmation_height */ 4:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* repeated bytes participants */ 5:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated scalar.chains.v1beta1.PollMapping poll_mappings = 1; */
        for (let i = 0; i < message.pollMappings.length; i++)
            PollMapping.internalBinaryWrite(message.pollMappings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 confirmation_height = 4; */
        if (message.confirmationHeight !== "0")
            writer.tag(4, WireType.Varint).uint64(message.confirmationHeight);
        /* repeated bytes participants = 5; */
        for (let i = 0; i < message.participants.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.participants[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.chains.v1beta1.EventConfirmDestTxsStarted
 */
export const EventConfirmDestTxsStarted = new EventConfirmDestTxsStarted$Type();
