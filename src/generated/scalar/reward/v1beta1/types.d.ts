// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/reward/v1beta1/types.proto" (package "scalar.reward.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message scalar.reward.v1beta1.Pool
 */
export interface Pool {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated scalar.reward.v1beta1.Pool.Reward rewards = 2;
     */
    rewards: Pool_Reward[];
}
/**
 * @generated from protobuf message scalar.reward.v1beta1.Pool.Reward
 */
export interface Pool_Reward {
    /**
     * @generated from protobuf field: bytes validator = 1;
     */
    validator: Uint8Array;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 2;
     */
    coins: Coin[];
}
/**
 * @generated from protobuf message scalar.reward.v1beta1.Refund
 */
export interface Refund {
    /**
     * @generated from protobuf field: bytes payer = 1;
     */
    payer: Uint8Array;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin fees = 2;
     */
    fees: Coin[];
}
declare class Pool$Type extends MessageType<Pool> {
    constructor();
    create(value?: PartialMessage<Pool>): Pool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pool): Pool;
    internalBinaryWrite(message: Pool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.reward.v1beta1.Pool
 */
export declare const Pool: Pool$Type;
declare class Pool_Reward$Type extends MessageType<Pool_Reward> {
    constructor();
    create(value?: PartialMessage<Pool_Reward>): Pool_Reward;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pool_Reward): Pool_Reward;
    internalBinaryWrite(message: Pool_Reward, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.reward.v1beta1.Pool.Reward
 */
export declare const Pool_Reward: Pool_Reward$Type;
declare class Refund$Type extends MessageType<Refund> {
    constructor();
    create(value?: PartialMessage<Refund>): Refund;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Refund): Refund;
    internalBinaryWrite(message: Refund, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.reward.v1beta1.Refund
 */
export declare const Refund: Refund$Type;
export {};
