// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/utils/v1beta1/bitmap.proto" (package "scalar.utils.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class Bitmap$Type extends MessageType {
    constructor() {
        super("scalar.utils.v1beta1.Bitmap", [
            { no: 2, name: "true_count_cache", kind: "message", T: () => CircularBuffer }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* scalar.utils.v1beta1.CircularBuffer true_count_cache */ 2:
                    message.trueCountCache = CircularBuffer.internalBinaryRead(reader, reader.uint32(), options, message.trueCountCache);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* scalar.utils.v1beta1.CircularBuffer true_count_cache = 2; */
        if (message.trueCountCache)
            CircularBuffer.internalBinaryWrite(message.trueCountCache, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.utils.v1beta1.Bitmap
 */
export const Bitmap = new Bitmap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CircularBuffer$Type extends MessageType {
    constructor() {
        super("scalar.utils.v1beta1.CircularBuffer", [
            { no: 1, name: "cumulative_value", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "max_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cumulativeValue = [];
        message.index = 0;
        message.maxSize = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 cumulative_value */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cumulativeValue.push(reader.uint64().toString());
                    else
                        message.cumulativeValue.push(reader.uint64().toString());
                    break;
                case /* int32 index */ 2:
                    message.index = reader.int32();
                    break;
                case /* int32 max_size */ 3:
                    message.maxSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint64 cumulative_value = 1; */
        if (message.cumulativeValue.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.cumulativeValue.length; i++)
                writer.uint64(message.cumulativeValue[i]);
            writer.join();
        }
        /* int32 index = 2; */
        if (message.index !== 0)
            writer.tag(2, WireType.Varint).int32(message.index);
        /* int32 max_size = 3; */
        if (message.maxSize !== 0)
            writer.tag(3, WireType.Varint).int32(message.maxSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.utils.v1beta1.CircularBuffer
 */
export const CircularBuffer = new CircularBuffer$Type();
