// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/tofnd/v1beta1/tofnd.proto" (package "tofnd", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tofnd.RecoverRequest
 */
export interface RecoverRequest {
    /**
     * @generated from protobuf field: tofnd.KeygenInit keygen_init = 1;
     */
    keygenInit?: KeygenInit;
    /**
     * @generated from protobuf field: tofnd.KeygenOutput keygen_output = 2;
     */
    keygenOutput?: KeygenOutput;
}
/**
 * @generated from protobuf message tofnd.RecoverResponse
 */
export interface RecoverResponse {
    /**
     * @generated from protobuf field: tofnd.RecoverResponse.Response response = 1;
     */
    response: RecoverResponse_Response;
}
/**
 * @generated from protobuf enum tofnd.RecoverResponse.Response
 */
export declare enum RecoverResponse_Response {
    /**
     * @generated from protobuf enum value: RESPONSE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RESPONSE_SUCCESS = 1;
     */
    SUCCESS = 1,
    /**
     * @generated from protobuf enum value: RESPONSE_FAIL = 2;
     */
    FAIL = 2
}
/**
 * Keygen's success response
 *
 * @generated from protobuf message tofnd.KeygenOutput
 */
export interface KeygenOutput {
    /**
     * @generated from protobuf field: bytes pub_key = 1;
     */
    pubKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes group_recover_info = 2;
     */
    groupRecoverInfo: Uint8Array;
    /**
     * @generated from protobuf field: bytes private_recover_info = 3;
     */
    privateRecoverInfo: Uint8Array;
}
/**
 * @generated from protobuf message tofnd.MessageIn
 */
export interface MessageIn {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "keygenInit";
        /**
         * @generated from protobuf field: tofnd.KeygenInit keygen_init = 1;
         */
        keygenInit: KeygenInit;
    } | {
        oneofKind: "signInit";
        /**
         * @generated from protobuf field: tofnd.SignInit sign_init = 2;
         */
        signInit: SignInit;
    } | {
        oneofKind: "traffic";
        /**
         * @generated from protobuf field: tofnd.TrafficIn traffic = 3;
         */
        traffic: TrafficIn;
    } | {
        oneofKind: "abort";
        /**
         * @generated from protobuf field: bool abort = 4;
         */
        abort: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message tofnd.MessageOut
 */
export interface MessageOut {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "traffic";
        /**
         * @generated from protobuf field: tofnd.TrafficOut traffic = 1;
         */
        traffic: TrafficOut;
    } | {
        oneofKind: "keygenResult";
        /**
         * @generated from protobuf field: tofnd.MessageOut.KeygenResult keygen_result = 2;
         */
        keygenResult: MessageOut_KeygenResult;
    } | {
        oneofKind: "signResult";
        /**
         * @generated from protobuf field: tofnd.MessageOut.SignResult sign_result = 3;
         */
        signResult: MessageOut_SignResult;
    } | {
        oneofKind: "needRecover";
        /**
         * @generated from protobuf field: bool need_recover = 4;
         */
        needRecover: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Keygen's response types
 *
 * @generated from protobuf message tofnd.MessageOut.KeygenResult
 */
export interface MessageOut_KeygenResult {
    /**
     * @generated from protobuf oneof: keygen_result_data
     */
    keygenResultData: {
        oneofKind: "data";
        /**
         * @generated from protobuf field: tofnd.KeygenOutput data = 1;
         */
        data: KeygenOutput;
    } | {
        oneofKind: "criminals";
        /**
         * @generated from protobuf field: tofnd.MessageOut.CriminalList criminals = 2;
         */
        criminals: MessageOut_CriminalList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Sign's response types
 *
 * @generated from protobuf message tofnd.MessageOut.SignResult
 */
export interface MessageOut_SignResult {
    /**
     * @generated from protobuf oneof: sign_result_data
     */
    signResultData: {
        oneofKind: "signature";
        /**
         * @generated from protobuf field: bytes signature = 1;
         */
        signature: Uint8Array;
    } | {
        oneofKind: "criminals";
        /**
         * @generated from protobuf field: tofnd.MessageOut.CriminalList criminals = 2;
         */
        criminals: MessageOut_CriminalList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Keygen/Sign failure response message
 *
 * @generated from protobuf message tofnd.MessageOut.CriminalList
 */
export interface MessageOut_CriminalList {
    /**
     * @generated from protobuf field: repeated tofnd.MessageOut.CriminalList.Criminal criminals = 1;
     */
    criminals: MessageOut_CriminalList_Criminal[];
}
/**
 * @generated from protobuf message tofnd.MessageOut.CriminalList.Criminal
 */
export interface MessageOut_CriminalList_Criminal {
    /**
     * @generated from protobuf field: string party_uid = 1;
     */
    partyUid: string;
    /**
     * @generated from protobuf field: tofnd.MessageOut.CriminalList.Criminal.CrimeType crime_type = 2;
     */
    crimeType: MessageOut_CriminalList_Criminal_CrimeType;
}
/**
 * @generated from protobuf enum tofnd.MessageOut.CriminalList.Criminal.CrimeType
 */
export declare enum MessageOut_CriminalList_Criminal_CrimeType {
    /**
     * @generated from protobuf enum value: CRIME_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CRIME_TYPE_NON_MALICIOUS = 1;
     */
    NON_MALICIOUS = 1,
    /**
     * @generated from protobuf enum value: CRIME_TYPE_MALICIOUS = 2;
     */
    MALICIOUS = 2
}
/**
 * @generated from protobuf message tofnd.TrafficIn
 */
export interface TrafficIn {
    /**
     * @generated from protobuf field: string from_party_uid = 1;
     */
    fromPartyUid: string;
    /**
     * @generated from protobuf field: bytes payload = 2;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: bool is_broadcast = 3;
     */
    isBroadcast: boolean;
}
/**
 * @generated from protobuf message tofnd.TrafficOut
 */
export interface TrafficOut {
    /**
     * @generated from protobuf field: string to_party_uid = 1;
     */
    toPartyUid: string;
    /**
     * @generated from protobuf field: bytes payload = 2;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: bool is_broadcast = 3;
     */
    isBroadcast: boolean;
}
/**
 * @generated from protobuf message tofnd.KeygenInit
 */
export interface KeygenInit {
    /**
     * @generated from protobuf field: string new_key_uid = 1;
     */
    newKeyUid: string;
    /**
     * @generated from protobuf field: repeated string party_uids = 2;
     */
    partyUids: string[];
    /**
     * @generated from protobuf field: repeated uint32 party_share_counts = 5;
     */
    partyShareCounts: number[];
    /**
     * @generated from protobuf field: uint32 my_party_index = 3;
     */
    myPartyIndex: number;
    /**
     * @generated from protobuf field: uint32 threshold = 4;
     */
    threshold: number;
}
/**
 * @generated from protobuf message tofnd.SignInit
 */
export interface SignInit {
    /**
     * @generated from protobuf field: string new_sig_uid = 1;
     */
    newSigUid: string;
    /**
     * @generated from protobuf field: string key_uid = 2;
     */
    keyUid: string;
    /**
     * @generated from protobuf field: repeated string party_uids = 3;
     */
    partyUids: string[];
    /**
     * @generated from protobuf field: bytes message_to_sign = 4;
     */
    messageToSign: Uint8Array;
}
declare class RecoverRequest$Type extends MessageType<RecoverRequest> {
    constructor();
    create(value?: PartialMessage<RecoverRequest>): RecoverRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecoverRequest): RecoverRequest;
    internalBinaryWrite(message: RecoverRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.RecoverRequest
 */
export declare const RecoverRequest: RecoverRequest$Type;
declare class RecoverResponse$Type extends MessageType<RecoverResponse> {
    constructor();
    create(value?: PartialMessage<RecoverResponse>): RecoverResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecoverResponse): RecoverResponse;
    internalBinaryWrite(message: RecoverResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.RecoverResponse
 */
export declare const RecoverResponse: RecoverResponse$Type;
declare class KeygenOutput$Type extends MessageType<KeygenOutput> {
    constructor();
    create(value?: PartialMessage<KeygenOutput>): KeygenOutput;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOutput): KeygenOutput;
    internalBinaryWrite(message: KeygenOutput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenOutput
 */
export declare const KeygenOutput: KeygenOutput$Type;
declare class MessageIn$Type extends MessageType<MessageIn> {
    constructor();
    create(value?: PartialMessage<MessageIn>): MessageIn;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageIn): MessageIn;
    internalBinaryWrite(message: MessageIn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageIn
 */
export declare const MessageIn: MessageIn$Type;
declare class MessageOut$Type extends MessageType<MessageOut> {
    constructor();
    create(value?: PartialMessage<MessageOut>): MessageOut;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOut): MessageOut;
    internalBinaryWrite(message: MessageOut, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut
 */
export declare const MessageOut: MessageOut$Type;
declare class MessageOut_KeygenResult$Type extends MessageType<MessageOut_KeygenResult> {
    constructor();
    create(value?: PartialMessage<MessageOut_KeygenResult>): MessageOut_KeygenResult;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOut_KeygenResult): MessageOut_KeygenResult;
    internalBinaryWrite(message: MessageOut_KeygenResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.KeygenResult
 */
export declare const MessageOut_KeygenResult: MessageOut_KeygenResult$Type;
declare class MessageOut_SignResult$Type extends MessageType<MessageOut_SignResult> {
    constructor();
    create(value?: PartialMessage<MessageOut_SignResult>): MessageOut_SignResult;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOut_SignResult): MessageOut_SignResult;
    internalBinaryWrite(message: MessageOut_SignResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.SignResult
 */
export declare const MessageOut_SignResult: MessageOut_SignResult$Type;
declare class MessageOut_CriminalList$Type extends MessageType<MessageOut_CriminalList> {
    constructor();
    create(value?: PartialMessage<MessageOut_CriminalList>): MessageOut_CriminalList;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOut_CriminalList): MessageOut_CriminalList;
    internalBinaryWrite(message: MessageOut_CriminalList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.CriminalList
 */
export declare const MessageOut_CriminalList: MessageOut_CriminalList$Type;
declare class MessageOut_CriminalList_Criminal$Type extends MessageType<MessageOut_CriminalList_Criminal> {
    constructor();
    create(value?: PartialMessage<MessageOut_CriminalList_Criminal>): MessageOut_CriminalList_Criminal;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOut_CriminalList_Criminal): MessageOut_CriminalList_Criminal;
    internalBinaryWrite(message: MessageOut_CriminalList_Criminal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.CriminalList.Criminal
 */
export declare const MessageOut_CriminalList_Criminal: MessageOut_CriminalList_Criminal$Type;
declare class TrafficIn$Type extends MessageType<TrafficIn> {
    constructor();
    create(value?: PartialMessage<TrafficIn>): TrafficIn;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrafficIn): TrafficIn;
    internalBinaryWrite(message: TrafficIn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.TrafficIn
 */
export declare const TrafficIn: TrafficIn$Type;
declare class TrafficOut$Type extends MessageType<TrafficOut> {
    constructor();
    create(value?: PartialMessage<TrafficOut>): TrafficOut;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrafficOut): TrafficOut;
    internalBinaryWrite(message: TrafficOut, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.TrafficOut
 */
export declare const TrafficOut: TrafficOut$Type;
declare class KeygenInit$Type extends MessageType<KeygenInit> {
    constructor();
    create(value?: PartialMessage<KeygenInit>): KeygenInit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenInit): KeygenInit;
    internalBinaryWrite(message: KeygenInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenInit
 */
export declare const KeygenInit: KeygenInit$Type;
declare class SignInit$Type extends MessageType<SignInit> {
    constructor();
    create(value?: PartialMessage<SignInit>): SignInit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignInit): SignInit;
    internalBinaryWrite(message: SignInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message tofnd.SignInit
 */
export declare const SignInit: SignInit$Type;
export {};
