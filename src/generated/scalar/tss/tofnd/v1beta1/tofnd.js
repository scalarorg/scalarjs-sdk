// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/tofnd/v1beta1/tofnd.proto" (package "tofnd", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum tofnd.RecoverResponse.Response
 */
export var RecoverResponse_Response;
(function (RecoverResponse_Response) {
    /**
     * @generated from protobuf enum value: RESPONSE_UNSPECIFIED = 0;
     */
    RecoverResponse_Response[RecoverResponse_Response["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: RESPONSE_SUCCESS = 1;
     */
    RecoverResponse_Response[RecoverResponse_Response["SUCCESS"] = 1] = "SUCCESS";
    /**
     * @generated from protobuf enum value: RESPONSE_FAIL = 2;
     */
    RecoverResponse_Response[RecoverResponse_Response["FAIL"] = 2] = "FAIL";
})(RecoverResponse_Response || (RecoverResponse_Response = {}));
/**
 * @generated from protobuf enum tofnd.MessageOut.CriminalList.Criminal.CrimeType
 */
export var MessageOut_CriminalList_Criminal_CrimeType;
(function (MessageOut_CriminalList_Criminal_CrimeType) {
    /**
     * @generated from protobuf enum value: CRIME_TYPE_UNSPECIFIED = 0;
     */
    MessageOut_CriminalList_Criminal_CrimeType[MessageOut_CriminalList_Criminal_CrimeType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: CRIME_TYPE_NON_MALICIOUS = 1;
     */
    MessageOut_CriminalList_Criminal_CrimeType[MessageOut_CriminalList_Criminal_CrimeType["NON_MALICIOUS"] = 1] = "NON_MALICIOUS";
    /**
     * @generated from protobuf enum value: CRIME_TYPE_MALICIOUS = 2;
     */
    MessageOut_CriminalList_Criminal_CrimeType[MessageOut_CriminalList_Criminal_CrimeType["MALICIOUS"] = 2] = "MALICIOUS";
})(MessageOut_CriminalList_Criminal_CrimeType || (MessageOut_CriminalList_Criminal_CrimeType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class RecoverRequest$Type extends MessageType {
    constructor() {
        super("tofnd.RecoverRequest", [
            { no: 1, name: "keygen_init", kind: "message", T: () => KeygenInit },
            { no: 2, name: "keygen_output", kind: "message", T: () => KeygenOutput }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tofnd.KeygenInit keygen_init */ 1:
                    message.keygenInit = KeygenInit.internalBinaryRead(reader, reader.uint32(), options, message.keygenInit);
                    break;
                case /* tofnd.KeygenOutput keygen_output */ 2:
                    message.keygenOutput = KeygenOutput.internalBinaryRead(reader, reader.uint32(), options, message.keygenOutput);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tofnd.KeygenInit keygen_init = 1; */
        if (message.keygenInit)
            KeygenInit.internalBinaryWrite(message.keygenInit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.KeygenOutput keygen_output = 2; */
        if (message.keygenOutput)
            KeygenOutput.internalBinaryWrite(message.keygenOutput, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.RecoverRequest
 */
export const RecoverRequest = new RecoverRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecoverResponse$Type extends MessageType {
    constructor() {
        super("tofnd.RecoverResponse", [
            { no: 1, name: "response", kind: "enum", T: () => ["tofnd.RecoverResponse.Response", RecoverResponse_Response, "RESPONSE_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.response = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tofnd.RecoverResponse.Response response */ 1:
                    message.response = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tofnd.RecoverResponse.Response response = 1; */
        if (message.response !== 0)
            writer.tag(1, WireType.Varint).int32(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.RecoverResponse
 */
export const RecoverResponse = new RecoverResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenOutput$Type extends MessageType {
    constructor() {
        super("tofnd.KeygenOutput", [
            { no: 1, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "group_recover_info", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "private_recover_info", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pubKey = new Uint8Array(0);
        message.groupRecoverInfo = new Uint8Array(0);
        message.privateRecoverInfo = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes pub_key */ 1:
                    message.pubKey = reader.bytes();
                    break;
                case /* bytes group_recover_info */ 2:
                    message.groupRecoverInfo = reader.bytes();
                    break;
                case /* bytes private_recover_info */ 3:
                    message.privateRecoverInfo = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes pub_key = 1; */
        if (message.pubKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.pubKey);
        /* bytes group_recover_info = 2; */
        if (message.groupRecoverInfo.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.groupRecoverInfo);
        /* bytes private_recover_info = 3; */
        if (message.privateRecoverInfo.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.privateRecoverInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenOutput
 */
export const KeygenOutput = new KeygenOutput$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageIn$Type extends MessageType {
    constructor() {
        super("tofnd.MessageIn", [
            { no: 1, name: "keygen_init", kind: "message", oneof: "data", T: () => KeygenInit },
            { no: 2, name: "sign_init", kind: "message", oneof: "data", T: () => SignInit },
            { no: 3, name: "traffic", kind: "message", oneof: "data", T: () => TrafficIn },
            { no: 4, name: "abort", kind: "scalar", oneof: "data", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tofnd.KeygenInit keygen_init */ 1:
                    message.data = {
                        oneofKind: "keygenInit",
                        keygenInit: KeygenInit.internalBinaryRead(reader, reader.uint32(), options, message.data.keygenInit)
                    };
                    break;
                case /* tofnd.SignInit sign_init */ 2:
                    message.data = {
                        oneofKind: "signInit",
                        signInit: SignInit.internalBinaryRead(reader, reader.uint32(), options, message.data.signInit)
                    };
                    break;
                case /* tofnd.TrafficIn traffic */ 3:
                    message.data = {
                        oneofKind: "traffic",
                        traffic: TrafficIn.internalBinaryRead(reader, reader.uint32(), options, message.data.traffic)
                    };
                    break;
                case /* bool abort */ 4:
                    message.data = {
                        oneofKind: "abort",
                        abort: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tofnd.KeygenInit keygen_init = 1; */
        if (message.data.oneofKind === "keygenInit")
            KeygenInit.internalBinaryWrite(message.data.keygenInit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.SignInit sign_init = 2; */
        if (message.data.oneofKind === "signInit")
            SignInit.internalBinaryWrite(message.data.signInit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.TrafficIn traffic = 3; */
        if (message.data.oneofKind === "traffic")
            TrafficIn.internalBinaryWrite(message.data.traffic, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool abort = 4; */
        if (message.data.oneofKind === "abort")
            writer.tag(4, WireType.Varint).bool(message.data.abort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageIn
 */
export const MessageIn = new MessageIn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOut$Type extends MessageType {
    constructor() {
        super("tofnd.MessageOut", [
            { no: 1, name: "traffic", kind: "message", oneof: "data", T: () => TrafficOut },
            { no: 2, name: "keygen_result", kind: "message", oneof: "data", T: () => MessageOut_KeygenResult },
            { no: 3, name: "sign_result", kind: "message", oneof: "data", T: () => MessageOut_SignResult },
            { no: 4, name: "need_recover", kind: "scalar", oneof: "data", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tofnd.TrafficOut traffic */ 1:
                    message.data = {
                        oneofKind: "traffic",
                        traffic: TrafficOut.internalBinaryRead(reader, reader.uint32(), options, message.data.traffic)
                    };
                    break;
                case /* tofnd.MessageOut.KeygenResult keygen_result */ 2:
                    message.data = {
                        oneofKind: "keygenResult",
                        keygenResult: MessageOut_KeygenResult.internalBinaryRead(reader, reader.uint32(), options, message.data.keygenResult)
                    };
                    break;
                case /* tofnd.MessageOut.SignResult sign_result */ 3:
                    message.data = {
                        oneofKind: "signResult",
                        signResult: MessageOut_SignResult.internalBinaryRead(reader, reader.uint32(), options, message.data.signResult)
                    };
                    break;
                case /* bool need_recover */ 4:
                    message.data = {
                        oneofKind: "needRecover",
                        needRecover: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tofnd.TrafficOut traffic = 1; */
        if (message.data.oneofKind === "traffic")
            TrafficOut.internalBinaryWrite(message.data.traffic, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.MessageOut.KeygenResult keygen_result = 2; */
        if (message.data.oneofKind === "keygenResult")
            MessageOut_KeygenResult.internalBinaryWrite(message.data.keygenResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.MessageOut.SignResult sign_result = 3; */
        if (message.data.oneofKind === "signResult")
            MessageOut_SignResult.internalBinaryWrite(message.data.signResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool need_recover = 4; */
        if (message.data.oneofKind === "needRecover")
            writer.tag(4, WireType.Varint).bool(message.data.needRecover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut
 */
export const MessageOut = new MessageOut$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOut_KeygenResult$Type extends MessageType {
    constructor() {
        super("tofnd.MessageOut.KeygenResult", [
            { no: 1, name: "data", kind: "message", oneof: "keygenResultData", T: () => KeygenOutput },
            { no: 2, name: "criminals", kind: "message", oneof: "keygenResultData", T: () => MessageOut_CriminalList }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keygenResultData = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tofnd.KeygenOutput data */ 1:
                    message.keygenResultData = {
                        oneofKind: "data",
                        data: KeygenOutput.internalBinaryRead(reader, reader.uint32(), options, message.keygenResultData.data)
                    };
                    break;
                case /* tofnd.MessageOut.CriminalList criminals */ 2:
                    message.keygenResultData = {
                        oneofKind: "criminals",
                        criminals: MessageOut_CriminalList.internalBinaryRead(reader, reader.uint32(), options, message.keygenResultData.criminals)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tofnd.KeygenOutput data = 1; */
        if (message.keygenResultData.oneofKind === "data")
            KeygenOutput.internalBinaryWrite(message.keygenResultData.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.MessageOut.CriminalList criminals = 2; */
        if (message.keygenResultData.oneofKind === "criminals")
            MessageOut_CriminalList.internalBinaryWrite(message.keygenResultData.criminals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.KeygenResult
 */
export const MessageOut_KeygenResult = new MessageOut_KeygenResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOut_SignResult$Type extends MessageType {
    constructor() {
        super("tofnd.MessageOut.SignResult", [
            { no: 1, name: "signature", kind: "scalar", oneof: "signResultData", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "criminals", kind: "message", oneof: "signResultData", T: () => MessageOut_CriminalList }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.signResultData = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature */ 1:
                    message.signResultData = {
                        oneofKind: "signature",
                        signature: reader.bytes()
                    };
                    break;
                case /* tofnd.MessageOut.CriminalList criminals */ 2:
                    message.signResultData = {
                        oneofKind: "criminals",
                        criminals: MessageOut_CriminalList.internalBinaryRead(reader, reader.uint32(), options, message.signResultData.criminals)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes signature = 1; */
        if (message.signResultData.oneofKind === "signature")
            writer.tag(1, WireType.LengthDelimited).bytes(message.signResultData.signature);
        /* tofnd.MessageOut.CriminalList criminals = 2; */
        if (message.signResultData.oneofKind === "criminals")
            MessageOut_CriminalList.internalBinaryWrite(message.signResultData.criminals, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.SignResult
 */
export const MessageOut_SignResult = new MessageOut_SignResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOut_CriminalList$Type extends MessageType {
    constructor() {
        super("tofnd.MessageOut.CriminalList", [
            { no: 1, name: "criminals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MessageOut_CriminalList_Criminal }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.criminals = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tofnd.MessageOut.CriminalList.Criminal criminals */ 1:
                    message.criminals.push(MessageOut_CriminalList_Criminal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated tofnd.MessageOut.CriminalList.Criminal criminals = 1; */
        for (let i = 0; i < message.criminals.length; i++)
            MessageOut_CriminalList_Criminal.internalBinaryWrite(message.criminals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.CriminalList
 */
export const MessageOut_CriminalList = new MessageOut_CriminalList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOut_CriminalList_Criminal$Type extends MessageType {
    constructor() {
        super("tofnd.MessageOut.CriminalList.Criminal", [
            { no: 1, name: "party_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "crime_type", kind: "enum", T: () => ["tofnd.MessageOut.CriminalList.Criminal.CrimeType", MessageOut_CriminalList_Criminal_CrimeType, "CRIME_TYPE_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.partyUid = "";
        message.crimeType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string party_uid */ 1:
                    message.partyUid = reader.string();
                    break;
                case /* tofnd.MessageOut.CriminalList.Criminal.CrimeType crime_type */ 2:
                    message.crimeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string party_uid = 1; */
        if (message.partyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.partyUid);
        /* tofnd.MessageOut.CriminalList.Criminal.CrimeType crime_type = 2; */
        if (message.crimeType !== 0)
            writer.tag(2, WireType.Varint).int32(message.crimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.MessageOut.CriminalList.Criminal
 */
export const MessageOut_CriminalList_Criminal = new MessageOut_CriminalList_Criminal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrafficIn$Type extends MessageType {
    constructor() {
        super("tofnd.TrafficIn", [
            { no: 1, name: "from_party_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "is_broadcast", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.fromPartyUid = "";
        message.payload = new Uint8Array(0);
        message.isBroadcast = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_party_uid */ 1:
                    message.fromPartyUid = reader.string();
                    break;
                case /* bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                case /* bool is_broadcast */ 3:
                    message.isBroadcast = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string from_party_uid = 1; */
        if (message.fromPartyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromPartyUid);
        /* bytes payload = 2; */
        if (message.payload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        /* bool is_broadcast = 3; */
        if (message.isBroadcast !== false)
            writer.tag(3, WireType.Varint).bool(message.isBroadcast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.TrafficIn
 */
export const TrafficIn = new TrafficIn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrafficOut$Type extends MessageType {
    constructor() {
        super("tofnd.TrafficOut", [
            { no: 1, name: "to_party_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "is_broadcast", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.toPartyUid = "";
        message.payload = new Uint8Array(0);
        message.isBroadcast = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to_party_uid */ 1:
                    message.toPartyUid = reader.string();
                    break;
                case /* bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                case /* bool is_broadcast */ 3:
                    message.isBroadcast = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string to_party_uid = 1; */
        if (message.toPartyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toPartyUid);
        /* bytes payload = 2; */
        if (message.payload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        /* bool is_broadcast = 3; */
        if (message.isBroadcast !== false)
            writer.tag(3, WireType.Varint).bool(message.isBroadcast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.TrafficOut
 */
export const TrafficOut = new TrafficOut$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenInit$Type extends MessageType {
    constructor() {
        super("tofnd.KeygenInit", [
            { no: 1, name: "new_key_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "party_uids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "party_share_counts", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "my_party_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "threshold", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.newKeyUid = "";
        message.partyUids = [];
        message.partyShareCounts = [];
        message.myPartyIndex = 0;
        message.threshold = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string new_key_uid */ 1:
                    message.newKeyUid = reader.string();
                    break;
                case /* repeated string party_uids */ 2:
                    message.partyUids.push(reader.string());
                    break;
                case /* repeated uint32 party_share_counts */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.partyShareCounts.push(reader.uint32());
                    else
                        message.partyShareCounts.push(reader.uint32());
                    break;
                case /* uint32 my_party_index */ 3:
                    message.myPartyIndex = reader.uint32();
                    break;
                case /* uint32 threshold */ 4:
                    message.threshold = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string new_key_uid = 1; */
        if (message.newKeyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newKeyUid);
        /* repeated string party_uids = 2; */
        for (let i = 0; i < message.partyUids.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.partyUids[i]);
        /* repeated uint32 party_share_counts = 5; */
        if (message.partyShareCounts.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.partyShareCounts.length; i++)
                writer.uint32(message.partyShareCounts[i]);
            writer.join();
        }
        /* uint32 my_party_index = 3; */
        if (message.myPartyIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.myPartyIndex);
        /* uint32 threshold = 4; */
        if (message.threshold !== 0)
            writer.tag(4, WireType.Varint).uint32(message.threshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenInit
 */
export const KeygenInit = new KeygenInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignInit$Type extends MessageType {
    constructor() {
        super("tofnd.SignInit", [
            { no: 1, name: "new_sig_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "party_uids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "message_to_sign", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.newSigUid = "";
        message.keyUid = "";
        message.partyUids = [];
        message.messageToSign = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string new_sig_uid */ 1:
                    message.newSigUid = reader.string();
                    break;
                case /* string key_uid */ 2:
                    message.keyUid = reader.string();
                    break;
                case /* repeated string party_uids */ 3:
                    message.partyUids.push(reader.string());
                    break;
                case /* bytes message_to_sign */ 4:
                    message.messageToSign = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string new_sig_uid = 1; */
        if (message.newSigUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newSigUid);
        /* string key_uid = 2; */
        if (message.keyUid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyUid);
        /* repeated string party_uids = 3; */
        for (let i = 0; i < message.partyUids.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.partyUids[i]);
        /* bytes message_to_sign = 4; */
        if (message.messageToSign.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.messageToSign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.SignInit
 */
export const SignInit = new SignInit$Type();
