// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/tofnd/v1beta1/multisig.proto" (package "tofnd", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/tofnd/v1beta1/multisig.proto" (package "tofnd", syntax proto3)
// tslint:disable
import { KeyPresenceResponse } from "./common";
import { KeyPresenceRequest } from "./common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class KeygenRequest$Type extends MessageType {
    constructor() {
        super("tofnd.KeygenRequest", [
            { no: 1, name: "key_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "party_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyUid = "";
        message.partyUid = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_uid */ 1:
                    message.keyUid = reader.string();
                    break;
                case /* string party_uid */ 2:
                    message.partyUid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string key_uid = 1; */
        if (message.keyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyUid);
        /* string party_uid = 2; */
        if (message.partyUid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.partyUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenRequest
 */
export const KeygenRequest = new KeygenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeygenResponse$Type extends MessageType {
    constructor() {
        super("tofnd.KeygenResponse", [
            { no: 1, name: "pub_key", kind: "scalar", oneof: "keygenResponse", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "error", kind: "scalar", oneof: "keygenResponse", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keygenResponse = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes pub_key */ 1:
                    message.keygenResponse = {
                        oneofKind: "pubKey",
                        pubKey: reader.bytes()
                    };
                    break;
                case /* string error */ 2:
                    message.keygenResponse = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes pub_key = 1; */
        if (message.keygenResponse.oneofKind === "pubKey")
            writer.tag(1, WireType.LengthDelimited).bytes(message.keygenResponse.pubKey);
        /* string error = 2; */
        if (message.keygenResponse.oneofKind === "error")
            writer.tag(2, WireType.LengthDelimited).string(message.keygenResponse.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.KeygenResponse
 */
export const KeygenResponse = new KeygenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignRequest$Type extends MessageType {
    constructor() {
        super("tofnd.SignRequest", [
            { no: 1, name: "key_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "msg_to_sign", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "party_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyUid = "";
        message.msgToSign = new Uint8Array(0);
        message.partyUid = "";
        message.pubKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_uid */ 1:
                    message.keyUid = reader.string();
                    break;
                case /* bytes msg_to_sign */ 2:
                    message.msgToSign = reader.bytes();
                    break;
                case /* string party_uid */ 3:
                    message.partyUid = reader.string();
                    break;
                case /* bytes pub_key */ 4:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string key_uid = 1; */
        if (message.keyUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyUid);
        /* bytes msg_to_sign = 2; */
        if (message.msgToSign.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.msgToSign);
        /* string party_uid = 3; */
        if (message.partyUid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.partyUid);
        /* bytes pub_key = 4; */
        if (message.pubKey.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.SignRequest
 */
export const SignRequest = new SignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignResponse$Type extends MessageType {
    constructor() {
        super("tofnd.SignResponse", [
            { no: 1, name: "signature", kind: "scalar", oneof: "signResponse", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "error", kind: "scalar", oneof: "signResponse", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.signResponse = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature */ 1:
                    message.signResponse = {
                        oneofKind: "signature",
                        signature: reader.bytes()
                    };
                    break;
                case /* string error */ 2:
                    message.signResponse = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes signature = 1; */
        if (message.signResponse.oneofKind === "signature")
            writer.tag(1, WireType.LengthDelimited).bytes(message.signResponse.signature);
        /* string error = 2; */
        if (message.signResponse.oneofKind === "error")
            writer.tag(2, WireType.LengthDelimited).string(message.signResponse.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tofnd.SignResponse
 */
export const SignResponse = new SignResponse$Type();
/**
 * @generated ServiceType for protobuf service tofnd.Multisig
 */
export const Multisig = new ServiceType("tofnd.Multisig", [
    { name: "KeyPresence", options: {}, I: KeyPresenceRequest, O: KeyPresenceResponse },
    { name: "Keygen", options: {}, I: KeygenRequest, O: KeygenResponse },
    { name: "Sign", options: {}, I: SignRequest, O: SignResponse }
]);
