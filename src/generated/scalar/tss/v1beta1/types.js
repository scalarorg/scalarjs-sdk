// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/v1beta1/types.proto" (package "scalar.tss.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeyType } from "../exported/v1beta1/types";
import { KeyRole } from "../exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class KeygenVoteData$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.KeygenVoteData", [
            { no: 1, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "group_recovery_info", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pubKey = new Uint8Array(0);
        message.groupRecoveryInfo = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes pub_key */ 1:
                    message.pubKey = reader.bytes();
                    break;
                case /* bytes group_recovery_info */ 2:
                    message.groupRecoveryInfo = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes pub_key = 1; */
        if (message.pubKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.pubKey);
        /* bytes group_recovery_info = 2; */
        if (message.groupRecoveryInfo.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.groupRecoveryInfo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.KeygenVoteData
 */
export const KeygenVoteData = new KeygenVoteData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyInfo$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.KeyInfo", [
            { no: 1, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } },
            { no: 2, name: "key_role", kind: "enum", T: () => ["scalar.tss.exported.v1beta1.KeyRole", KeyRole, "KEY_ROLE_"] },
            { no: 3, name: "key_type", kind: "enum", T: () => ["scalar.tss.exported.v1beta1.KeyType", KeyType, "KEY_TYPE_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyId = "";
        message.keyRole = 0;
        message.keyType = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_id */ 1:
                    message.keyId = reader.string();
                    break;
                case /* scalar.tss.exported.v1beta1.KeyRole key_role */ 2:
                    message.keyRole = reader.int32();
                    break;
                case /* scalar.tss.exported.v1beta1.KeyType key_type */ 3:
                    message.keyType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string key_id = 1; */
        if (message.keyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyId);
        /* scalar.tss.exported.v1beta1.KeyRole key_role = 2; */
        if (message.keyRole !== 0)
            writer.tag(2, WireType.Varint).int32(message.keyRole);
        /* scalar.tss.exported.v1beta1.KeyType key_type = 3; */
        if (message.keyType !== 0)
            writer.tag(3, WireType.Varint).int32(message.keyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.KeyInfo
 */
export const KeyInfo = new KeyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultisigInfo$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.MultisigInfo", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "timeout", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "target_num", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MultisigInfo_Info }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.timeout = "0";
        message.targetNum = "0";
        message.infos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* int64 timeout */ 2:
                    message.timeout = reader.int64().toString();
                    break;
                case /* int64 target_num */ 3:
                    message.targetNum = reader.int64().toString();
                    break;
                case /* repeated scalar.tss.v1beta1.MultisigInfo.Info infos */ 4:
                    message.infos.push(MultisigInfo_Info.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* int64 timeout = 2; */
        if (message.timeout !== "0")
            writer.tag(2, WireType.Varint).int64(message.timeout);
        /* int64 target_num = 3; */
        if (message.targetNum !== "0")
            writer.tag(3, WireType.Varint).int64(message.targetNum);
        /* repeated scalar.tss.v1beta1.MultisigInfo.Info infos = 4; */
        for (let i = 0; i < message.infos.length; i++)
            MultisigInfo_Info.internalBinaryWrite(message.infos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.MultisigInfo
 */
export const MultisigInfo = new MultisigInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MultisigInfo_Info$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.MultisigInfo.Info", [
            { no: 1, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 2, name: "data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.participant = new Uint8Array(0);
        message.data = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes participant */ 1:
                    message.participant = reader.bytes();
                    break;
                case /* repeated bytes data */ 2:
                    message.data.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes participant = 1; */
        if (message.participant.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.participant);
        /* repeated bytes data = 2; */
        for (let i = 0; i < message.data.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.MultisigInfo.Info
 */
export const MultisigInfo_Info = new MultisigInfo_Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyRecoveryInfo$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.KeyRecoveryInfo", [
            { no: 1, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } },
            { no: 2, name: "public", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "private", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ }, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyId = "";
        message.public = new Uint8Array(0);
        message.private = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key_id */ 1:
                    message.keyId = reader.string();
                    break;
                case /* bytes public */ 2:
                    message.public = reader.bytes();
                    break;
                case /* map<string, bytes> private */ 3:
                    this.binaryReadMap3(message.private, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.tss.v1beta1.KeyRecoveryInfo.private");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
    }
    internalBinaryWrite(message, writer, options) {
        /* string key_id = 1; */
        if (message.keyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyId);
        /* bytes public = 2; */
        if (message.public.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.public);
        /* map<string, bytes> private = 3; */
        for (let k of globalThis.Object.keys(message.private))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.private[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.KeyRecoveryInfo
 */
export const KeyRecoveryInfo = new KeyRecoveryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExternalKeys$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ExternalKeys", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "key_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyIDs", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.keyIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* repeated string key_ids */ 2:
                    message.keyIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* repeated string key_ids = 2; */
        for (let i = 0; i < message.keyIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.keyIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ExternalKeys
 */
export const ExternalKeys = new ExternalKeys$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorStatus$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ValidatorStatus", [
            { no: 1, name: "validator", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 2, name: "suspended_until", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validator = new Uint8Array(0);
        message.suspendedUntil = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes validator */ 1:
                    message.validator = reader.bytes();
                    break;
                case /* uint64 suspended_until */ 2:
                    message.suspendedUntil = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes validator = 1; */
        if (message.validator.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.validator);
        /* uint64 suspended_until = 2; */
        if (message.suspendedUntil !== "0")
            writer.tag(2, WireType.Varint).uint64(message.suspendedUntil);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ValidatorStatus
 */
export const ValidatorStatus = new ValidatorStatus$Type();
