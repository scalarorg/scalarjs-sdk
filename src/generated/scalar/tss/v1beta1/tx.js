// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/tss/v1beta1/tx.proto" (package "scalar.tss.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SigKeyPair } from "../exported/v1beta1/types";
import { MessageOut_SignResult } from "../tofnd/v1beta1/tofnd";
import { MessageOut_KeygenResult } from "../tofnd/v1beta1/tofnd";
import { PollKey } from "../../vote/exported/v1beta1/types";
import { TrafficOut } from "../tofnd/v1beta1/tofnd";
import { KeyRole } from "../exported/v1beta1/types";
import { KeyInfo } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class StartKeygenRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.StartKeygenRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "key_info", kind: "message", T: () => KeyInfo, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_CHAIN_MANAGEMENT" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* scalar.tss.v1beta1.KeyInfo key_info */ 2:
                    message.keyInfo = KeyInfo.internalBinaryRead(reader, reader.uint32(), options, message.keyInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* scalar.tss.v1beta1.KeyInfo key_info = 2; */
        if (message.keyInfo)
            KeyInfo.internalBinaryWrite(message.keyInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.StartKeygenRequest
 */
export const StartKeygenRequest = new StartKeygenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartKeygenResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.StartKeygenResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.StartKeygenResponse
 */
export const StartKeygenResponse = new StartKeygenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RotateKeyRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.RotateKeyRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "key_role", kind: "enum", T: () => ["scalar.tss.exported.v1beta1.KeyRole", KeyRole, "KEY_ROLE_"] },
            { no: 4, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_CHAIN_MANAGEMENT" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.keyRole = 0;
        message.keyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* scalar.tss.exported.v1beta1.KeyRole key_role */ 3:
                    message.keyRole = reader.int32();
                    break;
                case /* string key_id */ 4:
                    message.keyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* scalar.tss.exported.v1beta1.KeyRole key_role = 3; */
        if (message.keyRole !== 0)
            writer.tag(3, WireType.Varint).int32(message.keyRole);
        /* string key_id = 4; */
        if (message.keyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.keyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.RotateKeyRequest
 */
export const RotateKeyRequest = new RotateKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RotateKeyResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.RotateKeyResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.RotateKeyResponse
 */
export const RotateKeyResponse = new RotateKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessKeygenTrafficRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ProcessKeygenTrafficRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "SessionID" } },
            { no: 3, name: "payload", kind: "message", T: () => TrafficOut, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* tofnd.TrafficOut payload */ 3:
                    message.payload = TrafficOut.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* tofnd.TrafficOut payload = 3; */
        if (message.payload)
            TrafficOut.internalBinaryWrite(message.payload, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ProcessKeygenTrafficRequest
 */
export const ProcessKeygenTrafficRequest = new ProcessKeygenTrafficRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessKeygenTrafficResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ProcessKeygenTrafficResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ProcessKeygenTrafficResponse
 */
export const ProcessKeygenTrafficResponse = new ProcessKeygenTrafficResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessSignTrafficRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ProcessSignTrafficRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "SessionID" } },
            { no: 3, name: "payload", kind: "message", T: () => TrafficOut, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string session_id */ 2:
                    message.sessionId = reader.string();
                    break;
                case /* tofnd.TrafficOut payload */ 3:
                    message.payload = TrafficOut.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string session_id = 2; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        /* tofnd.TrafficOut payload = 3; */
        if (message.payload)
            TrafficOut.internalBinaryWrite(message.payload, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ProcessSignTrafficRequest
 */
export const ProcessSignTrafficRequest = new ProcessSignTrafficRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessSignTrafficResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.ProcessSignTrafficResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.ProcessSignTrafficResponse
 */
export const ProcessSignTrafficResponse = new ProcessSignTrafficResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VotePubKeyRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.VotePubKeyRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "poll_key", kind: "message", T: () => PollKey, options: { "gogoproto.nullable": false } },
            { no: 3, name: "result", kind: "message", T: () => MessageOut_KeygenResult, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* scalar.vote.exported.v1beta1.PollKey poll_key */ 2:
                    message.pollKey = PollKey.internalBinaryRead(reader, reader.uint32(), options, message.pollKey);
                    break;
                case /* tofnd.MessageOut.KeygenResult result */ 3:
                    message.result = MessageOut_KeygenResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* scalar.vote.exported.v1beta1.PollKey poll_key = 2; */
        if (message.pollKey)
            PollKey.internalBinaryWrite(message.pollKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.MessageOut.KeygenResult result = 3; */
        if (message.result)
            MessageOut_KeygenResult.internalBinaryWrite(message.result, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.VotePubKeyRequest
 */
export const VotePubKeyRequest = new VotePubKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VotePubKeyResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.VotePubKeyResponse", [
            { no: 1, name: "log", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.log = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log */ 1:
                    message.log = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string log = 1; */
        if (message.log !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.log);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.VotePubKeyResponse
 */
export const VotePubKeyResponse = new VotePubKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VoteSigRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.VoteSigRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "poll_key", kind: "message", T: () => PollKey, options: { "gogoproto.nullable": false } },
            { no: 3, name: "result", kind: "message", T: () => MessageOut_SignResult, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* scalar.vote.exported.v1beta1.PollKey poll_key */ 2:
                    message.pollKey = PollKey.internalBinaryRead(reader, reader.uint32(), options, message.pollKey);
                    break;
                case /* tofnd.MessageOut.SignResult result */ 3:
                    message.result = MessageOut_SignResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* scalar.vote.exported.v1beta1.PollKey poll_key = 2; */
        if (message.pollKey)
            PollKey.internalBinaryWrite(message.pollKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tofnd.MessageOut.SignResult result = 3; */
        if (message.result)
            MessageOut_SignResult.internalBinaryWrite(message.result, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.VoteSigRequest
 */
export const VoteSigRequest = new VoteSigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VoteSigResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.VoteSigResponse", [
            { no: 1, name: "log", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.log = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string log */ 1:
                    message.log = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string log = 1; */
        if (message.log !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.log);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.VoteSigResponse
 */
export const VoteSigResponse = new VoteSigResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeartBeatRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.HeartBeatRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "key_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyIDs", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.keyIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* repeated string key_ids = 2 [deprecated = true];*/ 2:
                    message.keyIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* repeated string key_ids = 2 [deprecated = true]; */
        for (let i = 0; i < message.keyIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.keyIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.HeartBeatRequest
 */
export const HeartBeatRequest = new HeartBeatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HeartBeatResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.HeartBeatResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.HeartBeatResponse
 */
export const HeartBeatResponse = new HeartBeatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterExternalKeysRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.RegisterExternalKeysRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "external_keys", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegisterExternalKeysRequest_ExternalKey, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_CHAIN_MANAGEMENT" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.externalKeys = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* repeated scalar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey external_keys */ 3:
                    message.externalKeys.push(RegisterExternalKeysRequest_ExternalKey.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* repeated scalar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey external_keys = 3; */
        for (let i = 0; i < message.externalKeys.length; i++)
            RegisterExternalKeysRequest_ExternalKey.internalBinaryWrite(message.externalKeys[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.RegisterExternalKeysRequest
 */
export const RegisterExternalKeysRequest = new RegisterExternalKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterExternalKeysRequest_ExternalKey$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } },
            { no: 2, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.pubKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes pub_key */ 2:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes pub_key = 2; */
        if (message.pubKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey
 */
export const RegisterExternalKeysRequest_ExternalKey = new RegisterExternalKeysRequest_ExternalKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterExternalKeysResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.RegisterExternalKeysResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.RegisterExternalKeysResponse
 */
export const RegisterExternalKeysResponse = new RegisterExternalKeysResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitMultisigPubKeysRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.SubmitMultisigPubKeysRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/tss/exported.KeyID" } },
            { no: 3, name: "sig_key_pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SigKeyPair, options: { "gogoproto.nullable": false } }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.keyId = "";
        message.sigKeyPairs = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string key_id */ 2:
                    message.keyId = reader.string();
                    break;
                case /* repeated scalar.tss.exported.v1beta1.SigKeyPair sig_key_pairs */ 3:
                    message.sigKeyPairs.push(SigKeyPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string key_id = 2; */
        if (message.keyId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyId);
        /* repeated scalar.tss.exported.v1beta1.SigKeyPair sig_key_pairs = 3; */
        for (let i = 0; i < message.sigKeyPairs.length; i++)
            SigKeyPair.internalBinaryWrite(message.sigKeyPairs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.SubmitMultisigPubKeysRequest
 */
export const SubmitMultisigPubKeysRequest = new SubmitMultisigPubKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitMultisigPubKeysResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.SubmitMultisigPubKeysResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.SubmitMultisigPubKeysResponse
 */
export const SubmitMultisigPubKeysResponse = new SubmitMultisigPubKeysResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitMultisigSignaturesRequest$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.SubmitMultisigSignaturesRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "sig_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "SigID" } },
            { no: 3, name: "signatures", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ], { "scalar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.sigId = "";
        message.signatures = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string sig_id */ 2:
                    message.sigId = reader.string();
                    break;
                case /* repeated bytes signatures */ 3:
                    message.signatures.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string sig_id = 2; */
        if (message.sigId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sigId);
        /* repeated bytes signatures = 3; */
        for (let i = 0; i < message.signatures.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signatures[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.SubmitMultisigSignaturesRequest
 */
export const SubmitMultisigSignaturesRequest = new SubmitMultisigSignaturesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitMultisigSignaturesResponse$Type extends MessageType {
    constructor() {
        super("scalar.tss.v1beta1.SubmitMultisigSignaturesResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.tss.v1beta1.SubmitMultisigSignaturesResponse
 */
export const SubmitMultisigSignaturesResponse = new SubmitMultisigSignaturesResponse$Type();
