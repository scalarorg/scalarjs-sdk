// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/scalarnet/v1beta1/params.proto" (package "scalar.scalarnet.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.Params", [
            { no: 1, name: "route_timeout_window", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "transfer_limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "end_blocker_limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "call_contracts_proposal_min_deposits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CallContractProposalMinDeposit, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "CallContractProposalMinDeposits" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.routeTimeoutWindow = "0";
        message.transferLimit = "0";
        message.endBlockerLimit = "0";
        message.callContractsProposalMinDeposits = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 route_timeout_window */ 1:
                    message.routeTimeoutWindow = reader.uint64().toString();
                    break;
                case /* uint64 transfer_limit */ 3:
                    message.transferLimit = reader.uint64().toString();
                    break;
                case /* uint64 end_blocker_limit */ 4:
                    message.endBlockerLimit = reader.uint64().toString();
                    break;
                case /* repeated scalar.scalarnet.v1beta1.CallContractProposalMinDeposit call_contracts_proposal_min_deposits */ 5:
                    message.callContractsProposalMinDeposits.push(CallContractProposalMinDeposit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 route_timeout_window = 1; */
        if (message.routeTimeoutWindow !== "0")
            writer.tag(1, WireType.Varint).uint64(message.routeTimeoutWindow);
        /* uint64 transfer_limit = 3; */
        if (message.transferLimit !== "0")
            writer.tag(3, WireType.Varint).uint64(message.transferLimit);
        /* uint64 end_blocker_limit = 4; */
        if (message.endBlockerLimit !== "0")
            writer.tag(4, WireType.Varint).uint64(message.endBlockerLimit);
        /* repeated scalar.scalarnet.v1beta1.CallContractProposalMinDeposit call_contracts_proposal_min_deposits = 5; */
        for (let i = 0; i < message.callContractsProposalMinDeposits.length; i++)
            CallContractProposalMinDeposit.internalBinaryWrite(message.callContractsProposalMinDeposits[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallContractProposalMinDeposit$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.CallContractProposalMinDeposit", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "min_deposits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.contractAddress = "";
        message.minDeposits = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string contract_address */ 2:
                    message.contractAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin min_deposits */ 3:
                    message.minDeposits.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string contract_address = 2; */
        if (message.contractAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contractAddress);
        /* repeated cosmos.base.v1beta1.Coin min_deposits = 3; */
        for (let i = 0; i < message.minDeposits.length; i++)
            Coin.internalBinaryWrite(message.minDeposits[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.CallContractProposalMinDeposit
 */
export const CallContractProposalMinDeposit = new CallContractProposalMinDeposit$Type();
