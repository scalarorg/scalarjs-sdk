// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/scalarnet/v1beta1/types.proto" (package "scalar.scalarnet.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf enum scalar.scalarnet.v1beta1.IBCTransfer.Status
 */
export var IBCTransfer_Status;
(function (IBCTransfer_Status) {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    IBCTransfer_Status[IBCTransfer_Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_PENDING = 1;
     */
    IBCTransfer_Status[IBCTransfer_Status["PENDING"] = 1] = "PENDING";
    /**
     * @generated from protobuf enum value: STATUS_COMPLETED = 2;
     */
    IBCTransfer_Status[IBCTransfer_Status["COMPLETED"] = 2] = "COMPLETED";
    /**
     * @generated from protobuf enum value: STATUS_FAILED = 3;
     */
    IBCTransfer_Status[IBCTransfer_Status["FAILED"] = 3] = "FAILED";
})(IBCTransfer_Status || (IBCTransfer_Status = {}));
// @generated message type with reflection information, may provide speed optimized methods
class IBCTransfer$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.IBCTransfer", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PortID" } },
            { no: 5, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChannelID" } },
            { no: 6, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 7, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.TransferID" } },
            { no: 8, name: "status", kind: "enum", T: () => ["scalar.scalarnet.v1beta1.IBCTransfer.Status", IBCTransfer_Status, "STATUS_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.receiver = "";
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        message.id = "0";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string receiver */ 2:
                    message.receiver = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin token */ 3:
                    message.token = Coin.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                case /* string port_id */ 4:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 5:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence = 6 [deprecated = true];*/ 6:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 id */ 7:
                    message.id = reader.uint64().toString();
                    break;
                case /* scalar.scalarnet.v1beta1.IBCTransfer.Status status */ 8:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string receiver = 2; */
        if (message.receiver !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receiver);
        /* cosmos.base.v1beta1.Coin token = 3; */
        if (message.token)
            Coin.internalBinaryWrite(message.token, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string port_id = 4; */
        if (message.portId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 5; */
        if (message.channelId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 6 [deprecated = true]; */
        if (message.sequence !== "0")
            writer.tag(6, WireType.Varint).uint64(message.sequence);
        /* uint64 id = 7; */
        if (message.id !== "0")
            writer.tag(7, WireType.Varint).uint64(message.id);
        /* scalar.scalarnet.v1beta1.IBCTransfer.Status status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.IBCTransfer
 */
export const IBCTransfer = new IBCTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CosmosChain$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.CosmosChain", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "ibc_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "IBCPath" } },
            { no: 3, name: "assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Asset, options: { "gogoproto.nullable": false } },
            { no: 4, name: "addr_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.ibcPath = "";
        message.assets = [];
        message.addrPrefix = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string ibc_path */ 2:
                    message.ibcPath = reader.string();
                    break;
                case /* repeated scalar.scalarnet.v1beta1.Asset assets = 3 [deprecated = true];*/ 3:
                    message.assets.push(Asset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string addr_prefix */ 4:
                    message.addrPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string ibc_path = 2; */
        if (message.ibcPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.ibcPath);
        /* repeated scalar.scalarnet.v1beta1.Asset assets = 3 [deprecated = true]; */
        for (let i = 0; i < message.assets.length; i++)
            Asset.internalBinaryWrite(message.assets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string addr_prefix = 4; */
        if (message.addrPrefix !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.addrPrefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.CosmosChain
 */
export const CosmosChain = new CosmosChain$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Asset$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.Asset", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "min_amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.denom = "";
        message.minAmount = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* bytes min_amount */ 2:
                    message.minAmount = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* bytes min_amount = 2; */
        if (message.minAmount.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.minAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.Asset
 */
export const Asset = new Asset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Fee$Type extends MessageType {
    constructor() {
        super("scalar.scalarnet.v1beta1.Fee", [
            { no: 1, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 2, name: "recipient", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 3, name: "refund_recipient", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.recipient = new Uint8Array(0);
        message.refundRecipient = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.v1beta1.Coin amount */ 1:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* bytes recipient */ 2:
                    message.recipient = reader.bytes();
                    break;
                case /* bytes refund_recipient */ 3:
                    message.refundRecipient = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.v1beta1.Coin amount = 1; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes recipient = 2; */
        if (message.recipient.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.recipient);
        /* bytes refund_recipient = 3; */
        if (message.refundRecipient.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.refundRecipient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.Fee
 */
export const Fee = new Fee$Type();
