// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/scalarnet/v1beta1/events.proto" (package "scalar.scalarnet.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.IBCTransferSent
 */
export interface IBCTransferSent {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @deprecated
     * @generated from protobuf field: string receipient = 2 [deprecated = true];
     */
    receipient: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin asset = 3;
     */
    asset?: Coin;
    /**
     * @generated from protobuf field: uint64 sequence = 4;
     */
    sequence: string;
    /**
     * @generated from protobuf field: string port_id = 5;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 6;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string recipient = 7;
     */
    recipient: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.IBCTransferCompleted
 */
export interface IBCTransferCompleted {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 sequence = 2;
     */
    sequence: string;
    /**
     * @generated from protobuf field: string port_id = 3;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 4;
     */
    channelId: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.IBCTransferFailed
 */
export interface IBCTransferFailed {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 sequence = 2;
     */
    sequence: string;
    /**
     * @generated from protobuf field: string port_id = 3;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 4;
     */
    channelId: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.IBCTransferRetried
 */
export interface IBCTransferRetried {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @deprecated
     * @generated from protobuf field: string receipient = 2 [deprecated = true];
     */
    receipient: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin asset = 3;
     */
    asset?: Coin;
    /**
     * @generated from protobuf field: uint64 sequence = 4;
     */
    sequence: string;
    /**
     * @generated from protobuf field: string port_id = 5;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 6;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string recipient = 7;
     */
    recipient: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.ScalarTransferCompleted
 */
export interface ScalarTransferCompleted {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @deprecated
     * @generated from protobuf field: string receipient = 2 [deprecated = true];
     */
    receipient: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin asset = 3;
     */
    asset?: Coin;
    /**
     * @generated from protobuf field: string recipient = 4;
     */
    recipient: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.FeeCollected
 */
export interface FeeCollected {
    /**
     * @generated from protobuf field: bytes collector = 1;
     */
    collector: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin fee = 2;
     */
    fee?: Coin;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.FeePaid
 */
export interface FeePaid {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: bytes recipient = 2;
     */
    recipient: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin fee = 3;
     */
    fee?: Coin;
    /**
     * @generated from protobuf field: string refund_recipient = 4;
     */
    refundRecipient: string;
    /**
     * @generated from protobuf field: string asset = 5;
     */
    asset: string;
    /**
     * @generated from protobuf field: string source_chain = 6;
     */
    sourceChain: string;
    /**
     * @generated from protobuf field: string destination_chain = 7;
     */
    destinationChain: string;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.ContractCallSubmitted
 */
export interface ContractCallSubmitted {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string sender = 2;
     */
    sender: string;
    /**
     * @generated from protobuf field: string source_chain = 3;
     */
    sourceChain: string;
    /**
     * @generated from protobuf field: string destination_chain = 4;
     */
    destinationChain: string;
    /**
     * @generated from protobuf field: string contract_address = 5;
     */
    contractAddress: string;
    /**
     * @generated from protobuf field: bytes payload = 6;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: bytes payload_hash = 7;
     */
    payloadHash: Uint8Array;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.ContractCallWithTokenSubmitted
 */
export interface ContractCallWithTokenSubmitted {
    /**
     * @generated from protobuf field: string message_id = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string sender = 2;
     */
    sender: string;
    /**
     * @generated from protobuf field: string source_chain = 3;
     */
    sourceChain: string;
    /**
     * @generated from protobuf field: string destination_chain = 4;
     */
    destinationChain: string;
    /**
     * @generated from protobuf field: string contract_address = 5;
     */
    contractAddress: string;
    /**
     * @generated from protobuf field: bytes payload = 6;
     */
    payload: Uint8Array;
    /**
     * @generated from protobuf field: bytes payload_hash = 7;
     */
    payloadHash: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin asset = 8;
     */
    asset?: Coin;
}
/**
 * @generated from protobuf message scalar.scalarnet.v1beta1.TokenSent
 */
export interface TokenSent {
    /**
     * @generated from protobuf field: uint64 transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string sender = 2;
     */
    sender: string;
    /**
     * @generated from protobuf field: string source_chain = 3;
     */
    sourceChain: string;
    /**
     * @generated from protobuf field: string destination_chain = 4;
     */
    destinationChain: string;
    /**
     * @generated from protobuf field: string destination_address = 5;
     */
    destinationAddress: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin asset = 6;
     */
    asset?: Coin;
}
declare class IBCTransferSent$Type extends MessageType<IBCTransferSent> {
    constructor();
    create(value?: PartialMessage<IBCTransferSent>): IBCTransferSent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IBCTransferSent): IBCTransferSent;
    internalBinaryWrite(message: IBCTransferSent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.IBCTransferSent
 */
export declare const IBCTransferSent: IBCTransferSent$Type;
declare class IBCTransferCompleted$Type extends MessageType<IBCTransferCompleted> {
    constructor();
    create(value?: PartialMessage<IBCTransferCompleted>): IBCTransferCompleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IBCTransferCompleted): IBCTransferCompleted;
    internalBinaryWrite(message: IBCTransferCompleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.IBCTransferCompleted
 */
export declare const IBCTransferCompleted: IBCTransferCompleted$Type;
declare class IBCTransferFailed$Type extends MessageType<IBCTransferFailed> {
    constructor();
    create(value?: PartialMessage<IBCTransferFailed>): IBCTransferFailed;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IBCTransferFailed): IBCTransferFailed;
    internalBinaryWrite(message: IBCTransferFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.IBCTransferFailed
 */
export declare const IBCTransferFailed: IBCTransferFailed$Type;
declare class IBCTransferRetried$Type extends MessageType<IBCTransferRetried> {
    constructor();
    create(value?: PartialMessage<IBCTransferRetried>): IBCTransferRetried;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IBCTransferRetried): IBCTransferRetried;
    internalBinaryWrite(message: IBCTransferRetried, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.IBCTransferRetried
 */
export declare const IBCTransferRetried: IBCTransferRetried$Type;
declare class ScalarTransferCompleted$Type extends MessageType<ScalarTransferCompleted> {
    constructor();
    create(value?: PartialMessage<ScalarTransferCompleted>): ScalarTransferCompleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScalarTransferCompleted): ScalarTransferCompleted;
    internalBinaryWrite(message: ScalarTransferCompleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.ScalarTransferCompleted
 */
export declare const ScalarTransferCompleted: ScalarTransferCompleted$Type;
declare class FeeCollected$Type extends MessageType<FeeCollected> {
    constructor();
    create(value?: PartialMessage<FeeCollected>): FeeCollected;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeeCollected): FeeCollected;
    internalBinaryWrite(message: FeeCollected, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.FeeCollected
 */
export declare const FeeCollected: FeeCollected$Type;
declare class FeePaid$Type extends MessageType<FeePaid> {
    constructor();
    create(value?: PartialMessage<FeePaid>): FeePaid;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeePaid): FeePaid;
    internalBinaryWrite(message: FeePaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.FeePaid
 */
export declare const FeePaid: FeePaid$Type;
declare class ContractCallSubmitted$Type extends MessageType<ContractCallSubmitted> {
    constructor();
    create(value?: PartialMessage<ContractCallSubmitted>): ContractCallSubmitted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractCallSubmitted): ContractCallSubmitted;
    internalBinaryWrite(message: ContractCallSubmitted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.ContractCallSubmitted
 */
export declare const ContractCallSubmitted: ContractCallSubmitted$Type;
declare class ContractCallWithTokenSubmitted$Type extends MessageType<ContractCallWithTokenSubmitted> {
    constructor();
    create(value?: PartialMessage<ContractCallWithTokenSubmitted>): ContractCallWithTokenSubmitted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractCallWithTokenSubmitted): ContractCallWithTokenSubmitted;
    internalBinaryWrite(message: ContractCallWithTokenSubmitted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.ContractCallWithTokenSubmitted
 */
export declare const ContractCallWithTokenSubmitted: ContractCallWithTokenSubmitted$Type;
declare class TokenSent$Type extends MessageType<TokenSent> {
    constructor();
    create(value?: PartialMessage<TokenSent>): TokenSent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenSent): TokenSent;
    internalBinaryWrite(message: TokenSent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message scalar.scalarnet.v1beta1.TokenSent
 */
export declare const TokenSent: TokenSent$Type;
export {};
