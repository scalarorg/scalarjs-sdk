// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/covenant/v1beta1/events.proto" (package "scalar.covenant.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TapScriptSig } from "../exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class SigningPsbtStarted$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.SigningPsbtStarted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } },
            { no: 4, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/scalarorg/scalar-core/x/multisig/exported.KeyID" } },
            { no: 5, name: "pub_keys", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ }, options: { "gogoproto.castvalue": "github.com/scalarorg/scalar-core/x/multisig/exported.PublicKey" } },
            { no: 6, name: "requesting_module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "psbt", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "Psbt" } }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.chain = "";
        message.sigId = "0";
        message.keyId = "";
        message.pubKeys = {};
        message.requestingModule = "";
        message.psbt = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 sig_id */ 3:
                    message.sigId = reader.uint64().toString();
                    break;
                case /* string key_id */ 4:
                    message.keyId = reader.string();
                    break;
                case /* map<string, bytes> pub_keys */ 5:
                    this.binaryReadMap5(message.pubKeys, reader, options);
                    break;
                case /* string requesting_module */ 6:
                    message.requestingModule = reader.string();
                    break;
                case /* bytes psbt */ 7:
                    message.psbt = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.bytes();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field scalar.covenant.v1beta1.SigningPsbtStarted.pub_keys");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 sig_id = 3; */
        if (message.sigId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sigId);
        /* string key_id = 4; */
        if (message.keyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.keyId);
        /* map<string, bytes> pub_keys = 5; */
        for (let k of globalThis.Object.keys(message.pubKeys))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.pubKeys[k]).join();
        /* string requesting_module = 6; */
        if (message.requestingModule !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.requestingModule);
        /* bytes psbt = 7; */
        if (message.psbt.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.psbt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.SigningPsbtStarted
 */
export const SigningPsbtStarted = new SigningPsbtStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningPsbtCompleted$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.SigningPsbtCompleted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.SigningPsbtCompleted
 */
export const SigningPsbtCompleted = new SigningPsbtCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningPsbtExpired$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.SigningPsbtExpired", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.SigningPsbtExpired
 */
export const SigningPsbtExpired = new SigningPsbtExpired$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TapScriptSigSubmitted$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.TapScriptSigSubmitted", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sig_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "SigID" } },
            { no: 3, name: "participant", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } },
            { no: 4, name: "tap_script_sig", kind: "message", T: () => TapScriptSig }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.sigId = "0";
        message.participant = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* uint64 sig_id */ 2:
                    message.sigId = reader.uint64().toString();
                    break;
                case /* bytes participant */ 3:
                    message.participant = reader.bytes();
                    break;
                case /* scalar.covenant.exported.v1beta1.TapScriptSig tap_script_sig */ 4:
                    message.tapScriptSig = TapScriptSig.internalBinaryRead(reader, reader.uint32(), options, message.tapScriptSig);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* uint64 sig_id = 2; */
        if (message.sigId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sigId);
        /* bytes participant = 3; */
        if (message.participant.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.participant);
        /* scalar.covenant.exported.v1beta1.TapScriptSig tap_script_sig = 4; */
        if (message.tapScriptSig)
            TapScriptSig.internalBinaryWrite(message.tapScriptSig, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.TapScriptSigSubmitted
 */
export const TapScriptSigSubmitted = new TapScriptSigSubmitted$Type();
