// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/covenant/v1beta1/types.proto" (package "scalar.covenant.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum scalar.covenant.v1beta1.Status
 */
export var Status;
(function (Status) {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    Status[Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_ACTIVATED = 1;
     */
    Status[Status["ACTIVATED"] = 1] = "ACTIVATED";
    /**
     * @generated from protobuf enum value: STATUS_DEACTIVATED = 2;
     */
    Status[Status["DEACTIVATED"] = 2] = "DEACTIVATED";
})(Status || (Status = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Custodian$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.Custodian", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "btc_pubkey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["scalar.covenant.v1beta1.Status", Status, "STATUS_"] },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.btcPubkey = new Uint8Array(0);
        message.status = 0;
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bytes btc_pubkey */ 2:
                    message.btcPubkey = reader.bytes();
                    break;
                case /* scalar.covenant.v1beta1.Status status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bytes btc_pubkey = 2; */
        if (message.btcPubkey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.btcPubkey);
        /* scalar.covenant.v1beta1.Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.Custodian
 */
export const Custodian = new Custodian$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustodianGroup$Type extends MessageType {
    constructor() {
        super("scalar.covenant.v1beta1.CustodianGroup", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "btc_pubkey", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "quorum", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["scalar.covenant.v1beta1.Status", Status, "STATUS_"] },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "custodians", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Custodian }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.uid = "";
        message.name = "";
        message.btcPubkey = "";
        message.quorum = 0;
        message.status = 0;
        message.description = "";
        message.custodians = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string btc_pubkey */ 3:
                    message.btcPubkey = reader.string();
                    break;
                case /* uint32 quorum */ 4:
                    message.quorum = reader.uint32();
                    break;
                case /* scalar.covenant.v1beta1.Status status */ 5:
                    message.status = reader.int32();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* repeated scalar.covenant.v1beta1.Custodian custodians */ 7:
                    message.custodians.push(Custodian.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string btc_pubkey = 3; */
        if (message.btcPubkey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.btcPubkey);
        /* uint32 quorum = 4; */
        if (message.quorum !== 0)
            writer.tag(4, WireType.Varint).uint32(message.quorum);
        /* scalar.covenant.v1beta1.Status status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* repeated scalar.covenant.v1beta1.Custodian custodians = 7; */
        for (let i = 0; i < message.custodians.length; i++)
            Custodian.internalBinaryWrite(message.custodians[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.v1beta1.CustodianGroup
 */
export const CustodianGroup = new CustodianGroup$Type();
