// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "scalar/covenant/exported/v1beta1/types.proto" (package "scalar.covenant.exported.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum scalar.covenant.exported.v1beta1.PsbtState
 */
export var PsbtState;
(function (PsbtState) {
    /**
     * @generated from protobuf enum value: PSBT_STATE_UNSPECIFIED = 0;
     */
    PsbtState[PsbtState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: PSBT_STATE_PENDING = 1;
     */
    PsbtState[PsbtState["PENDING"] = 1] = "PENDING";
    /**
     * @generated from protobuf enum value: PSBT_STATE_CREATING = 2;
     */
    PsbtState[PsbtState["CREATING"] = 2] = "CREATING";
    /**
     * @generated from protobuf enum value: PSBT_STATE_SIGNING = 3;
     */
    PsbtState[PsbtState["SIGNING"] = 3] = "SIGNING";
    /**
     * @generated from protobuf enum value: PSBT_STATE_COMPLETED = 4;
     */
    PsbtState[PsbtState["COMPLETED"] = 4] = "COMPLETED";
})(PsbtState || (PsbtState = {}));
/**
 * @generated from protobuf enum scalar.covenant.exported.v1beta1.KeyState
 */
export var KeyState;
(function (KeyState) {
    /**
     * @generated from protobuf enum value: KEY_STATE_UNSPECIFIED = 0;
     */
    KeyState[KeyState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: KEY_STATE_ASSIGNED = 1;
     */
    KeyState[KeyState["ASSIGNED"] = 1] = "ASSIGNED";
    /**
     * @generated from protobuf enum value: KEY_STATE_ACTIVE = 2;
     */
    KeyState[KeyState["ACTIVE"] = 2] = "ACTIVE";
})(KeyState || (KeyState = {}));
// @generated message type with reflection information, may provide speed optimized methods
class TapScriptSig$Type extends MessageType {
    constructor() {
        super("scalar.covenant.exported.v1beta1.TapScriptSig", [
            { no: 1, name: "key_x_only", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customtype": "KeyXOnly" } },
            { no: 2, name: "leaf_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customtype": "LeafHash" } },
            { no: 3, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customtype": "Signature" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyXOnly = new Uint8Array(0);
        message.leafHash = new Uint8Array(0);
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key_x_only */ 1:
                    message.keyXOnly = reader.bytes();
                    break;
                case /* bytes leaf_hash */ 2:
                    message.leafHash = reader.bytes();
                    break;
                case /* bytes signature */ 3:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes key_x_only = 1; */
        if (message.keyXOnly.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.keyXOnly);
        /* bytes leaf_hash = 2; */
        if (message.leafHash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.leafHash);
        /* bytes signature = 3; */
        if (message.signature.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message scalar.covenant.exported.v1beta1.TapScriptSig
 */
export const TapScriptSig = new TapScriptSig$Type();
