// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/tx.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/tx.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { AccessConfig } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class MsgStoreCode$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgStoreCode", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wasm_byte_code", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "WASMByteCode" } },
            { no: 5, name: "instantiate_permission", kind: "message", T: () => AccessConfig }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.wasmByteCode = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* bytes wasm_byte_code */ 2:
                    message.wasmByteCode = reader.bytes();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig instantiate_permission */ 5:
                    message.instantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.instantiatePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* bytes wasm_byte_code = 2; */
        if (message.wasmByteCode.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.wasmByteCode);
        /* cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5; */
        if (message.instantiatePermission)
            AccessConfig.internalBinaryWrite(message.instantiatePermission, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgStoreCode
 */
export const MsgStoreCode = new MsgStoreCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgStoreCodeResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgStoreCodeResponse", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 2, name: "checksum", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        message.checksum = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* bytes checksum */ 2:
                    message.checksum = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        /* bytes checksum = 2; */
        if (message.checksum.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.checksum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgStoreCodeResponse
 */
export const MsgStoreCodeResponse = new MsgStoreCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgInstantiateContract$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgInstantiateContract", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 4, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 6, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.admin = "";
        message.codeId = "0";
        message.label = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string admin */ 2:
                    message.admin = reader.string();
                    break;
                case /* uint64 code_id */ 3:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* string label */ 4:
                    message.label = reader.string();
                    break;
                case /* bytes msg */ 5:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 6:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string admin = 2; */
        if (message.admin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.admin);
        /* uint64 code_id = 3; */
        if (message.codeId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.codeId);
        /* string label = 4; */
        if (message.label !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.label);
        /* bytes msg = 5; */
        if (message.msg.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 6; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgInstantiateContract
 */
export const MsgInstantiateContract = new MsgInstantiateContract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgInstantiateContract2$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgInstantiateContract2", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 4, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 6, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 7, name: "salt", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "fix_msg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.admin = "";
        message.codeId = "0";
        message.label = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        message.salt = new Uint8Array(0);
        message.fixMsg = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string admin */ 2:
                    message.admin = reader.string();
                    break;
                case /* uint64 code_id */ 3:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* string label */ 4:
                    message.label = reader.string();
                    break;
                case /* bytes msg */ 5:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 6:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes salt */ 7:
                    message.salt = reader.bytes();
                    break;
                case /* bool fix_msg */ 8:
                    message.fixMsg = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string admin = 2; */
        if (message.admin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.admin);
        /* uint64 code_id = 3; */
        if (message.codeId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.codeId);
        /* string label = 4; */
        if (message.label !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.label);
        /* bytes msg = 5; */
        if (message.msg.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 6; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bytes salt = 7; */
        if (message.salt.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.salt);
        /* bool fix_msg = 8; */
        if (message.fixMsg !== false)
            writer.tag(8, WireType.Varint).bool(message.fixMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgInstantiateContract2
 */
export const MsgInstantiateContract2 = new MsgInstantiateContract2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgInstantiateContractResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgInstantiateContractResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgInstantiateContractResponse
 */
export const MsgInstantiateContractResponse = new MsgInstantiateContractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgInstantiateContract2Response$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgInstantiateContract2Response", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgInstantiateContract2Response
 */
export const MsgInstantiateContract2Response = new MsgInstantiateContract2Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgExecuteContract$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgExecuteContract", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 5, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.contract = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string contract */ 2:
                    message.contract = reader.string();
                    break;
                case /* bytes msg */ 3:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 5:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string contract = 2; */
        if (message.contract !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contract);
        /* bytes msg = 3; */
        if (message.msg.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 5; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgExecuteContract
 */
export const MsgExecuteContract = new MsgExecuteContract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgExecuteContractResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgExecuteContractResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgExecuteContractResponse
 */
export const MsgExecuteContractResponse = new MsgExecuteContractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMigrateContract$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgMigrateContract", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 4, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.contract = "";
        message.codeId = "0";
        message.msg = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string contract */ 2:
                    message.contract = reader.string();
                    break;
                case /* uint64 code_id */ 3:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* bytes msg */ 4:
                    message.msg = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string contract = 2; */
        if (message.contract !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contract);
        /* uint64 code_id = 3; */
        if (message.codeId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.codeId);
        /* bytes msg = 4; */
        if (message.msg.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgMigrateContract
 */
export const MsgMigrateContract = new MsgMigrateContract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgMigrateContractResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgMigrateContractResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgMigrateContractResponse
 */
export const MsgMigrateContractResponse = new MsgMigrateContractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateAdmin$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgUpdateAdmin", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.newAdmin = "";
        message.contract = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string new_admin */ 2:
                    message.newAdmin = reader.string();
                    break;
                case /* string contract */ 3:
                    message.contract = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string new_admin = 2; */
        if (message.newAdmin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newAdmin);
        /* string contract = 3; */
        if (message.contract !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgUpdateAdmin
 */
export const MsgUpdateAdmin = new MsgUpdateAdmin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateAdminResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgUpdateAdminResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgUpdateAdminResponse
 */
export const MsgUpdateAdminResponse = new MsgUpdateAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgClearAdmin$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgClearAdmin", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.contract = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* string contract */ 3:
                    message.contract = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* string contract = 3; */
        if (message.contract !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgClearAdmin
 */
export const MsgClearAdmin = new MsgClearAdmin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgClearAdminResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgClearAdminResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgClearAdminResponse
 */
export const MsgClearAdminResponse = new MsgClearAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateInstantiateConfig$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgUpdateInstantiateConfig", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 3, name: "new_instantiate_permission", kind: "message", T: () => AccessConfig }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = "";
        message.codeId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 code_id */ 2:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig new_instantiate_permission */ 3:
                    message.newInstantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.newInstantiatePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 code_id = 2; */
        if (message.codeId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.codeId);
        /* cosmwasm.wasm.v1.AccessConfig new_instantiate_permission = 3; */
        if (message.newInstantiatePermission)
            AccessConfig.internalBinaryWrite(message.newInstantiatePermission, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgUpdateInstantiateConfig
 */
export const MsgUpdateInstantiateConfig = new MsgUpdateInstantiateConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateInstantiateConfigResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse
 */
export const MsgUpdateInstantiateConfigResponse = new MsgUpdateInstantiateConfigResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmwasm.wasm.v1.Msg
 */
export const Msg = new ServiceType("cosmwasm.wasm.v1.Msg", [
    { name: "StoreCode", options: {}, I: MsgStoreCode, O: MsgStoreCodeResponse },
    { name: "InstantiateContract", options: {}, I: MsgInstantiateContract, O: MsgInstantiateContractResponse },
    { name: "InstantiateContract2", options: {}, I: MsgInstantiateContract2, O: MsgInstantiateContract2Response },
    { name: "ExecuteContract", options: {}, I: MsgExecuteContract, O: MsgExecuteContractResponse },
    { name: "MigrateContract", options: {}, I: MsgMigrateContract, O: MsgMigrateContractResponse },
    { name: "UpdateAdmin", options: {}, I: MsgUpdateAdmin, O: MsgUpdateAdminResponse },
    { name: "ClearAdmin", options: {}, I: MsgClearAdmin, O: MsgClearAdminResponse },
    { name: "UpdateInstantiateConfig", options: {}, I: MsgUpdateInstantiateConfig, O: MsgUpdateInstantiateConfigResponse }
]);
