// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/query.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query provides defines the gRPC querier service
 *
 * @generated from protobuf service cosmwasm.wasm.v1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * ContractInfo gets the contract meta data
     *
     * @generated from protobuf rpc: ContractInfo(cosmwasm.wasm.v1.QueryContractInfoRequest) returns (cosmwasm.wasm.v1.QueryContractInfoResponse);
     */
    contractInfo(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ContractHistory gets the contract code history
     *
     * @generated from protobuf rpc: ContractHistory(cosmwasm.wasm.v1.QueryContractHistoryRequest) returns (cosmwasm.wasm.v1.QueryContractHistoryResponse);
     */
    contractHistory(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ContractsByCode lists all smart contracts for a code id
     *
     * @generated from protobuf rpc: ContractsByCode(cosmwasm.wasm.v1.QueryContractsByCodeRequest) returns (cosmwasm.wasm.v1.QueryContractsByCodeResponse);
     */
    contractsByCode(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * AllContractState gets all raw store data for a single contract
     *
     * @generated from protobuf rpc: AllContractState(cosmwasm.wasm.v1.QueryAllContractStateRequest) returns (cosmwasm.wasm.v1.QueryAllContractStateResponse);
     */
    allContractState(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * RawContractState gets single key from the raw store data of a contract
     *
     * @generated from protobuf rpc: RawContractState(cosmwasm.wasm.v1.QueryRawContractStateRequest) returns (cosmwasm.wasm.v1.QueryRawContractStateResponse);
     */
    rawContractState(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * SmartContractState get smart query result from the contract
     *
     * @generated from protobuf rpc: SmartContractState(cosmwasm.wasm.v1.QuerySmartContractStateRequest) returns (cosmwasm.wasm.v1.QuerySmartContractStateResponse);
     */
    smartContractState(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Code gets the binary code and metadata for a singe wasm code
     *
     * @generated from protobuf rpc: Code(cosmwasm.wasm.v1.QueryCodeRequest) returns (cosmwasm.wasm.v1.QueryCodeResponse);
     */
    code(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Codes gets the metadata for all stored wasm codes
     *
     * @generated from protobuf rpc: Codes(cosmwasm.wasm.v1.QueryCodesRequest) returns (cosmwasm.wasm.v1.QueryCodesResponse);
     */
    codes(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * PinnedCodes gets the pinned code ids
     *
     * @generated from protobuf rpc: PinnedCodes(cosmwasm.wasm.v1.QueryPinnedCodesRequest) returns (cosmwasm.wasm.v1.QueryPinnedCodesResponse);
     */
    pinnedCodes(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Params gets the module params
     *
     * @generated from protobuf rpc: Params(cosmwasm.wasm.v1.QueryParamsRequest) returns (cosmwasm.wasm.v1.QueryParamsResponse);
     */
    params(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ContractsByCreator gets the contracts by creator
     *
     * @generated from protobuf rpc: ContractsByCreator(cosmwasm.wasm.v1.QueryContractsByCreatorRequest) returns (cosmwasm.wasm.v1.QueryContractsByCreatorResponse);
     */
    contractsByCreator(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
