// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/genesis.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ContractCodeHistoryEntry } from "./types";
import { Model } from "./types";
import { ContractInfo } from "./types";
import { CodeInfo } from "./types";
import { Params } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "codes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Code, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "codes,omitempty" } },
            { no: 3, name: "contracts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Contract, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "contracts,omitempty" } },
            { no: 4, name: "sequences", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Sequence, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "sequences,omitempty" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codes = [];
        message.contracts = [];
        message.sequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmwasm.wasm.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* repeated cosmwasm.wasm.v1.Code codes */ 2:
                    message.codes.push(Code.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmwasm.wasm.v1.Contract contracts */ 3:
                    message.contracts.push(Contract.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmwasm.wasm.v1.Sequence sequences */ 4:
                    message.sequences.push(Sequence.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmwasm.wasm.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmwasm.wasm.v1.Code codes = 2; */
        for (let i = 0; i < message.codes.length; i++)
            Code.internalBinaryWrite(message.codes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmwasm.wasm.v1.Contract contracts = 3; */
        for (let i = 0; i < message.contracts.length; i++)
            Contract.internalBinaryWrite(message.contracts[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmwasm.wasm.v1.Sequence sequences = 4; */
        for (let i = 0; i < message.sequences.length; i++)
            Sequence.internalBinaryWrite(message.sequences[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Code$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.Code", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 2, name: "code_info", kind: "message", T: () => CodeInfo, options: { "gogoproto.nullable": false } },
            { no: 3, name: "code_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "pinned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        message.codeBytes = new Uint8Array(0);
        message.pinned = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* cosmwasm.wasm.v1.CodeInfo code_info */ 2:
                    message.codeInfo = CodeInfo.internalBinaryRead(reader, reader.uint32(), options, message.codeInfo);
                    break;
                case /* bytes code_bytes */ 3:
                    message.codeBytes = reader.bytes();
                    break;
                case /* bool pinned */ 4:
                    message.pinned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        /* cosmwasm.wasm.v1.CodeInfo code_info = 2; */
        if (message.codeInfo)
            CodeInfo.internalBinaryWrite(message.codeInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes code_bytes = 3; */
        if (message.codeBytes.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.codeBytes);
        /* bool pinned = 4; */
        if (message.pinned !== false)
            writer.tag(4, WireType.Varint).bool(message.pinned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.Code
 */
export const Code = new Code$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Contract$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.Contract", [
            { no: 1, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_info", kind: "message", T: () => ContractInfo, options: { "gogoproto.nullable": false } },
            { no: 3, name: "contract_state", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Model, options: { "gogoproto.nullable": false } },
            { no: 4, name: "contract_code_history", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractCodeHistoryEntry, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.contractAddress = "";
        message.contractState = [];
        message.contractCodeHistory = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string contract_address */ 1:
                    message.contractAddress = reader.string();
                    break;
                case /* cosmwasm.wasm.v1.ContractInfo contract_info */ 2:
                    message.contractInfo = ContractInfo.internalBinaryRead(reader, reader.uint32(), options, message.contractInfo);
                    break;
                case /* repeated cosmwasm.wasm.v1.Model contract_state */ 3:
                    message.contractState.push(Model.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history */ 4:
                    message.contractCodeHistory.push(ContractCodeHistoryEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string contract_address = 1; */
        if (message.contractAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.contractAddress);
        /* cosmwasm.wasm.v1.ContractInfo contract_info = 2; */
        if (message.contractInfo)
            ContractInfo.internalBinaryWrite(message.contractInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmwasm.wasm.v1.Model contract_state = 3; */
        for (let i = 0; i < message.contractState.length; i++)
            Model.internalBinaryWrite(message.contractState[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry contract_code_history = 4; */
        for (let i = 0; i < message.contractCodeHistory.length; i++)
            ContractCodeHistoryEntry.internalBinaryWrite(message.contractCodeHistory[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.Contract
 */
export const Contract = new Contract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sequence$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.Sequence", [
            { no: 1, name: "id_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "IDKey" } },
            { no: 2, name: "value", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.idKey = new Uint8Array(0);
        message.value = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id_key */ 1:
                    message.idKey = reader.bytes();
                    break;
                case /* uint64 value */ 2:
                    message.value = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes id_key = 1; */
        if (message.idKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.idKey);
        /* uint64 value = 2; */
        if (message.value !== "0")
            writer.tag(2, WireType.Varint).uint64(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.Sequence
 */
export const Sequence = new Sequence$Type();
