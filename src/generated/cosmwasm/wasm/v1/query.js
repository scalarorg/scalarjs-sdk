// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/query.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/query.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./types";
import { AccessConfig } from "./types";
import { Model } from "./types";
import { PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { ContractCodeHistoryEntry } from "./types";
import { PageRequest } from "../../../cosmos/base/query/v1beta1/pagination";
import { ContractInfo } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractInfoRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractInfoRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractInfoRequest
 */
export const QueryContractInfoRequest = new QueryContractInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractInfoResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractInfoResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contract_info", kind: "message", T: () => ContractInfo, options: { "gogoproto.nullable": false, "gogoproto.embed": true, "gogoproto.jsontag": "" } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmwasm.wasm.v1.ContractInfo contract_info */ 2:
                    message.contractInfo = ContractInfo.internalBinaryRead(reader, reader.uint32(), options, message.contractInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmwasm.wasm.v1.ContractInfo contract_info = 2; */
        if (message.contractInfo)
            ContractInfo.internalBinaryWrite(message.contractInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractInfoResponse
 */
export const QueryContractInfoResponse = new QueryContractInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractHistoryRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractHistoryRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractHistoryRequest
 */
export const QueryContractHistoryRequest = new QueryContractHistoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractHistoryResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractHistoryResponse", [
            { no: 1, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ContractCodeHistoryEntry, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry entries */ 1:
                    message.entries.push(ContractCodeHistoryEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmwasm.wasm.v1.ContractCodeHistoryEntry entries = 1; */
        for (let i = 0; i < message.entries.length; i++)
            ContractCodeHistoryEntry.internalBinaryWrite(message.entries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractHistoryResponse
 */
export const QueryContractHistoryResponse = new QueryContractHistoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractsByCodeRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractsByCodeRequest", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractsByCodeRequest
 */
export const QueryContractsByCodeRequest = new QueryContractsByCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractsByCodeResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractsByCodeResponse", [
            { no: 1, name: "contracts", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.contracts = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string contracts */ 1:
                    message.contracts.push(reader.string());
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string contracts = 1; */
        for (let i = 0; i < message.contracts.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.contracts[i]);
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractsByCodeResponse
 */
export const QueryContractsByCodeResponse = new QueryContractsByCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllContractStateRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryAllContractStateRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryAllContractStateRequest
 */
export const QueryAllContractStateRequest = new QueryAllContractStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllContractStateResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryAllContractStateResponse", [
            { no: 1, name: "models", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Model, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.models = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmwasm.wasm.v1.Model models */ 1:
                    message.models.push(Model.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmwasm.wasm.v1.Model models = 1; */
        for (let i = 0; i < message.models.length; i++)
            Model.internalBinaryWrite(message.models[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryAllContractStateResponse
 */
export const QueryAllContractStateResponse = new QueryAllContractStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRawContractStateRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryRawContractStateRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "query_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.queryData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes query_data */ 2:
                    message.queryData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes query_data = 2; */
        if (message.queryData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.queryData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryRawContractStateRequest
 */
export const QueryRawContractStateRequest = new QueryRawContractStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRawContractStateResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryRawContractStateResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryRawContractStateResponse
 */
export const QueryRawContractStateResponse = new QueryRawContractStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySmartContractStateRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QuerySmartContractStateRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "query_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.queryData = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes query_data */ 2:
                    message.queryData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes query_data = 2; */
        if (message.queryData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.queryData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QuerySmartContractStateRequest
 */
export const QuerySmartContractStateRequest = new QuerySmartContractStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySmartContractStateResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QuerySmartContractStateResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QuerySmartContractStateResponse
 */
export const QuerySmartContractStateResponse = new QuerySmartContractStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodeRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryCodeRequest", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryCodeRequest
 */
export const QueryCodeRequest = new QueryCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CodeInfoResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.CodeInfoResponse", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID", "gogoproto.jsontag": "id" } },
            { no: 2, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "data_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/tendermint/tendermint/libs/bytes.HexBytes" } },
            { no: 6, name: "instantiate_permission", kind: "message", T: () => AccessConfig, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        message.creator = "";
        message.dataHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* string creator */ 2:
                    message.creator = reader.string();
                    break;
                case /* bytes data_hash */ 3:
                    message.dataHash = reader.bytes();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig instantiate_permission */ 6:
                    message.instantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.instantiatePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        /* string creator = 2; */
        if (message.creator !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creator);
        /* bytes data_hash = 3; */
        if (message.dataHash.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.dataHash);
        /* cosmwasm.wasm.v1.AccessConfig instantiate_permission = 6; */
        if (message.instantiatePermission)
            AccessConfig.internalBinaryWrite(message.instantiatePermission, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.CodeInfoResponse
 */
export const CodeInfoResponse = new CodeInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodeResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryCodeResponse", [
            { no: 1, name: "code_info", kind: "message", T: () => CodeInfoResponse, options: { "gogoproto.embed": true, "gogoproto.jsontag": "" } },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.jsontag": "data" } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmwasm.wasm.v1.CodeInfoResponse code_info */ 1:
                    message.codeInfo = CodeInfoResponse.internalBinaryRead(reader, reader.uint32(), options, message.codeInfo);
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmwasm.wasm.v1.CodeInfoResponse code_info = 1; */
        if (message.codeInfo)
            CodeInfoResponse.internalBinaryWrite(message.codeInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryCodeResponse
 */
export const QueryCodeResponse = new QueryCodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodesRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryCodesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryCodesRequest
 */
export const QueryCodesRequest = new QueryCodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCodesResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryCodesResponse", [
            { no: 1, name: "code_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CodeInfoResponse, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeInfos = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmwasm.wasm.v1.CodeInfoResponse code_infos */ 1:
                    message.codeInfos.push(CodeInfoResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmwasm.wasm.v1.CodeInfoResponse code_infos = 1; */
        for (let i = 0; i < message.codeInfos.length; i++)
            CodeInfoResponse.internalBinaryWrite(message.codeInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryCodesResponse
 */
export const QueryCodesResponse = new QueryCodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPinnedCodesRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryPinnedCodesRequest", [
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryPinnedCodesRequest
 */
export const QueryPinnedCodesRequest = new QueryPinnedCodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPinnedCodesResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryPinnedCodesResponse", [
            { no: 1, name: "code_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customname": "CodeIDs" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 code_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.codeIds.push(reader.uint64().toString());
                    else
                        message.codeIds.push(reader.uint64().toString());
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint64 code_ids = 1; */
        if (message.codeIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.codeIds.length; i++)
                writer.uint64(message.codeIds[i]);
            writer.join();
        }
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryPinnedCodesResponse
 */
export const QueryPinnedCodesResponse = new QueryPinnedCodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryParamsRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmwasm.wasm.v1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmwasm.wasm.v1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractsByCreatorRequest$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractsByCreatorRequest", [
            { no: 1, name: "creator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.creatorAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator_address */ 1:
                    message.creatorAddress = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string creator_address = 1; */
        if (message.creatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creatorAddress);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractsByCreatorRequest
 */
export const QueryContractsByCreatorRequest = new QueryContractsByCreatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryContractsByCreatorResponse$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.QueryContractsByCreatorResponse", [
            { no: 1, name: "contract_addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.contractAddresses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string contract_addresses */ 1:
                    message.contractAddresses.push(reader.string());
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string contract_addresses = 1; */
        for (let i = 0; i < message.contractAddresses.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.contractAddresses[i]);
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.QueryContractsByCreatorResponse
 */
export const QueryContractsByCreatorResponse = new QueryContractsByCreatorResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmwasm.wasm.v1.Query
 */
export const Query = new ServiceType("cosmwasm.wasm.v1.Query", [
    { name: "ContractInfo", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contract/{address}" } }, I: QueryContractInfoRequest, O: QueryContractInfoResponse },
    { name: "ContractHistory", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contract/{address}/history" } }, I: QueryContractHistoryRequest, O: QueryContractHistoryResponse },
    { name: "ContractsByCode", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/code/{code_id}/contracts" } }, I: QueryContractsByCodeRequest, O: QueryContractsByCodeResponse },
    { name: "AllContractState", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contract/{address}/state" } }, I: QueryAllContractStateRequest, O: QueryAllContractStateResponse },
    { name: "RawContractState", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contract/{address}/raw/{query_data}" } }, I: QueryRawContractStateRequest, O: QueryRawContractStateResponse },
    { name: "SmartContractState", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contract/{address}/smart/{query_data}" } }, I: QuerySmartContractStateRequest, O: QuerySmartContractStateResponse },
    { name: "Code", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/code/{code_id}" } }, I: QueryCodeRequest, O: QueryCodeResponse },
    { name: "Codes", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/code" } }, I: QueryCodesRequest, O: QueryCodesResponse },
    { name: "PinnedCodes", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/codes/pinned" } }, I: QueryPinnedCodesRequest, O: QueryPinnedCodesResponse },
    { name: "Params", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/codes/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "ContractsByCreator", options: { "google.api.http": { get: "/cosmwasm/wasm/v1/contracts/creator/{creator_address}" } }, I: QueryContractsByCreatorRequest, O: QueryContractsByCreatorResponse }
]);
