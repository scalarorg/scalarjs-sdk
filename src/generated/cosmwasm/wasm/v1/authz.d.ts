// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/authz.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Any } from "../../../google/protobuf/any";
/**
 * ContractExecutionAuthorization defines authorization for wasm execute.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.ContractExecutionAuthorization
 */
export interface ContractExecutionAuthorization {
    /**
     * Grants for contract executions
     *
     * @generated from protobuf field: repeated cosmwasm.wasm.v1.ContractGrant grants = 1;
     */
    grants: ContractGrant[];
}
/**
 * ContractMigrationAuthorization defines authorization for wasm contract
 * migration. Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.ContractMigrationAuthorization
 */
export interface ContractMigrationAuthorization {
    /**
     * Grants for contract migrations
     *
     * @generated from protobuf field: repeated cosmwasm.wasm.v1.ContractGrant grants = 1;
     */
    grants: ContractGrant[];
}
/**
 * ContractGrant a granted permission for a single contract
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.ContractGrant
 */
export interface ContractGrant {
    /**
     * Contract is the bech32 address of the smart contract
     *
     * @generated from protobuf field: string contract = 1;
     */
    contract: string;
    /**
     * Limit defines execution limits that are enforced and updated when the grant
     * is applied. When the limit lapsed the grant is removed.
     *
     * @generated from protobuf field: google.protobuf.Any limit = 2;
     */
    limit?: Any;
    /**
     * Filter define more fine-grained control on the message payload passed
     * to the contract in the operation. When no filter applies on execution, the
     * operation is prohibited.
     *
     * @generated from protobuf field: google.protobuf.Any filter = 3;
     */
    filter?: Any;
}
/**
 * MaxCallsLimit limited number of calls to the contract. No funds transferable.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.MaxCallsLimit
 */
export interface MaxCallsLimit {
    /**
     * Remaining number that is decremented on each execution
     *
     * @generated from protobuf field: uint64 remaining = 1;
     */
    remaining: string;
}
/**
 * MaxFundsLimit defines the maximal amounts that can be sent to the contract.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.MaxFundsLimit
 */
export interface MaxFundsLimit {
    /**
     * Amounts is the maximal amount of tokens transferable to the contract.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amounts = 1;
     */
    amounts: Coin[];
}
/**
 * CombinedLimit defines the maximal amounts that can be sent to a contract and
 * the maximal number of calls executable. Both need to remain >0 to be valid.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.CombinedLimit
 */
export interface CombinedLimit {
    /**
     * Remaining number that is decremented on each execution
     *
     * @generated from protobuf field: uint64 calls_remaining = 1;
     */
    callsRemaining: string;
    /**
     * Amounts is the maximal amount of tokens transferable to the contract.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amounts = 2;
     */
    amounts: Coin[];
}
/**
 * AllowAllMessagesFilter is a wildcard to allow any type of contract payload
 * message.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.AllowAllMessagesFilter
 */
export interface AllowAllMessagesFilter {
}
/**
 * AcceptedMessageKeysFilter accept only the specific contract message keys in
 * the json object to be executed.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.AcceptedMessageKeysFilter
 */
export interface AcceptedMessageKeysFilter {
    /**
     * Messages is the list of unique keys
     *
     * @generated from protobuf field: repeated string keys = 1;
     */
    keys: string[];
}
/**
 * AcceptedMessagesFilter accept only the specific raw contract messages to be
 * executed.
 * Since: wasmd 0.30
 *
 * @generated from protobuf message cosmwasm.wasm.v1.AcceptedMessagesFilter
 */
export interface AcceptedMessagesFilter {
    /**
     * Messages is the list of raw contract messages
     *
     * @generated from protobuf field: repeated bytes messages = 1;
     */
    messages: Uint8Array[];
}
declare class ContractExecutionAuthorization$Type extends MessageType<ContractExecutionAuthorization> {
    constructor();
    create(value?: PartialMessage<ContractExecutionAuthorization>): ContractExecutionAuthorization;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractExecutionAuthorization): ContractExecutionAuthorization;
    internalBinaryWrite(message: ContractExecutionAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.ContractExecutionAuthorization
 */
export declare const ContractExecutionAuthorization: ContractExecutionAuthorization$Type;
declare class ContractMigrationAuthorization$Type extends MessageType<ContractMigrationAuthorization> {
    constructor();
    create(value?: PartialMessage<ContractMigrationAuthorization>): ContractMigrationAuthorization;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractMigrationAuthorization): ContractMigrationAuthorization;
    internalBinaryWrite(message: ContractMigrationAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.ContractMigrationAuthorization
 */
export declare const ContractMigrationAuthorization: ContractMigrationAuthorization$Type;
declare class ContractGrant$Type extends MessageType<ContractGrant> {
    constructor();
    create(value?: PartialMessage<ContractGrant>): ContractGrant;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContractGrant): ContractGrant;
    internalBinaryWrite(message: ContractGrant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.ContractGrant
 */
export declare const ContractGrant: ContractGrant$Type;
declare class MaxCallsLimit$Type extends MessageType<MaxCallsLimit> {
    constructor();
    create(value?: PartialMessage<MaxCallsLimit>): MaxCallsLimit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaxCallsLimit): MaxCallsLimit;
    internalBinaryWrite(message: MaxCallsLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MaxCallsLimit
 */
export declare const MaxCallsLimit: MaxCallsLimit$Type;
declare class MaxFundsLimit$Type extends MessageType<MaxFundsLimit> {
    constructor();
    create(value?: PartialMessage<MaxFundsLimit>): MaxFundsLimit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaxFundsLimit): MaxFundsLimit;
    internalBinaryWrite(message: MaxFundsLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MaxFundsLimit
 */
export declare const MaxFundsLimit: MaxFundsLimit$Type;
declare class CombinedLimit$Type extends MessageType<CombinedLimit> {
    constructor();
    create(value?: PartialMessage<CombinedLimit>): CombinedLimit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombinedLimit): CombinedLimit;
    internalBinaryWrite(message: CombinedLimit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.CombinedLimit
 */
export declare const CombinedLimit: CombinedLimit$Type;
declare class AllowAllMessagesFilter$Type extends MessageType<AllowAllMessagesFilter> {
    constructor();
    create(value?: PartialMessage<AllowAllMessagesFilter>): AllowAllMessagesFilter;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllowAllMessagesFilter): AllowAllMessagesFilter;
    internalBinaryWrite(message: AllowAllMessagesFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.AllowAllMessagesFilter
 */
export declare const AllowAllMessagesFilter: AllowAllMessagesFilter$Type;
declare class AcceptedMessageKeysFilter$Type extends MessageType<AcceptedMessageKeysFilter> {
    constructor();
    create(value?: PartialMessage<AcceptedMessageKeysFilter>): AcceptedMessageKeysFilter;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptedMessageKeysFilter): AcceptedMessageKeysFilter;
    internalBinaryWrite(message: AcceptedMessageKeysFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.AcceptedMessageKeysFilter
 */
export declare const AcceptedMessageKeysFilter: AcceptedMessageKeysFilter$Type;
declare class AcceptedMessagesFilter$Type extends MessageType<AcceptedMessagesFilter> {
    constructor();
    create(value?: PartialMessage<AcceptedMessagesFilter>): AcceptedMessagesFilter;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptedMessagesFilter): AcceptedMessagesFilter;
    internalBinaryWrite(message: AcceptedMessagesFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.AcceptedMessagesFilter
 */
export declare const AcceptedMessagesFilter: AcceptedMessagesFilter$Type;
export {};
