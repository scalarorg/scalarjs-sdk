// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/query.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { QueryContractsByCreatorResponse } from "./query";
import type { QueryContractsByCreatorRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryPinnedCodesResponse } from "./query";
import type { QueryPinnedCodesRequest } from "./query";
import type { QueryCodesResponse } from "./query";
import type { QueryCodesRequest } from "./query";
import type { QueryCodeResponse } from "./query";
import type { QueryCodeRequest } from "./query";
import type { QuerySmartContractStateResponse } from "./query";
import type { QuerySmartContractStateRequest } from "./query";
import type { QueryRawContractStateResponse } from "./query";
import type { QueryRawContractStateRequest } from "./query";
import type { QueryAllContractStateResponse } from "./query";
import type { QueryAllContractStateRequest } from "./query";
import type { QueryContractsByCodeResponse } from "./query";
import type { QueryContractsByCodeRequest } from "./query";
import type { QueryContractHistoryResponse } from "./query";
import type { QueryContractHistoryRequest } from "./query";
import type { QueryContractInfoResponse } from "./query";
import type { QueryContractInfoRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query provides defines the gRPC querier service
 *
 * @generated from protobuf service cosmwasm.wasm.v1.Query
 */
export interface IQueryClient {
    /**
     * ContractInfo gets the contract meta data
     *
     * @generated from protobuf rpc: ContractInfo(cosmwasm.wasm.v1.QueryContractInfoRequest) returns (cosmwasm.wasm.v1.QueryContractInfoResponse);
     */
    contractInfo(input: QueryContractInfoRequest, options?: RpcOptions): UnaryCall<QueryContractInfoRequest, QueryContractInfoResponse>;
    /**
     * ContractHistory gets the contract code history
     *
     * @generated from protobuf rpc: ContractHistory(cosmwasm.wasm.v1.QueryContractHistoryRequest) returns (cosmwasm.wasm.v1.QueryContractHistoryResponse);
     */
    contractHistory(input: QueryContractHistoryRequest, options?: RpcOptions): UnaryCall<QueryContractHistoryRequest, QueryContractHistoryResponse>;
    /**
     * ContractsByCode lists all smart contracts for a code id
     *
     * @generated from protobuf rpc: ContractsByCode(cosmwasm.wasm.v1.QueryContractsByCodeRequest) returns (cosmwasm.wasm.v1.QueryContractsByCodeResponse);
     */
    contractsByCode(input: QueryContractsByCodeRequest, options?: RpcOptions): UnaryCall<QueryContractsByCodeRequest, QueryContractsByCodeResponse>;
    /**
     * AllContractState gets all raw store data for a single contract
     *
     * @generated from protobuf rpc: AllContractState(cosmwasm.wasm.v1.QueryAllContractStateRequest) returns (cosmwasm.wasm.v1.QueryAllContractStateResponse);
     */
    allContractState(input: QueryAllContractStateRequest, options?: RpcOptions): UnaryCall<QueryAllContractStateRequest, QueryAllContractStateResponse>;
    /**
     * RawContractState gets single key from the raw store data of a contract
     *
     * @generated from protobuf rpc: RawContractState(cosmwasm.wasm.v1.QueryRawContractStateRequest) returns (cosmwasm.wasm.v1.QueryRawContractStateResponse);
     */
    rawContractState(input: QueryRawContractStateRequest, options?: RpcOptions): UnaryCall<QueryRawContractStateRequest, QueryRawContractStateResponse>;
    /**
     * SmartContractState get smart query result from the contract
     *
     * @generated from protobuf rpc: SmartContractState(cosmwasm.wasm.v1.QuerySmartContractStateRequest) returns (cosmwasm.wasm.v1.QuerySmartContractStateResponse);
     */
    smartContractState(input: QuerySmartContractStateRequest, options?: RpcOptions): UnaryCall<QuerySmartContractStateRequest, QuerySmartContractStateResponse>;
    /**
     * Code gets the binary code and metadata for a singe wasm code
     *
     * @generated from protobuf rpc: Code(cosmwasm.wasm.v1.QueryCodeRequest) returns (cosmwasm.wasm.v1.QueryCodeResponse);
     */
    code(input: QueryCodeRequest, options?: RpcOptions): UnaryCall<QueryCodeRequest, QueryCodeResponse>;
    /**
     * Codes gets the metadata for all stored wasm codes
     *
     * @generated from protobuf rpc: Codes(cosmwasm.wasm.v1.QueryCodesRequest) returns (cosmwasm.wasm.v1.QueryCodesResponse);
     */
    codes(input: QueryCodesRequest, options?: RpcOptions): UnaryCall<QueryCodesRequest, QueryCodesResponse>;
    /**
     * PinnedCodes gets the pinned code ids
     *
     * @generated from protobuf rpc: PinnedCodes(cosmwasm.wasm.v1.QueryPinnedCodesRequest) returns (cosmwasm.wasm.v1.QueryPinnedCodesResponse);
     */
    pinnedCodes(input: QueryPinnedCodesRequest, options?: RpcOptions): UnaryCall<QueryPinnedCodesRequest, QueryPinnedCodesResponse>;
    /**
     * Params gets the module params
     *
     * @generated from protobuf rpc: Params(cosmwasm.wasm.v1.QueryParamsRequest) returns (cosmwasm.wasm.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * ContractsByCreator gets the contracts by creator
     *
     * @generated from protobuf rpc: ContractsByCreator(cosmwasm.wasm.v1.QueryContractsByCreatorRequest) returns (cosmwasm.wasm.v1.QueryContractsByCreatorResponse);
     */
    contractsByCreator(input: QueryContractsByCreatorRequest, options?: RpcOptions): UnaryCall<QueryContractsByCreatorRequest, QueryContractsByCreatorResponse>;
}
/**
 * Query provides defines the gRPC querier service
 *
 * @generated from protobuf service cosmwasm.wasm.v1.Query
 */
export declare class QueryClient implements IQueryClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * ContractInfo gets the contract meta data
     *
     * @generated from protobuf rpc: ContractInfo(cosmwasm.wasm.v1.QueryContractInfoRequest) returns (cosmwasm.wasm.v1.QueryContractInfoResponse);
     */
    contractInfo(input: QueryContractInfoRequest, options?: RpcOptions): UnaryCall<QueryContractInfoRequest, QueryContractInfoResponse>;
    /**
     * ContractHistory gets the contract code history
     *
     * @generated from protobuf rpc: ContractHistory(cosmwasm.wasm.v1.QueryContractHistoryRequest) returns (cosmwasm.wasm.v1.QueryContractHistoryResponse);
     */
    contractHistory(input: QueryContractHistoryRequest, options?: RpcOptions): UnaryCall<QueryContractHistoryRequest, QueryContractHistoryResponse>;
    /**
     * ContractsByCode lists all smart contracts for a code id
     *
     * @generated from protobuf rpc: ContractsByCode(cosmwasm.wasm.v1.QueryContractsByCodeRequest) returns (cosmwasm.wasm.v1.QueryContractsByCodeResponse);
     */
    contractsByCode(input: QueryContractsByCodeRequest, options?: RpcOptions): UnaryCall<QueryContractsByCodeRequest, QueryContractsByCodeResponse>;
    /**
     * AllContractState gets all raw store data for a single contract
     *
     * @generated from protobuf rpc: AllContractState(cosmwasm.wasm.v1.QueryAllContractStateRequest) returns (cosmwasm.wasm.v1.QueryAllContractStateResponse);
     */
    allContractState(input: QueryAllContractStateRequest, options?: RpcOptions): UnaryCall<QueryAllContractStateRequest, QueryAllContractStateResponse>;
    /**
     * RawContractState gets single key from the raw store data of a contract
     *
     * @generated from protobuf rpc: RawContractState(cosmwasm.wasm.v1.QueryRawContractStateRequest) returns (cosmwasm.wasm.v1.QueryRawContractStateResponse);
     */
    rawContractState(input: QueryRawContractStateRequest, options?: RpcOptions): UnaryCall<QueryRawContractStateRequest, QueryRawContractStateResponse>;
    /**
     * SmartContractState get smart query result from the contract
     *
     * @generated from protobuf rpc: SmartContractState(cosmwasm.wasm.v1.QuerySmartContractStateRequest) returns (cosmwasm.wasm.v1.QuerySmartContractStateResponse);
     */
    smartContractState(input: QuerySmartContractStateRequest, options?: RpcOptions): UnaryCall<QuerySmartContractStateRequest, QuerySmartContractStateResponse>;
    /**
     * Code gets the binary code and metadata for a singe wasm code
     *
     * @generated from protobuf rpc: Code(cosmwasm.wasm.v1.QueryCodeRequest) returns (cosmwasm.wasm.v1.QueryCodeResponse);
     */
    code(input: QueryCodeRequest, options?: RpcOptions): UnaryCall<QueryCodeRequest, QueryCodeResponse>;
    /**
     * Codes gets the metadata for all stored wasm codes
     *
     * @generated from protobuf rpc: Codes(cosmwasm.wasm.v1.QueryCodesRequest) returns (cosmwasm.wasm.v1.QueryCodesResponse);
     */
    codes(input: QueryCodesRequest, options?: RpcOptions): UnaryCall<QueryCodesRequest, QueryCodesResponse>;
    /**
     * PinnedCodes gets the pinned code ids
     *
     * @generated from protobuf rpc: PinnedCodes(cosmwasm.wasm.v1.QueryPinnedCodesRequest) returns (cosmwasm.wasm.v1.QueryPinnedCodesResponse);
     */
    pinnedCodes(input: QueryPinnedCodesRequest, options?: RpcOptions): UnaryCall<QueryPinnedCodesRequest, QueryPinnedCodesResponse>;
    /**
     * Params gets the module params
     *
     * @generated from protobuf rpc: Params(cosmwasm.wasm.v1.QueryParamsRequest) returns (cosmwasm.wasm.v1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * ContractsByCreator gets the contracts by creator
     *
     * @generated from protobuf rpc: ContractsByCreator(cosmwasm.wasm.v1.QueryContractsByCreatorRequest) returns (cosmwasm.wasm.v1.QueryContractsByCreatorResponse);
     */
    contractsByCreator(input: QueryContractsByCreatorRequest, options?: RpcOptions): UnaryCall<QueryContractsByCreatorRequest, QueryContractsByCreatorResponse>;
}
