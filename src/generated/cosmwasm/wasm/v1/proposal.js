// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmwasm/wasm/v1/proposal.proto" (package "cosmwasm.wasm.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { AccessConfig } from "./types";
// @generated message type with reflection information, may provide speed optimized methods
class StoreCodeProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.StoreCodeProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_as", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "wasm_byte_code", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "WASMByteCode" } },
            { no: 7, name: "instantiate_permission", kind: "message", T: () => AccessConfig },
            { no: 8, name: "unpin_code", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "builder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "code_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.runAs = "";
        message.wasmByteCode = new Uint8Array(0);
        message.unpinCode = false;
        message.source = "";
        message.builder = "";
        message.codeHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string run_as */ 3:
                    message.runAs = reader.string();
                    break;
                case /* bytes wasm_byte_code */ 4:
                    message.wasmByteCode = reader.bytes();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig instantiate_permission */ 7:
                    message.instantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.instantiatePermission);
                    break;
                case /* bool unpin_code */ 8:
                    message.unpinCode = reader.bool();
                    break;
                case /* string source */ 9:
                    message.source = reader.string();
                    break;
                case /* string builder */ 10:
                    message.builder = reader.string();
                    break;
                case /* bytes code_hash */ 11:
                    message.codeHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string run_as = 3; */
        if (message.runAs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.runAs);
        /* bytes wasm_byte_code = 4; */
        if (message.wasmByteCode.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.wasmByteCode);
        /* cosmwasm.wasm.v1.AccessConfig instantiate_permission = 7; */
        if (message.instantiatePermission)
            AccessConfig.internalBinaryWrite(message.instantiatePermission, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bool unpin_code = 8; */
        if (message.unpinCode !== false)
            writer.tag(8, WireType.Varint).bool(message.unpinCode);
        /* string source = 9; */
        if (message.source !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.source);
        /* string builder = 10; */
        if (message.builder !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.builder);
        /* bytes code_hash = 11; */
        if (message.codeHash.length)
            writer.tag(11, WireType.LengthDelimited).bytes(message.codeHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.StoreCodeProposal
 */
export const StoreCodeProposal = new StoreCodeProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstantiateContractProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.InstantiateContractProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_as", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 6, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 8, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.runAs = "";
        message.admin = "";
        message.codeId = "0";
        message.label = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string run_as */ 3:
                    message.runAs = reader.string();
                    break;
                case /* string admin */ 4:
                    message.admin = reader.string();
                    break;
                case /* uint64 code_id */ 5:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* string label */ 6:
                    message.label = reader.string();
                    break;
                case /* bytes msg */ 7:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 8:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string run_as = 3; */
        if (message.runAs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.runAs);
        /* string admin = 4; */
        if (message.admin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.admin);
        /* uint64 code_id = 5; */
        if (message.codeId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.codeId);
        /* string label = 6; */
        if (message.label !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.label);
        /* bytes msg = 7; */
        if (message.msg.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 8; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.InstantiateContractProposal
 */
export const InstantiateContractProposal = new InstantiateContractProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstantiateContract2Proposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.InstantiateContract2Proposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_as", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 6, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 8, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 9, name: "salt", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 10, name: "fix_msg", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.runAs = "";
        message.admin = "";
        message.codeId = "0";
        message.label = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        message.salt = new Uint8Array(0);
        message.fixMsg = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string run_as */ 3:
                    message.runAs = reader.string();
                    break;
                case /* string admin */ 4:
                    message.admin = reader.string();
                    break;
                case /* uint64 code_id */ 5:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* string label */ 6:
                    message.label = reader.string();
                    break;
                case /* bytes msg */ 7:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 8:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes salt */ 9:
                    message.salt = reader.bytes();
                    break;
                case /* bool fix_msg */ 10:
                    message.fixMsg = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string run_as = 3; */
        if (message.runAs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.runAs);
        /* string admin = 4; */
        if (message.admin !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.admin);
        /* uint64 code_id = 5; */
        if (message.codeId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.codeId);
        /* string label = 6; */
        if (message.label !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.label);
        /* bytes msg = 7; */
        if (message.msg.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 8; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bytes salt = 9; */
        if (message.salt.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.salt);
        /* bool fix_msg = 10; */
        if (message.fixMsg !== false)
            writer.tag(10, WireType.Varint).bool(message.fixMsg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.InstantiateContract2Proposal
 */
export const InstantiateContract2Proposal = new InstantiateContract2Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MigrateContractProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.MigrateContractProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 6, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.contract = "";
        message.codeId = "0";
        message.msg = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string contract */ 4:
                    message.contract = reader.string();
                    break;
                case /* uint64 code_id */ 5:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* bytes msg */ 6:
                    message.msg = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string contract = 4; */
        if (message.contract !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contract);
        /* uint64 code_id = 5; */
        if (message.codeId !== "0")
            writer.tag(5, WireType.Varint).uint64(message.codeId);
        /* bytes msg = 6; */
        if (message.msg.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.MigrateContractProposal
 */
export const MigrateContractProposal = new MigrateContractProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SudoContractProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.SudoContractProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.contract = "";
        message.msg = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string contract */ 3:
                    message.contract = reader.string();
                    break;
                case /* bytes msg */ 4:
                    message.msg = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string contract = 3; */
        if (message.contract !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contract);
        /* bytes msg = 4; */
        if (message.msg.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.SudoContractProposal
 */
export const SudoContractProposal = new SudoContractProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteContractProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.ExecuteContractProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_as", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 6, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.runAs = "";
        message.contract = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string run_as */ 3:
                    message.runAs = reader.string();
                    break;
                case /* string contract */ 4:
                    message.contract = reader.string();
                    break;
                case /* bytes msg */ 5:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 6:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string run_as = 3; */
        if (message.runAs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.runAs);
        /* string contract = 4; */
        if (message.contract !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contract);
        /* bytes msg = 5; */
        if (message.msg.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 6; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.ExecuteContractProposal
 */
export const ExecuteContractProposal = new ExecuteContractProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAdminProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.UpdateAdminProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_admin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"new_admin\"" } },
            { no: 4, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.newAdmin = "";
        message.contract = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string new_admin */ 3:
                    message.newAdmin = reader.string();
                    break;
                case /* string contract */ 4:
                    message.contract = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string new_admin = 3; */
        if (message.newAdmin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newAdmin);
        /* string contract = 4; */
        if (message.contract !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.UpdateAdminProposal
 */
export const UpdateAdminProposal = new UpdateAdminProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearAdminProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.ClearAdminProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contract", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.contract = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string contract */ 3:
                    message.contract = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string contract = 3; */
        if (message.contract !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.ClearAdminProposal
 */
export const ClearAdminProposal = new ClearAdminProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinCodesProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.PinCodesProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"title\"" } },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"description\"" } },
            { no: 3, name: "code_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeIDs", "gogoproto.moretags": "yaml:\"code_ids\"" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.codeIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* repeated uint64 code_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.codeIds.push(reader.uint64().toString());
                    else
                        message.codeIds.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* repeated uint64 code_ids = 3; */
        if (message.codeIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.codeIds.length; i++)
                writer.uint64(message.codeIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.PinCodesProposal
 */
export const PinCodesProposal = new PinCodesProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpinCodesProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.UnpinCodesProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"title\"" } },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"description\"" } },
            { no: 3, name: "code_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeIDs", "gogoproto.moretags": "yaml:\"code_ids\"" } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.codeIds = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* repeated uint64 code_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.codeIds.push(reader.uint64().toString());
                    else
                        message.codeIds.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* repeated uint64 code_ids = 3; */
        if (message.codeIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.codeIds.length; i++)
                writer.uint64(message.codeIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.UnpinCodesProposal
 */
export const UnpinCodesProposal = new UnpinCodesProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccessConfigUpdate$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.AccessConfigUpdate", [
            { no: 1, name: "code_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "CodeID" } },
            { no: 2, name: "instantiate_permission", kind: "message", T: () => AccessConfig, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.codeId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 code_id */ 1:
                    message.codeId = reader.uint64().toString();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig instantiate_permission */ 2:
                    message.instantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.instantiatePermission);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 code_id = 1; */
        if (message.codeId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.codeId);
        /* cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2; */
        if (message.instantiatePermission)
            AccessConfig.internalBinaryWrite(message.instantiatePermission, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.AccessConfigUpdate
 */
export const AccessConfigUpdate = new AccessConfigUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateInstantiateConfigProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.UpdateInstantiateConfigProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"title\"" } },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"description\"" } },
            { no: 3, name: "access_config_updates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AccessConfigUpdate, options: { "gogoproto.nullable": false } }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.accessConfigUpdates = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* repeated cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates */ 3:
                    message.accessConfigUpdates.push(AccessConfigUpdate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* repeated cosmwasm.wasm.v1.AccessConfigUpdate access_config_updates = 3; */
        for (let i = 0; i < message.accessConfigUpdates.length; i++)
            AccessConfigUpdate.internalBinaryWrite(message.accessConfigUpdates[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.UpdateInstantiateConfigProposal
 */
export const UpdateInstantiateConfigProposal = new UpdateInstantiateConfigProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreAndInstantiateContractProposal$Type extends MessageType {
    constructor() {
        super("cosmwasm.wasm.v1.StoreAndInstantiateContractProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "run_as", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "wasm_byte_code", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "WASMByteCode" } },
            { no: 5, name: "instantiate_permission", kind: "message", T: () => AccessConfig },
            { no: 6, name: "unpin_code", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "msg", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "RawContractMessage" } },
            { no: 10, name: "funds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 11, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "builder", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "code_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.runAs = "";
        message.wasmByteCode = new Uint8Array(0);
        message.unpinCode = false;
        message.admin = "";
        message.label = "";
        message.msg = new Uint8Array(0);
        message.funds = [];
        message.source = "";
        message.builder = "";
        message.codeHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string run_as */ 3:
                    message.runAs = reader.string();
                    break;
                case /* bytes wasm_byte_code */ 4:
                    message.wasmByteCode = reader.bytes();
                    break;
                case /* cosmwasm.wasm.v1.AccessConfig instantiate_permission */ 5:
                    message.instantiatePermission = AccessConfig.internalBinaryRead(reader, reader.uint32(), options, message.instantiatePermission);
                    break;
                case /* bool unpin_code */ 6:
                    message.unpinCode = reader.bool();
                    break;
                case /* string admin */ 7:
                    message.admin = reader.string();
                    break;
                case /* string label */ 8:
                    message.label = reader.string();
                    break;
                case /* bytes msg */ 9:
                    message.msg = reader.bytes();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin funds */ 10:
                    message.funds.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string source */ 11:
                    message.source = reader.string();
                    break;
                case /* string builder */ 12:
                    message.builder = reader.string();
                    break;
                case /* bytes code_hash */ 13:
                    message.codeHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string run_as = 3; */
        if (message.runAs !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.runAs);
        /* bytes wasm_byte_code = 4; */
        if (message.wasmByteCode.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.wasmByteCode);
        /* cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5; */
        if (message.instantiatePermission)
            AccessConfig.internalBinaryWrite(message.instantiatePermission, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool unpin_code = 6; */
        if (message.unpinCode !== false)
            writer.tag(6, WireType.Varint).bool(message.unpinCode);
        /* string admin = 7; */
        if (message.admin !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.admin);
        /* string label = 8; */
        if (message.label !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.label);
        /* bytes msg = 9; */
        if (message.msg.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.msg);
        /* repeated cosmos.base.v1beta1.Coin funds = 10; */
        for (let i = 0; i < message.funds.length; i++)
            Coin.internalBinaryWrite(message.funds[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string source = 11; */
        if (message.source !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.source);
        /* string builder = 12; */
        if (message.builder !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.builder);
        /* bytes code_hash = 13; */
        if (message.codeHash.length)
            writer.tag(13, WireType.LengthDelimited).bytes(message.codeHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmwasm.wasm.v1.StoreAndInstantiateContractProposal
 */
export const StoreAndInstantiateContractProposal = new StoreAndInstantiateContractProposal$Type();
