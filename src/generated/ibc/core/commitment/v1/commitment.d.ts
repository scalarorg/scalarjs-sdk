// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/commitment/v1/commitment.proto" (package "ibc.core.commitment.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CommitmentProof } from "../../../../proofs";
/**
 * MerkleRoot defines a merkle root hash.
 * In the Cosmos SDK, the AppHash of a block header becomes the root.
 *
 * @generated from protobuf message ibc.core.commitment.v1.MerkleRoot
 */
export interface MerkleRoot {
    /**
     * @generated from protobuf field: bytes hash = 1;
     */
    hash: Uint8Array;
}
/**
 * MerklePrefix is merkle path prefixed to the key.
 * The constructed key from the Path and the key will be append(Path.KeyPath,
 * append(Path.KeyPrefix, key...))
 *
 * @generated from protobuf message ibc.core.commitment.v1.MerklePrefix
 */
export interface MerklePrefix {
    /**
     * @generated from protobuf field: bytes key_prefix = 1;
     */
    keyPrefix: Uint8Array;
}
/**
 * MerklePath is the path used to verify commitment proofs, which can be an
 * arbitrary structured object (defined by a commitment type).
 * MerklePath is represented from root-to-leaf
 *
 * @generated from protobuf message ibc.core.commitment.v1.MerklePath
 */
export interface MerklePath {
    /**
     * @generated from protobuf field: repeated string key_path = 1;
     */
    keyPath: string[];
}
/**
 * MerkleProof is a wrapper type over a chain of CommitmentProofs.
 * It demonstrates membership or non-membership for an element or set of
 * elements, verifiable in conjunction with a known commitment root. Proofs
 * should be succinct.
 * MerkleProofs are ordered from leaf-to-root
 *
 * @generated from protobuf message ibc.core.commitment.v1.MerkleProof
 */
export interface MerkleProof {
    /**
     * @generated from protobuf field: repeated ics23.CommitmentProof proofs = 1;
     */
    proofs: CommitmentProof[];
}
declare class MerkleRoot$Type extends MessageType<MerkleRoot> {
    constructor();
    create(value?: PartialMessage<MerkleRoot>): MerkleRoot;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MerkleRoot): MerkleRoot;
    internalBinaryWrite(message: MerkleRoot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.commitment.v1.MerkleRoot
 */
export declare const MerkleRoot: MerkleRoot$Type;
declare class MerklePrefix$Type extends MessageType<MerklePrefix> {
    constructor();
    create(value?: PartialMessage<MerklePrefix>): MerklePrefix;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MerklePrefix): MerklePrefix;
    internalBinaryWrite(message: MerklePrefix, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.commitment.v1.MerklePrefix
 */
export declare const MerklePrefix: MerklePrefix$Type;
declare class MerklePath$Type extends MessageType<MerklePath> {
    constructor();
    create(value?: PartialMessage<MerklePath>): MerklePath;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MerklePath): MerklePath;
    internalBinaryWrite(message: MerklePath, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.commitment.v1.MerklePath
 */
export declare const MerklePath: MerklePath$Type;
declare class MerkleProof$Type extends MessageType<MerkleProof> {
    constructor();
    create(value?: PartialMessage<MerkleProof>): MerkleProof;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MerkleProof): MerkleProof;
    internalBinaryWrite(message: MerkleProof, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.commitment.v1.MerkleProof
 */
export declare const MerkleProof: MerkleProof$Type;
export {};
