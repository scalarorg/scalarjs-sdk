// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/client/v1/client.proto" (package "ibc.core.client.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Plan } from "../../../../cosmos/upgrade/v1beta1/upgrade";
import { Any } from "../../../../google/protobuf/any";
// @generated message type with reflection information, may provide speed optimized methods
class IdentifiedClientState$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.IdentifiedClientState", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "client_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"client_state\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* google.protobuf.Any client_state */ 2:
                    message.clientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.clientState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* google.protobuf.Any client_state = 2; */
        if (message.clientState)
            Any.internalBinaryWrite(message.clientState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.IdentifiedClientState
 */
export const IdentifiedClientState = new IdentifiedClientState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsensusStateWithHeight$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.ConsensusStateWithHeight", [
            { no: 1, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } },
            { no: 2, name: "consensus_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"consensus_state\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.client.v1.Height height */ 1:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                case /* google.protobuf.Any consensus_state */ 2:
                    message.consensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.client.v1.Height height = 1; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any consensus_state = 2; */
        if (message.consensusState)
            Any.internalBinaryWrite(message.consensusState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.ConsensusStateWithHeight
 */
export const ConsensusStateWithHeight = new ConsensusStateWithHeight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientConsensusStates$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.ClientConsensusStates", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "consensus_states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConsensusStateWithHeight, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"consensus_states\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        message.consensusStates = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states */ 2:
                    message.consensusStates.push(ConsensusStateWithHeight.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* repeated ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2; */
        for (let i = 0; i < message.consensusStates.length; i++)
            ConsensusStateWithHeight.internalBinaryWrite(message.consensusStates[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.ClientConsensusStates
 */
export const ClientConsensusStates = new ClientConsensusStates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientUpdateProposal$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.ClientUpdateProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "subject_client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"subject_client_id\"" } },
            { no: 4, name: "substitute_client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"substitute_client_id\"" } }
        ], { "gogoproto.goproto_getters": false, "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.subjectClientId = "";
        message.substituteClientId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string subject_client_id */ 3:
                    message.subjectClientId = reader.string();
                    break;
                case /* string substitute_client_id */ 4:
                    message.substituteClientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string subject_client_id = 3; */
        if (message.subjectClientId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subjectClientId);
        /* string substitute_client_id = 4; */
        if (message.substituteClientId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.substituteClientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.ClientUpdateProposal
 */
export const ClientUpdateProposal = new ClientUpdateProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeProposal$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.UpgradeProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "plan", kind: "message", T: () => Plan, options: { "gogoproto.nullable": false } },
            { no: 4, name: "upgraded_client_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"upgraded_client_state\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": true, "cosmos_proto.implements_interface": "cosmos.gov.v1beta1.Content" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* cosmos.upgrade.v1beta1.Plan plan */ 3:
                    message.plan = Plan.internalBinaryRead(reader, reader.uint32(), options, message.plan);
                    break;
                case /* google.protobuf.Any upgraded_client_state */ 4:
                    message.upgradedClientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.upgradedClientState);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* cosmos.upgrade.v1beta1.Plan plan = 3; */
        if (message.plan)
            Plan.internalBinaryWrite(message.plan, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any upgraded_client_state = 4; */
        if (message.upgradedClientState)
            Any.internalBinaryWrite(message.upgradedClientState, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.UpgradeProposal
 */
export const UpgradeProposal = new UpgradeProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Height$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.Height", [
            { no: 1, name: "revision_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"revision_number\"" } },
            { no: 2, name: "revision_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"revision_height\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.revisionNumber = "0";
        message.revisionHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 revision_number */ 1:
                    message.revisionNumber = reader.uint64().toString();
                    break;
                case /* uint64 revision_height */ 2:
                    message.revisionHeight = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 revision_number = 1; */
        if (message.revisionNumber !== "0")
            writer.tag(1, WireType.Varint).uint64(message.revisionNumber);
        /* uint64 revision_height = 2; */
        if (message.revisionHeight !== "0")
            writer.tag(2, WireType.Varint).uint64(message.revisionHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.Height
 */
export const Height = new Height$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("ibc.core.client.v1.Params", [
            { no: 1, name: "allowed_clients", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"allowed_clients\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.allowedClients = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string allowed_clients */ 1:
                    message.allowedClients.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string allowed_clients = 1; */
        for (let i = 0; i < message.allowedClients.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.allowedClients[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.client.v1.Params
 */
export const Params = new Params$Type();
