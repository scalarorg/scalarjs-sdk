// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/connection/v1/tx.proto" (package "ibc.core.connection.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/connection/v1/tx.proto" (package "ibc.core.connection.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Height } from "../../client/v1/client";
import { Any } from "../../../../google/protobuf/any";
import { Version } from "./connection";
import { Counterparty } from "./connection";
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenInit$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenInit", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 3, name: "version", kind: "message", T: () => Version },
            { no: 4, name: "delay_period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"delay_period\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        message.delayPeriod = "0";
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* ibc.core.connection.v1.Counterparty counterparty */ 2:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* ibc.core.connection.v1.Version version */ 3:
                    message.version = Version.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                case /* uint64 delay_period */ 4:
                    message.delayPeriod = reader.uint64().toString();
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* ibc.core.connection.v1.Counterparty counterparty = 2; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.connection.v1.Version version = 3; */
        if (message.version)
            Version.internalBinaryWrite(message.version, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 delay_period = 4; */
        if (message.delayPeriod !== "0")
            writer.tag(4, WireType.Varint).uint64(message.delayPeriod);
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenInit
 */
export const MsgConnectionOpenInit = new MsgConnectionOpenInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenInitResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenInitResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenInitResponse
 */
export const MsgConnectionOpenInitResponse = new MsgConnectionOpenInitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenTry$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenTry", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"client_id\"" } },
            { no: 2, name: "previous_connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"previous_connection_id\"" } },
            { no: 3, name: "client_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"client_state\"" } },
            { no: 4, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 5, name: "delay_period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"delay_period\"" } },
            { no: 6, name: "counterparty_versions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Version, options: { "gogoproto.moretags": "yaml:\"counterparty_versions\"" } },
            { no: 7, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 8, name: "proof_init", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_init\"" } },
            { no: 9, name: "proof_client", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_client\"" } },
            { no: 10, name: "proof_consensus", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_consensus\"" } },
            { no: 11, name: "consensus_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"consensus_height\"" } },
            { no: 12, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        message.previousConnectionId = "";
        message.delayPeriod = "0";
        message.counterpartyVersions = [];
        message.proofInit = new Uint8Array(0);
        message.proofClient = new Uint8Array(0);
        message.proofConsensus = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* string previous_connection_id = 2 [deprecated = true];*/ 2:
                    message.previousConnectionId = reader.string();
                    break;
                case /* google.protobuf.Any client_state */ 3:
                    message.clientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.clientState);
                    break;
                case /* ibc.core.connection.v1.Counterparty counterparty */ 4:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* uint64 delay_period */ 5:
                    message.delayPeriod = reader.uint64().toString();
                    break;
                case /* repeated ibc.core.connection.v1.Version counterparty_versions */ 6:
                    message.counterpartyVersions.push(Version.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 7:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* bytes proof_init */ 8:
                    message.proofInit = reader.bytes();
                    break;
                case /* bytes proof_client */ 9:
                    message.proofClient = reader.bytes();
                    break;
                case /* bytes proof_consensus */ 10:
                    message.proofConsensus = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height consensus_height */ 11:
                    message.consensusHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.consensusHeight);
                    break;
                case /* string signer */ 12:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* string previous_connection_id = 2 [deprecated = true]; */
        if (message.previousConnectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.previousConnectionId);
        /* google.protobuf.Any client_state = 3; */
        if (message.clientState)
            Any.internalBinaryWrite(message.clientState, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.connection.v1.Counterparty counterparty = 4; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 delay_period = 5; */
        if (message.delayPeriod !== "0")
            writer.tag(5, WireType.Varint).uint64(message.delayPeriod);
        /* repeated ibc.core.connection.v1.Version counterparty_versions = 6; */
        for (let i = 0; i < message.counterpartyVersions.length; i++)
            Version.internalBinaryWrite(message.counterpartyVersions[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height proof_height = 7; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_init = 8; */
        if (message.proofInit.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.proofInit);
        /* bytes proof_client = 9; */
        if (message.proofClient.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.proofClient);
        /* bytes proof_consensus = 10; */
        if (message.proofConsensus.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.proofConsensus);
        /* ibc.core.client.v1.Height consensus_height = 11; */
        if (message.consensusHeight)
            Height.internalBinaryWrite(message.consensusHeight, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 12; */
        if (message.signer !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenTry
 */
export const MsgConnectionOpenTry = new MsgConnectionOpenTry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenTryResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenTryResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenTryResponse
 */
export const MsgConnectionOpenTryResponse = new MsgConnectionOpenTryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenAck$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenAck", [
            { no: 1, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_id\"" } },
            { no: 2, name: "counterparty_connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_connection_id\"" } },
            { no: 3, name: "version", kind: "message", T: () => Version },
            { no: 4, name: "client_state", kind: "message", T: () => Any, options: { "gogoproto.moretags": "yaml:\"client_state\"" } },
            { no: 5, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 6, name: "proof_try", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_try\"" } },
            { no: 7, name: "proof_client", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_client\"" } },
            { no: 8, name: "proof_consensus", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_consensus\"" } },
            { no: 9, name: "consensus_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"consensus_height\"" } },
            { no: 10, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionId = "";
        message.counterpartyConnectionId = "";
        message.proofTry = new Uint8Array(0);
        message.proofClient = new Uint8Array(0);
        message.proofConsensus = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection_id */ 1:
                    message.connectionId = reader.string();
                    break;
                case /* string counterparty_connection_id */ 2:
                    message.counterpartyConnectionId = reader.string();
                    break;
                case /* ibc.core.connection.v1.Version version */ 3:
                    message.version = Version.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                case /* google.protobuf.Any client_state */ 4:
                    message.clientState = Any.internalBinaryRead(reader, reader.uint32(), options, message.clientState);
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 5:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* bytes proof_try */ 6:
                    message.proofTry = reader.bytes();
                    break;
                case /* bytes proof_client */ 7:
                    message.proofClient = reader.bytes();
                    break;
                case /* bytes proof_consensus */ 8:
                    message.proofConsensus = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height consensus_height */ 9:
                    message.consensusHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.consensusHeight);
                    break;
                case /* string signer */ 10:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection_id = 1; */
        if (message.connectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionId);
        /* string counterparty_connection_id = 2; */
        if (message.counterpartyConnectionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.counterpartyConnectionId);
        /* ibc.core.connection.v1.Version version = 3; */
        if (message.version)
            Version.internalBinaryWrite(message.version, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any client_state = 4; */
        if (message.clientState)
            Any.internalBinaryWrite(message.clientState, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height proof_height = 5; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_try = 6; */
        if (message.proofTry.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.proofTry);
        /* bytes proof_client = 7; */
        if (message.proofClient.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.proofClient);
        /* bytes proof_consensus = 8; */
        if (message.proofConsensus.length)
            writer.tag(8, WireType.LengthDelimited).bytes(message.proofConsensus);
        /* ibc.core.client.v1.Height consensus_height = 9; */
        if (message.consensusHeight)
            Height.internalBinaryWrite(message.consensusHeight, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 10; */
        if (message.signer !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenAck
 */
export const MsgConnectionOpenAck = new MsgConnectionOpenAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenAckResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenAckResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenAckResponse
 */
export const MsgConnectionOpenAckResponse = new MsgConnectionOpenAckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenConfirm$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenConfirm", [
            { no: 1, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_id\"" } },
            { no: 2, name: "proof_ack", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_ack\"" } },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 4, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionId = "";
        message.proofAck = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection_id */ 1:
                    message.connectionId = reader.string();
                    break;
                case /* bytes proof_ack */ 2:
                    message.proofAck = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 4:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection_id = 1; */
        if (message.connectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionId);
        /* bytes proof_ack = 2; */
        if (message.proofAck.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofAck);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 4; */
        if (message.signer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenConfirm
 */
export const MsgConnectionOpenConfirm = new MsgConnectionOpenConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgConnectionOpenConfirmResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.MsgConnectionOpenConfirmResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
 */
export const MsgConnectionOpenConfirmResponse = new MsgConnectionOpenConfirmResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.connection.v1.Msg
 */
export const Msg = new ServiceType("ibc.core.connection.v1.Msg", [
    { name: "ConnectionOpenInit", options: {}, I: MsgConnectionOpenInit, O: MsgConnectionOpenInitResponse },
    { name: "ConnectionOpenTry", options: {}, I: MsgConnectionOpenTry, O: MsgConnectionOpenTryResponse },
    { name: "ConnectionOpenAck", options: {}, I: MsgConnectionOpenAck, O: MsgConnectionOpenAckResponse },
    { name: "ConnectionOpenConfirm", options: {}, I: MsgConnectionOpenConfirm, O: MsgConnectionOpenConfirmResponse }
]);
