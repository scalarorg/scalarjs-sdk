// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/connection/v1/query.proto" (package "ibc.core.connection.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
import { IdentifiedClientState } from "../../client/v1/client";
import { PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { IdentifiedConnection } from "./connection";
import { PageRequest } from "../../../../cosmos/base/query/v1beta1/pagination";
import { Height } from "../../client/v1/client";
import { ConnectionEnd } from "./connection";
/**
 * QueryConnectionRequest is the request type for the Query/Connection RPC
 * method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionRequest
 */
export interface QueryConnectionRequest {
    /**
     * connection unique identifier
     *
     * @generated from protobuf field: string connection_id = 1;
     */
    connectionId: string;
}
/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC
 * method. Besides the connection end, it includes a proof and the height from
 * which the proof was retrieved.
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionResponse
 */
export interface QueryConnectionResponse {
    /**
     * connection associated with the request identifier
     *
     * @generated from protobuf field: ibc.core.connection.v1.ConnectionEnd connection = 1;
     */
    connection?: ConnectionEnd;
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 2;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was retrieved
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
}
/**
 * QueryConnectionsRequest is the request type for the Query/Connections RPC
 * method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionsRequest
 */
export interface QueryConnectionsRequest {
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC
 * method.
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionsResponse
 */
export interface QueryConnectionsResponse {
    /**
     * list of stored connections of the chain.
     *
     * @generated from protobuf field: repeated ibc.core.connection.v1.IdentifiedConnection connections = 1;
     */
    connections: IdentifiedConnection[];
    /**
     * pagination response
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
    /**
     * query block height
     *
     * @generated from protobuf field: ibc.core.client.v1.Height height = 3;
     */
    height?: Height;
}
/**
 * QueryClientConnectionsRequest is the request type for the
 * Query/ClientConnections RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryClientConnectionsRequest
 */
export interface QueryClientConnectionsRequest {
    /**
     * client identifier associated with a connection
     *
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
}
/**
 * QueryClientConnectionsResponse is the response type for the
 * Query/ClientConnections RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryClientConnectionsResponse
 */
export interface QueryClientConnectionsResponse {
    /**
     * slice of all the connection paths associated with a client.
     *
     * @generated from protobuf field: repeated string connection_paths = 1;
     */
    connectionPaths: string[];
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 2;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was generated
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
}
/**
 * QueryConnectionClientStateRequest is the request type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionClientStateRequest
 */
export interface QueryConnectionClientStateRequest {
    /**
     * connection identifier
     *
     * @generated from protobuf field: string connection_id = 1;
     */
    connectionId: string;
}
/**
 * QueryConnectionClientStateResponse is the response type for the
 * Query/ConnectionClientState RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionClientStateResponse
 */
export interface QueryConnectionClientStateResponse {
    /**
     * client state associated with the channel
     *
     * @generated from protobuf field: ibc.core.client.v1.IdentifiedClientState identified_client_state = 1;
     */
    identifiedClientState?: IdentifiedClientState;
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 2;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was retrieved
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
}
/**
 * QueryConnectionConsensusStateRequest is the request type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateRequest
 */
export interface QueryConnectionConsensusStateRequest {
    /**
     * connection identifier
     *
     * @generated from protobuf field: string connection_id = 1;
     */
    connectionId: string;
    /**
     * @generated from protobuf field: uint64 revision_number = 2;
     */
    revisionNumber: string;
    /**
     * @generated from protobuf field: uint64 revision_height = 3;
     */
    revisionHeight: string;
}
/**
 * QueryConnectionConsensusStateResponse is the response type for the
 * Query/ConnectionConsensusState RPC method
 *
 * @generated from protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateResponse
 */
export interface QueryConnectionConsensusStateResponse {
    /**
     * consensus state associated with the channel
     *
     * @generated from protobuf field: google.protobuf.Any consensus_state = 1;
     */
    consensusState?: Any;
    /**
     * client ID associated with the consensus state
     *
     * @generated from protobuf field: string client_id = 2;
     */
    clientId: string;
    /**
     * merkle proof of existence
     *
     * @generated from protobuf field: bytes proof = 3;
     */
    proof: Uint8Array;
    /**
     * height at which the proof was retrieved
     *
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
}
declare class QueryConnectionRequest$Type extends MessageType<QueryConnectionRequest> {
    constructor();
    create(value?: PartialMessage<QueryConnectionRequest>): QueryConnectionRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionRequest): QueryConnectionRequest;
    internalBinaryWrite(message: QueryConnectionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionRequest
 */
export declare const QueryConnectionRequest: QueryConnectionRequest$Type;
declare class QueryConnectionResponse$Type extends MessageType<QueryConnectionResponse> {
    constructor();
    create(value?: PartialMessage<QueryConnectionResponse>): QueryConnectionResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionResponse): QueryConnectionResponse;
    internalBinaryWrite(message: QueryConnectionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionResponse
 */
export declare const QueryConnectionResponse: QueryConnectionResponse$Type;
declare class QueryConnectionsRequest$Type extends MessageType<QueryConnectionsRequest> {
    constructor();
    create(value?: PartialMessage<QueryConnectionsRequest>): QueryConnectionsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionsRequest): QueryConnectionsRequest;
    internalBinaryWrite(message: QueryConnectionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionsRequest
 */
export declare const QueryConnectionsRequest: QueryConnectionsRequest$Type;
declare class QueryConnectionsResponse$Type extends MessageType<QueryConnectionsResponse> {
    constructor();
    create(value?: PartialMessage<QueryConnectionsResponse>): QueryConnectionsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionsResponse): QueryConnectionsResponse;
    internalBinaryWrite(message: QueryConnectionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionsResponse
 */
export declare const QueryConnectionsResponse: QueryConnectionsResponse$Type;
declare class QueryClientConnectionsRequest$Type extends MessageType<QueryClientConnectionsRequest> {
    constructor();
    create(value?: PartialMessage<QueryClientConnectionsRequest>): QueryClientConnectionsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientConnectionsRequest): QueryClientConnectionsRequest;
    internalBinaryWrite(message: QueryClientConnectionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryClientConnectionsRequest
 */
export declare const QueryClientConnectionsRequest: QueryClientConnectionsRequest$Type;
declare class QueryClientConnectionsResponse$Type extends MessageType<QueryClientConnectionsResponse> {
    constructor();
    create(value?: PartialMessage<QueryClientConnectionsResponse>): QueryClientConnectionsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClientConnectionsResponse): QueryClientConnectionsResponse;
    internalBinaryWrite(message: QueryClientConnectionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryClientConnectionsResponse
 */
export declare const QueryClientConnectionsResponse: QueryClientConnectionsResponse$Type;
declare class QueryConnectionClientStateRequest$Type extends MessageType<QueryConnectionClientStateRequest> {
    constructor();
    create(value?: PartialMessage<QueryConnectionClientStateRequest>): QueryConnectionClientStateRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionClientStateRequest): QueryConnectionClientStateRequest;
    internalBinaryWrite(message: QueryConnectionClientStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionClientStateRequest
 */
export declare const QueryConnectionClientStateRequest: QueryConnectionClientStateRequest$Type;
declare class QueryConnectionClientStateResponse$Type extends MessageType<QueryConnectionClientStateResponse> {
    constructor();
    create(value?: PartialMessage<QueryConnectionClientStateResponse>): QueryConnectionClientStateResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionClientStateResponse): QueryConnectionClientStateResponse;
    internalBinaryWrite(message: QueryConnectionClientStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionClientStateResponse
 */
export declare const QueryConnectionClientStateResponse: QueryConnectionClientStateResponse$Type;
declare class QueryConnectionConsensusStateRequest$Type extends MessageType<QueryConnectionConsensusStateRequest> {
    constructor();
    create(value?: PartialMessage<QueryConnectionConsensusStateRequest>): QueryConnectionConsensusStateRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionConsensusStateRequest): QueryConnectionConsensusStateRequest;
    internalBinaryWrite(message: QueryConnectionConsensusStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateRequest
 */
export declare const QueryConnectionConsensusStateRequest: QueryConnectionConsensusStateRequest$Type;
declare class QueryConnectionConsensusStateResponse$Type extends MessageType<QueryConnectionConsensusStateResponse> {
    constructor();
    create(value?: PartialMessage<QueryConnectionConsensusStateResponse>): QueryConnectionConsensusStateResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConnectionConsensusStateResponse): QueryConnectionConsensusStateResponse;
    internalBinaryWrite(message: QueryConnectionConsensusStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateResponse
 */
export declare const QueryConnectionConsensusStateResponse: QueryConnectionConsensusStateResponse$Type;
/**
 * @generated ServiceType for protobuf service ibc.core.connection.v1.Query
 */
export declare const Query: any;
export {};
