// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/connection/v1/query.proto" (package "ibc.core.connection.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/connection/v1/query.proto" (package "ibc.core.connection.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../../google/protobuf/any";
import { IdentifiedClientState } from "../../client/v1/client";
import { PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { IdentifiedConnection } from "./connection";
import { PageRequest } from "../../../../cosmos/base/query/v1beta1/pagination";
import { Height } from "../../client/v1/client";
import { ConnectionEnd } from "./connection";
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionRequest", [
            { no: 1, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection_id */ 1:
                    message.connectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection_id = 1; */
        if (message.connectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionRequest
 */
export const QueryConnectionRequest = new QueryConnectionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionResponse", [
            { no: 1, name: "connection", kind: "message", T: () => ConnectionEnd },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.connection.v1.ConnectionEnd connection */ 1:
                    message.connection = ConnectionEnd.internalBinaryRead(reader, reader.uint32(), options, message.connection);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.connection.v1.ConnectionEnd connection = 1; */
        if (message.connection)
            ConnectionEnd.internalBinaryWrite(message.connection, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionResponse
 */
export const QueryConnectionResponse = new QueryConnectionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionsRequest
 */
export const QueryConnectionsRequest = new QueryConnectionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionsResponse", [
            { no: 1, name: "connections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedConnection },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse },
            { no: 3, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connections = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.connection.v1.IdentifiedConnection connections */ 1:
                    message.connections.push(IdentifiedConnection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* ibc.core.client.v1.Height height */ 3:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated ibc.core.connection.v1.IdentifiedConnection connections = 1; */
        for (let i = 0; i < message.connections.length; i++)
            IdentifiedConnection.internalBinaryWrite(message.connections[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height height = 3; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionsResponse
 */
export const QueryConnectionsResponse = new QueryConnectionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientConnectionsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryClientConnectionsRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryClientConnectionsRequest
 */
export const QueryClientConnectionsRequest = new QueryClientConnectionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClientConnectionsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryClientConnectionsResponse", [
            { no: 1, name: "connection_paths", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionPaths = [];
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string connection_paths */ 1:
                    message.connectionPaths.push(reader.string());
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string connection_paths = 1; */
        for (let i = 0; i < message.connectionPaths.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.connectionPaths[i]);
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryClientConnectionsResponse
 */
export const QueryClientConnectionsResponse = new QueryClientConnectionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionClientStateRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionClientStateRequest", [
            { no: 1, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_id\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection_id */ 1:
                    message.connectionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection_id = 1; */
        if (message.connectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionClientStateRequest
 */
export const QueryConnectionClientStateRequest = new QueryConnectionClientStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionClientStateResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionClientStateResponse", [
            { no: 1, name: "identified_client_state", kind: "message", T: () => IdentifiedClientState },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.client.v1.IdentifiedClientState identified_client_state */ 1:
                    message.identifiedClientState = IdentifiedClientState.internalBinaryRead(reader, reader.uint32(), options, message.identifiedClientState);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.client.v1.IdentifiedClientState identified_client_state = 1; */
        if (message.identifiedClientState)
            IdentifiedClientState.internalBinaryWrite(message.identifiedClientState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionClientStateResponse
 */
export const QueryConnectionClientStateResponse = new QueryConnectionClientStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionConsensusStateRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionConsensusStateRequest", [
            { no: 1, name: "connection_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_id\"" } },
            { no: 2, name: "revision_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "revision_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connectionId = "";
        message.revisionNumber = "0";
        message.revisionHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection_id */ 1:
                    message.connectionId = reader.string();
                    break;
                case /* uint64 revision_number */ 2:
                    message.revisionNumber = reader.uint64().toString();
                    break;
                case /* uint64 revision_height */ 3:
                    message.revisionHeight = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection_id = 1; */
        if (message.connectionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connectionId);
        /* uint64 revision_number = 2; */
        if (message.revisionNumber !== "0")
            writer.tag(2, WireType.Varint).uint64(message.revisionNumber);
        /* uint64 revision_height = 3; */
        if (message.revisionHeight !== "0")
            writer.tag(3, WireType.Varint).uint64(message.revisionHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateRequest
 */
export const QueryConnectionConsensusStateRequest = new QueryConnectionConsensusStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionConsensusStateResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.connection.v1.QueryConnectionConsensusStateResponse", [
            { no: 1, name: "consensus_state", kind: "message", T: () => Any },
            { no: 2, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any consensus_state */ 1:
                    message.consensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                case /* string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* bytes proof */ 3:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any consensus_state = 1; */
        if (message.consensusState)
            Any.internalBinaryWrite(message.consensusState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string client_id = 2; */
        if (message.clientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* bytes proof = 3; */
        if (message.proof.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.connection.v1.QueryConnectionConsensusStateResponse
 */
export const QueryConnectionConsensusStateResponse = new QueryConnectionConsensusStateResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.connection.v1.Query
 */
export const Query = new ServiceType("ibc.core.connection.v1.Query", [
    { name: "Connection", options: { "google.api.http": { get: "/ibc/core/connection/v1/connections/{connection_id}" } }, I: QueryConnectionRequest, O: QueryConnectionResponse },
    { name: "Connections", options: { "google.api.http": { get: "/ibc/core/connection/v1/connections" } }, I: QueryConnectionsRequest, O: QueryConnectionsResponse },
    { name: "ClientConnections", options: { "google.api.http": { get: "/ibc/core/connection/v1/client_connections/{client_id}" } }, I: QueryClientConnectionsRequest, O: QueryClientConnectionsResponse },
    { name: "ConnectionClientState", options: { "google.api.http": { get: "/ibc/core/connection/v1/connections/{connection_id}/client_state" } }, I: QueryConnectionClientStateRequest, O: QueryConnectionClientStateResponse },
    { name: "ConnectionConsensusState", options: { "google.api.http": { get: "/ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}" } }, I: QueryConnectionConsensusStateRequest, O: QueryConnectionConsensusStateResponse }
]);
