// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/tx.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/tx.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Packet } from "./channel";
import { Height } from "../../client/v1/client";
import { Channel } from "./channel";
/**
 * ResponseResultType defines the possible outcomes of the execution of a message
 *
 * @generated from protobuf enum ibc.core.channel.v1.ResponseResultType
 */
export var ResponseResultType;
(function (ResponseResultType) {
    /**
     * Default zero value enumeration
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
     */
    ResponseResultType[ResponseResultType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_NOOP = 1;
     */
    ResponseResultType[ResponseResultType["NOOP"] = 1] = "NOOP";
    /**
     * The message was executed successfully
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_SUCCESS = 2;
     */
    ResponseResultType[ResponseResultType["SUCCESS"] = 2] = "SUCCESS";
})(ResponseResultType || (ResponseResultType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenInit$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenInit", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel", kind: "message", T: () => Channel, options: { "gogoproto.nullable": false } },
            { no: 3, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* ibc.core.channel.v1.Channel channel */ 2:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* string signer */ 3:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* ibc.core.channel.v1.Channel channel = 2; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 3; */
        if (message.signer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInit
 */
export const MsgChannelOpenInit = new MsgChannelOpenInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenInitResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenInitResponse", [
            { no: 1, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.channelId = "";
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string channel_id */ 1:
                    message.channelId = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string channel_id = 1; */
        if (message.channelId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.channelId);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export const MsgChannelOpenInitResponse = new MsgChannelOpenInitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenTry$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenTry", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "previous_channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"previous_channel_id\"" } },
            { no: 3, name: "channel", kind: "message", T: () => Channel, options: { "gogoproto.nullable": false } },
            { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_version\"" } },
            { no: 5, name: "proof_init", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_init\"" } },
            { no: 6, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 7, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.previousChannelId = "";
        message.counterpartyVersion = "";
        message.proofInit = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string previous_channel_id = 2 [deprecated = true];*/ 2:
                    message.previousChannelId = reader.string();
                    break;
                case /* ibc.core.channel.v1.Channel channel */ 3:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* string counterparty_version */ 4:
                    message.counterpartyVersion = reader.string();
                    break;
                case /* bytes proof_init */ 5:
                    message.proofInit = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 6:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 7:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string previous_channel_id = 2 [deprecated = true]; */
        if (message.previousChannelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.previousChannelId);
        /* ibc.core.channel.v1.Channel channel = 3; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string counterparty_version = 4; */
        if (message.counterpartyVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.counterpartyVersion);
        /* bytes proof_init = 5; */
        if (message.proofInit.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.proofInit);
        /* ibc.core.client.v1.Height proof_height = 6; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 7; */
        if (message.signer !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTry
 */
export const MsgChannelOpenTry = new MsgChannelOpenTry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenTryResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenTryResponse", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export const MsgChannelOpenTryResponse = new MsgChannelOpenTryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenAck$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenAck", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "counterparty_channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_channel_id\"" } },
            { no: 4, name: "counterparty_version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"counterparty_version\"" } },
            { no: 5, name: "proof_try", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_try\"" } },
            { no: 6, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 7, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.counterpartyChannelId = "";
        message.counterpartyVersion = "";
        message.proofTry = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string counterparty_channel_id */ 3:
                    message.counterpartyChannelId = reader.string();
                    break;
                case /* string counterparty_version */ 4:
                    message.counterpartyVersion = reader.string();
                    break;
                case /* bytes proof_try */ 5:
                    message.proofTry = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 6:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 7:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string counterparty_channel_id = 3; */
        if (message.counterpartyChannelId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.counterpartyChannelId);
        /* string counterparty_version = 4; */
        if (message.counterpartyVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.counterpartyVersion);
        /* bytes proof_try = 5; */
        if (message.proofTry.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.proofTry);
        /* ibc.core.client.v1.Height proof_height = 6; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 7; */
        if (message.signer !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAck
 */
export const MsgChannelOpenAck = new MsgChannelOpenAck$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenAckResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenAckResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export const MsgChannelOpenAckResponse = new MsgChannelOpenAckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenConfirm$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenConfirm", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "proof_ack", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_ack\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.proofAck = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* bytes proof_ack */ 3:
                    message.proofAck = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* bytes proof_ack = 3; */
        if (message.proofAck.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofAck);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export const MsgChannelOpenConfirm = new MsgChannelOpenConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelOpenConfirmResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelOpenConfirmResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export const MsgChannelOpenConfirmResponse = new MsgChannelOpenConfirmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseInit$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseInit", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* string signer */ 3:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* string signer = 3; */
        if (message.signer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInit
 */
export const MsgChannelCloseInit = new MsgChannelCloseInit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseInitResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseInitResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export const MsgChannelCloseInitResponse = new MsgChannelCloseInitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseConfirm$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseConfirm", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "proof_init", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_init\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.proofInit = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* bytes proof_init */ 3:
                    message.proofInit = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* bytes proof_init = 3; */
        if (message.proofInit.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofInit);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export const MsgChannelCloseConfirm = new MsgChannelCloseConfirm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgChannelCloseConfirmResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgChannelCloseConfirmResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export const MsgChannelCloseConfirmResponse = new MsgChannelCloseConfirmResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgRecvPacket$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgRecvPacket", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_commitment", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_commitment\"" } },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 4, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proofCommitment = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_commitment */ 2:
                    message.proofCommitment = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 4:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_commitment = 2; */
        if (message.proofCommitment.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofCommitment);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 4; */
        if (message.signer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacket
 */
export const MsgRecvPacket = new MsgRecvPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgRecvPacketResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgRecvPacketResponse", [
            { no: 1, name: "result", kind: "enum", T: () => ["ibc.core.channel.v1.ResponseResultType", ResponseResultType, "RESPONSE_RESULT_TYPE_"] }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.ResponseResultType result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.ResponseResultType result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export const MsgRecvPacketResponse = new MsgRecvPacketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeout$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeout", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_unreceived\"" } },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 4, name: "next_sequence_recv", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_sequence_recv\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proofUnreceived = new Uint8Array(0);
        message.nextSequenceRecv = "0";
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_unreceived */ 2:
                    message.proofUnreceived = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* uint64 next_sequence_recv */ 4:
                    message.nextSequenceRecv = reader.uint64().toString();
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_unreceived = 2; */
        if (message.proofUnreceived.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofUnreceived);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 next_sequence_recv = 4; */
        if (message.nextSequenceRecv !== "0")
            writer.tag(4, WireType.Varint).uint64(message.nextSequenceRecv);
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeout
 */
export const MsgTimeout = new MsgTimeout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutResponse", [
            { no: 1, name: "result", kind: "enum", T: () => ["ibc.core.channel.v1.ResponseResultType", ResponseResultType, "RESPONSE_RESULT_TYPE_"] }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.ResponseResultType result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.ResponseResultType result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutResponse
 */
export const MsgTimeoutResponse = new MsgTimeoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutOnClose$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutOnClose", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "proof_unreceived", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_unreceived\"" } },
            { no: 3, name: "proof_close", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_close\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "next_sequence_recv", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"next_sequence_recv\"" } },
            { no: 6, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proofUnreceived = new Uint8Array(0);
        message.proofClose = new Uint8Array(0);
        message.nextSequenceRecv = "0";
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes proof_unreceived */ 2:
                    message.proofUnreceived = reader.bytes();
                    break;
                case /* bytes proof_close */ 3:
                    message.proofClose = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* uint64 next_sequence_recv */ 5:
                    message.nextSequenceRecv = reader.uint64().toString();
                    break;
                case /* string signer */ 6:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof_unreceived = 2; */
        if (message.proofUnreceived.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proofUnreceived);
        /* bytes proof_close = 3; */
        if (message.proofClose.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofClose);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 next_sequence_recv = 5; */
        if (message.nextSequenceRecv !== "0")
            writer.tag(5, WireType.Varint).uint64(message.nextSequenceRecv);
        /* string signer = 6; */
        if (message.signer !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export const MsgTimeoutOnClose = new MsgTimeoutOnClose$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTimeoutOnCloseResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgTimeoutOnCloseResponse", [
            { no: 1, name: "result", kind: "enum", T: () => ["ibc.core.channel.v1.ResponseResultType", ResponseResultType, "RESPONSE_RESULT_TYPE_"] }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.ResponseResultType result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.ResponseResultType result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export const MsgTimeoutOnCloseResponse = new MsgTimeoutOnCloseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAcknowledgement$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgAcknowledgement", [
            { no: 1, name: "packet", kind: "message", T: () => Packet, options: { "gogoproto.nullable": false } },
            { no: 2, name: "acknowledgement", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_acked", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.moretags": "yaml:\"proof_acked\"" } },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"proof_height\"" } },
            { no: 5, name: "signer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.acknowledgement = new Uint8Array(0);
        message.proofAcked = new Uint8Array(0);
        message.signer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Packet packet */ 1:
                    message.packet = Packet.internalBinaryRead(reader, reader.uint32(), options, message.packet);
                    break;
                case /* bytes acknowledgement */ 2:
                    message.acknowledgement = reader.bytes();
                    break;
                case /* bytes proof_acked */ 3:
                    message.proofAcked = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                case /* string signer */ 5:
                    message.signer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.Packet packet = 1; */
        if (message.packet)
            Packet.internalBinaryWrite(message.packet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes acknowledgement = 2; */
        if (message.acknowledgement.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.acknowledgement);
        /* bytes proof_acked = 3; */
        if (message.proofAcked.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proofAcked);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string signer = 5; */
        if (message.signer !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.signer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgement
 */
export const MsgAcknowledgement = new MsgAcknowledgement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAcknowledgementResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.MsgAcknowledgementResponse", [
            { no: 1, name: "result", kind: "enum", T: () => ["ibc.core.channel.v1.ResponseResultType", ResponseResultType, "RESPONSE_RESULT_TYPE_"] }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.ResponseResultType result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.ResponseResultType result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export const MsgAcknowledgementResponse = new MsgAcknowledgementResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.channel.v1.Msg
 */
export const Msg = new ServiceType("ibc.core.channel.v1.Msg", [
    { name: "ChannelOpenInit", options: {}, I: MsgChannelOpenInit, O: MsgChannelOpenInitResponse },
    { name: "ChannelOpenTry", options: {}, I: MsgChannelOpenTry, O: MsgChannelOpenTryResponse },
    { name: "ChannelOpenAck", options: {}, I: MsgChannelOpenAck, O: MsgChannelOpenAckResponse },
    { name: "ChannelOpenConfirm", options: {}, I: MsgChannelOpenConfirm, O: MsgChannelOpenConfirmResponse },
    { name: "ChannelCloseInit", options: {}, I: MsgChannelCloseInit, O: MsgChannelCloseInitResponse },
    { name: "ChannelCloseConfirm", options: {}, I: MsgChannelCloseConfirm, O: MsgChannelCloseConfirmResponse },
    { name: "RecvPacket", options: {}, I: MsgRecvPacket, O: MsgRecvPacketResponse },
    { name: "Timeout", options: {}, I: MsgTimeout, O: MsgTimeoutResponse },
    { name: "TimeoutOnClose", options: {}, I: MsgTimeoutOnClose, O: MsgTimeoutOnCloseResponse },
    { name: "Acknowledgement", options: {}, I: MsgAcknowledgement, O: MsgAcknowledgementResponse }
]);
