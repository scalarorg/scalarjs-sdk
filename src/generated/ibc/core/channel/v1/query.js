// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/query.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/query.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PacketState } from "./channel";
import { Any } from "../../../../google/protobuf/any";
import { IdentifiedClientState } from "../../client/v1/client";
import { PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination";
import { IdentifiedChannel } from "./channel";
import { PageRequest } from "../../../../cosmos/base/query/v1beta1/pagination";
import { Height } from "../../client/v1/client";
import { Channel } from "./channel";
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelRequest
 */
export const QueryChannelRequest = new QueryChannelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelResponse", [
            { no: 1, name: "channel", kind: "message", T: () => Channel },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.Channel channel */ 1:
                    message.channel = Channel.internalBinaryRead(reader, reader.uint32(), options, message.channel);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.Channel channel = 1; */
        if (message.channel)
            Channel.internalBinaryWrite(message.channel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelResponse
 */
export const QueryChannelResponse = new QueryChannelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelsRequest
 */
export const QueryChannelsRequest = new QueryChannelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelsResponse", [
            { no: 1, name: "channels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedChannel },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse },
            { no: 3, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.channel.v1.IdentifiedChannel channels */ 1:
                    message.channels.push(IdentifiedChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* ibc.core.client.v1.Height height */ 3:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated ibc.core.channel.v1.IdentifiedChannel channels = 1; */
        for (let i = 0; i < message.channels.length; i++)
            IdentifiedChannel.internalBinaryWrite(message.channels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height height = 3; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelsResponse
 */
export const QueryChannelsResponse = new QueryChannelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionChannelsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryConnectionChannelsRequest", [
            { no: 1, name: "connection", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.connection = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string connection */ 1:
                    message.connection = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string connection = 1; */
        if (message.connection !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.connection);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryConnectionChannelsRequest
 */
export const QueryConnectionChannelsRequest = new QueryConnectionChannelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConnectionChannelsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryConnectionChannelsResponse", [
            { no: 1, name: "channels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IdentifiedChannel },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse },
            { no: 3, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.channels = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.channel.v1.IdentifiedChannel channels */ 1:
                    message.channels.push(IdentifiedChannel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* ibc.core.client.v1.Height height */ 3:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated ibc.core.channel.v1.IdentifiedChannel channels = 1; */
        for (let i = 0; i < message.channels.length; i++)
            IdentifiedChannel.internalBinaryWrite(message.channels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height height = 3; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryConnectionChannelsResponse
 */
export const QueryConnectionChannelsResponse = new QueryConnectionChannelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelClientStateRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelClientStateRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelClientStateRequest
 */
export const QueryChannelClientStateRequest = new QueryChannelClientStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelClientStateResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelClientStateResponse", [
            { no: 1, name: "identified_client_state", kind: "message", T: () => IdentifiedClientState },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.client.v1.IdentifiedClientState identified_client_state */ 1:
                    message.identifiedClientState = IdentifiedClientState.internalBinaryRead(reader, reader.uint32(), options, message.identifiedClientState);
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.client.v1.IdentifiedClientState identified_client_state = 1; */
        if (message.identifiedClientState)
            IdentifiedClientState.internalBinaryWrite(message.identifiedClientState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelClientStateResponse
 */
export const QueryChannelClientStateResponse = new QueryChannelClientStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelConsensusStateRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelConsensusStateRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "revision_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "revision_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.revisionNumber = "0";
        message.revisionHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 revision_number */ 3:
                    message.revisionNumber = reader.uint64().toString();
                    break;
                case /* uint64 revision_height */ 4:
                    message.revisionHeight = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 revision_number = 3; */
        if (message.revisionNumber !== "0")
            writer.tag(3, WireType.Varint).uint64(message.revisionNumber);
        /* uint64 revision_height = 4; */
        if (message.revisionHeight !== "0")
            writer.tag(4, WireType.Varint).uint64(message.revisionHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelConsensusStateRequest
 */
export const QueryChannelConsensusStateRequest = new QueryChannelConsensusStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryChannelConsensusStateResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryChannelConsensusStateResponse", [
            { no: 1, name: "consensus_state", kind: "message", T: () => Any },
            { no: 2, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.clientId = "";
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any consensus_state */ 1:
                    message.consensusState = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusState);
                    break;
                case /* string client_id */ 2:
                    message.clientId = reader.string();
                    break;
                case /* bytes proof */ 3:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any consensus_state = 1; */
        if (message.consensusState)
            Any.internalBinaryWrite(message.consensusState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string client_id = 2; */
        if (message.clientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientId);
        /* bytes proof = 3; */
        if (message.proof.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryChannelConsensusStateResponse
 */
export const QueryChannelConsensusStateResponse = new QueryChannelConsensusStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketCommitmentRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketCommitmentRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketCommitmentRequest
 */
export const QueryPacketCommitmentRequest = new QueryPacketCommitmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketCommitmentResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketCommitmentResponse", [
            { no: 1, name: "commitment", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.commitment = new Uint8Array(0);
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes commitment */ 1:
                    message.commitment = reader.bytes();
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes commitment = 1; */
        if (message.commitment.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.commitment);
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketCommitmentResponse
 */
export const QueryPacketCommitmentResponse = new QueryPacketCommitmentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketCommitmentsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketCommitmentsRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 3:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 3; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketCommitmentsRequest
 */
export const QueryPacketCommitmentsRequest = new QueryPacketCommitmentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketCommitmentsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketCommitmentsResponse", [
            { no: 1, name: "commitments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PacketState },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse },
            { no: 3, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.commitments = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.channel.v1.PacketState commitments */ 1:
                    message.commitments.push(PacketState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* ibc.core.client.v1.Height height */ 3:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated ibc.core.channel.v1.PacketState commitments = 1; */
        for (let i = 0; i < message.commitments.length; i++)
            PacketState.internalBinaryWrite(message.commitments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height height = 3; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketCommitmentsResponse
 */
export const QueryPacketCommitmentsResponse = new QueryPacketCommitmentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketReceiptRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketReceiptRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketReceiptRequest
 */
export const QueryPacketReceiptRequest = new QueryPacketReceiptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketReceiptResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketReceiptResponse", [
            { no: 2, name: "received", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.received = false;
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool received */ 2:
                    message.received = reader.bool();
                    break;
                case /* bytes proof */ 3:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 4:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool received = 2; */
        if (message.received !== false)
            writer.tag(2, WireType.Varint).bool(message.received);
        /* bytes proof = 3; */
        if (message.proof.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 4; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketReceiptResponse
 */
export const QueryPacketReceiptResponse = new QueryPacketReceiptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketAcknowledgementRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketAcknowledgementRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketAcknowledgementRequest
 */
export const QueryPacketAcknowledgementRequest = new QueryPacketAcknowledgementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketAcknowledgementResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketAcknowledgementResponse", [
            { no: 1, name: "acknowledgement", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.acknowledgement = new Uint8Array(0);
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes acknowledgement */ 1:
                    message.acknowledgement = reader.bytes();
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes acknowledgement = 1; */
        if (message.acknowledgement.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.acknowledgement);
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketAcknowledgementResponse
 */
export const QueryPacketAcknowledgementResponse = new QueryPacketAcknowledgementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketAcknowledgementsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketAcknowledgementsRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pagination", kind: "message", T: () => PageRequest },
            { no: 4, name: "packet_commitment_sequences", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.packetCommitmentSequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 3:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated uint64 packet_commitment_sequences */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packetCommitmentSequences.push(reader.uint64().toString());
                    else
                        message.packetCommitmentSequences.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 3; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 packet_commitment_sequences = 4; */
        if (message.packetCommitmentSequences.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packetCommitmentSequences.length; i++)
                writer.uint64(message.packetCommitmentSequences[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
 */
export const QueryPacketAcknowledgementsRequest = new QueryPacketAcknowledgementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPacketAcknowledgementsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryPacketAcknowledgementsResponse", [
            { no: 1, name: "acknowledgements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PacketState },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse },
            { no: 3, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.acknowledgements = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ibc.core.channel.v1.PacketState acknowledgements */ 1:
                    message.acknowledgements.push(PacketState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* ibc.core.client.v1.Height height */ 3:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated ibc.core.channel.v1.PacketState acknowledgements = 1; */
        for (let i = 0; i < message.acknowledgements.length; i++)
            PacketState.internalBinaryWrite(message.acknowledgements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ibc.core.client.v1.Height height = 3; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
 */
export const QueryPacketAcknowledgementsResponse = new QueryPacketAcknowledgementsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnreceivedPacketsRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryUnreceivedPacketsRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "packet_commitment_sequences", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.packetCommitmentSequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* repeated uint64 packet_commitment_sequences */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packetCommitmentSequences.push(reader.uint64().toString());
                    else
                        message.packetCommitmentSequences.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* repeated uint64 packet_commitment_sequences = 3; */
        if (message.packetCommitmentSequences.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packetCommitmentSequences.length; i++)
                writer.uint64(message.packetCommitmentSequences[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryUnreceivedPacketsRequest
 */
export const QueryUnreceivedPacketsRequest = new QueryUnreceivedPacketsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnreceivedPacketsResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryUnreceivedPacketsResponse", [
            { no: 1, name: "sequences", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 sequences */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sequences.push(reader.uint64().toString());
                    else
                        message.sequences.push(reader.uint64().toString());
                    break;
                case /* ibc.core.client.v1.Height height */ 2:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint64 sequences = 1; */
        if (message.sequences.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sequences.length; i++)
                writer.uint64(message.sequences[i]);
            writer.join();
        }
        /* ibc.core.client.v1.Height height = 2; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryUnreceivedPacketsResponse
 */
export const QueryUnreceivedPacketsResponse = new QueryUnreceivedPacketsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnreceivedAcksRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryUnreceivedAcksRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "packet_ack_sequences", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.packetAckSequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* repeated uint64 packet_ack_sequences */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.packetAckSequences.push(reader.uint64().toString());
                    else
                        message.packetAckSequences.push(reader.uint64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* repeated uint64 packet_ack_sequences = 3; */
        if (message.packetAckSequences.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.packetAckSequences.length; i++)
                writer.uint64(message.packetAckSequences[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryUnreceivedAcksRequest
 */
export const QueryUnreceivedAcksRequest = new QueryUnreceivedAcksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnreceivedAcksResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryUnreceivedAcksResponse", [
            { no: 1, name: "sequences", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sequences = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 sequences */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sequences.push(reader.uint64().toString());
                    else
                        message.sequences.push(reader.uint64().toString());
                    break;
                case /* ibc.core.client.v1.Height height */ 2:
                    message.height = Height.internalBinaryRead(reader, reader.uint32(), options, message.height);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint64 sequences = 1; */
        if (message.sequences.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sequences.length; i++)
                writer.uint64(message.sequences[i]);
            writer.join();
        }
        /* ibc.core.client.v1.Height height = 2; */
        if (message.height)
            Height.internalBinaryWrite(message.height, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryUnreceivedAcksResponse
 */
export const QueryUnreceivedAcksResponse = new QueryUnreceivedAcksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNextSequenceReceiveRequest$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryNextSequenceReceiveRequest", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryNextSequenceReceiveRequest
 */
export const QueryNextSequenceReceiveRequest = new QueryNextSequenceReceiveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNextSequenceReceiveResponse$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.QueryNextSequenceReceiveResponse", [
            { no: 1, name: "next_sequence_receive", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "proof", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "proof_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.nextSequenceReceive = "0";
        message.proof = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 next_sequence_receive */ 1:
                    message.nextSequenceReceive = reader.uint64().toString();
                    break;
                case /* bytes proof */ 2:
                    message.proof = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height proof_height */ 3:
                    message.proofHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.proofHeight);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 next_sequence_receive = 1; */
        if (message.nextSequenceReceive !== "0")
            writer.tag(1, WireType.Varint).uint64(message.nextSequenceReceive);
        /* bytes proof = 2; */
        if (message.proof.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.proof);
        /* ibc.core.client.v1.Height proof_height = 3; */
        if (message.proofHeight)
            Height.internalBinaryWrite(message.proofHeight, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.QueryNextSequenceReceiveResponse
 */
export const QueryNextSequenceReceiveResponse = new QueryNextSequenceReceiveResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.core.channel.v1.Query
 */
export const Query = new ServiceType("ibc.core.channel.v1.Query", [
    { name: "Channel", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}" } }, I: QueryChannelRequest, O: QueryChannelResponse },
    { name: "Channels", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels" } }, I: QueryChannelsRequest, O: QueryChannelsResponse },
    { name: "ConnectionChannels", options: { "google.api.http": { get: "/ibc/core/channel/v1/connections/{connection}/channels" } }, I: QueryConnectionChannelsRequest, O: QueryConnectionChannelsResponse },
    { name: "ChannelClientState", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state" } }, I: QueryChannelClientStateRequest, O: QueryChannelClientStateResponse },
    { name: "ChannelConsensusState", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}" } }, I: QueryChannelConsensusStateRequest, O: QueryChannelConsensusStateResponse },
    { name: "PacketCommitment", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}" } }, I: QueryPacketCommitmentRequest, O: QueryPacketCommitmentResponse },
    { name: "PacketCommitments", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments" } }, I: QueryPacketCommitmentsRequest, O: QueryPacketCommitmentsResponse },
    { name: "PacketReceipt", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}" } }, I: QueryPacketReceiptRequest, O: QueryPacketReceiptResponse },
    { name: "PacketAcknowledgement", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}" } }, I: QueryPacketAcknowledgementRequest, O: QueryPacketAcknowledgementResponse },
    { name: "PacketAcknowledgements", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements" } }, I: QueryPacketAcknowledgementsRequest, O: QueryPacketAcknowledgementsResponse },
    { name: "UnreceivedPackets", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets" } }, I: QueryUnreceivedPacketsRequest, O: QueryUnreceivedPacketsResponse },
    { name: "UnreceivedAcks", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks" } }, I: QueryUnreceivedAcksRequest, O: QueryUnreceivedAcksResponse },
    { name: "NextSequenceReceive", options: { "google.api.http": { get: "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence" } }, I: QueryNextSequenceReceiveRequest, O: QueryNextSequenceReceiveResponse }
]);
