// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/tx.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Packet } from "./channel";
import { Height } from "../../client/v1/client";
import { Channel } from "./channel";
/**
 * MsgChannelOpenInit defines an sdk.Msg to initialize a channel handshake. It
 * is called by a relayer on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenInit
 */
export interface MsgChannelOpenInit {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Channel channel = 2;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string signer = 3;
     */
    signer: string;
}
/**
 * MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export interface MsgChannelOpenInitResponse {
    /**
     * @generated from protobuf field: string channel_id = 1;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string version = 2;
     */
    version: string;
}
/**
 * MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel
 * on Chain B. The version field within the Channel field has been deprecated. Its
 * value will be ignored by core IBC.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenTry
 */
export interface MsgChannelOpenTry {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
     *
     * @deprecated
     * @generated from protobuf field: string previous_channel_id = 2 [deprecated = true];
     */
    previousChannelId: string;
    /**
     * NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
     *
     * @generated from protobuf field: ibc.core.channel.v1.Channel channel = 3;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string counterparty_version = 4;
     */
    counterpartyVersion: string;
    /**
     * @generated from protobuf field: bytes proof_init = 5;
     */
    proofInit: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 6;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 7;
     */
    signer: string;
}
/**
 * MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export interface MsgChannelOpenTryResponse {
    /**
     * @generated from protobuf field: string version = 1;
     */
    version: string;
}
/**
 * MsgChannelOpenAck defines a msg sent by a Relayer to Chain A to acknowledge
 * the change of channel state to TRYOPEN on Chain B.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenAck
 */
export interface MsgChannelOpenAck {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string counterparty_channel_id = 3;
     */
    counterpartyChannelId: string;
    /**
     * @generated from protobuf field: string counterparty_version = 4;
     */
    counterpartyVersion: string;
    /**
     * @generated from protobuf field: bytes proof_try = 5;
     */
    proofTry: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 6;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 7;
     */
    signer: string;
}
/**
 * MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export interface MsgChannelOpenAckResponse {
}
/**
 * MsgChannelOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of channel state to OPEN on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export interface MsgChannelOpenConfirm {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: bytes proof_ack = 3;
     */
    proofAck: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
 * type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export interface MsgChannelOpenConfirmResponse {
}
/**
 * MsgChannelCloseInit defines a msg sent by a Relayer to Chain A
 * to close a channel with Chain B.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseInit
 */
export interface MsgChannelCloseInit {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: string signer = 3;
     */
    signer: string;
}
/**
 * MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export interface MsgChannelCloseInitResponse {
}
/**
 * MsgChannelCloseConfirm defines a msg sent by a Relayer to Chain B
 * to acknowledge the change of channel state to CLOSED on Chain A.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export interface MsgChannelCloseConfirm {
    /**
     * @generated from protobuf field: string port_id = 1;
     */
    portId: string;
    /**
     * @generated from protobuf field: string channel_id = 2;
     */
    channelId: string;
    /**
     * @generated from protobuf field: bytes proof_init = 3;
     */
    proofInit: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm response
 * type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export interface MsgChannelCloseConfirmResponse {
}
/**
 * MsgRecvPacket receives incoming IBC packet
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgRecvPacket
 */
export interface MsgRecvPacket {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_commitment = 2;
     */
    proofCommitment: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 4;
     */
    signer: string;
}
/**
 * MsgRecvPacketResponse defines the Msg/RecvPacket response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export interface MsgRecvPacketResponse {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.ResponseResultType result = 1;
     */
    result: ResponseResultType;
}
/**
 * MsgTimeout receives timed-out packet
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeout
 */
export interface MsgTimeout {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_unreceived = 2;
     */
    proofUnreceived: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 3;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: uint64 next_sequence_recv = 4;
     */
    nextSequenceRecv: string;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgTimeoutResponse defines the Msg/Timeout response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutResponse
 */
export interface MsgTimeoutResponse {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.ResponseResultType result = 1;
     */
    result: ResponseResultType;
}
/**
 * MsgTimeoutOnClose timed-out packet upon counterparty channel closure.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export interface MsgTimeoutOnClose {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes proof_unreceived = 2;
     */
    proofUnreceived: Uint8Array;
    /**
     * @generated from protobuf field: bytes proof_close = 3;
     */
    proofClose: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: uint64 next_sequence_recv = 5;
     */
    nextSequenceRecv: string;
    /**
     * @generated from protobuf field: string signer = 6;
     */
    signer: string;
}
/**
 * MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export interface MsgTimeoutOnCloseResponse {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.ResponseResultType result = 1;
     */
    result: ResponseResultType;
}
/**
 * MsgAcknowledgement receives incoming IBC acknowledgement
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgAcknowledgement
 */
export interface MsgAcknowledgement {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.Packet packet = 1;
     */
    packet?: Packet;
    /**
     * @generated from protobuf field: bytes acknowledgement = 2;
     */
    acknowledgement: Uint8Array;
    /**
     * @generated from protobuf field: bytes proof_acked = 3;
     */
    proofAcked: Uint8Array;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height proof_height = 4;
     */
    proofHeight?: Height;
    /**
     * @generated from protobuf field: string signer = 5;
     */
    signer: string;
}
/**
 * MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
 *
 * @generated from protobuf message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export interface MsgAcknowledgementResponse {
    /**
     * @generated from protobuf field: ibc.core.channel.v1.ResponseResultType result = 1;
     */
    result: ResponseResultType;
}
/**
 * ResponseResultType defines the possible outcomes of the execution of a message
 *
 * @generated from protobuf enum ibc.core.channel.v1.ResponseResultType
 */
export declare enum ResponseResultType {
    /**
     * Default zero value enumeration
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_NOOP = 1;
     */
    NOOP = 1,
    /**
     * The message was executed successfully
     *
     * @generated from protobuf enum value: RESPONSE_RESULT_TYPE_SUCCESS = 2;
     */
    SUCCESS = 2
}
declare class MsgChannelOpenInit$Type extends MessageType<MsgChannelOpenInit> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenInit>): MsgChannelOpenInit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenInit): MsgChannelOpenInit;
    internalBinaryWrite(message: MsgChannelOpenInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInit
 */
export declare const MsgChannelOpenInit: MsgChannelOpenInit$Type;
declare class MsgChannelOpenInitResponse$Type extends MessageType<MsgChannelOpenInitResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenInitResponse>): MsgChannelOpenInitResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenInitResponse): MsgChannelOpenInitResponse;
    internalBinaryWrite(message: MsgChannelOpenInitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenInitResponse
 */
export declare const MsgChannelOpenInitResponse: MsgChannelOpenInitResponse$Type;
declare class MsgChannelOpenTry$Type extends MessageType<MsgChannelOpenTry> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenTry>): MsgChannelOpenTry;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenTry): MsgChannelOpenTry;
    internalBinaryWrite(message: MsgChannelOpenTry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTry
 */
export declare const MsgChannelOpenTry: MsgChannelOpenTry$Type;
declare class MsgChannelOpenTryResponse$Type extends MessageType<MsgChannelOpenTryResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenTryResponse>): MsgChannelOpenTryResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenTryResponse): MsgChannelOpenTryResponse;
    internalBinaryWrite(message: MsgChannelOpenTryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenTryResponse
 */
export declare const MsgChannelOpenTryResponse: MsgChannelOpenTryResponse$Type;
declare class MsgChannelOpenAck$Type extends MessageType<MsgChannelOpenAck> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenAck>): MsgChannelOpenAck;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenAck): MsgChannelOpenAck;
    internalBinaryWrite(message: MsgChannelOpenAck, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAck
 */
export declare const MsgChannelOpenAck: MsgChannelOpenAck$Type;
declare class MsgChannelOpenAckResponse$Type extends MessageType<MsgChannelOpenAckResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenAckResponse>): MsgChannelOpenAckResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenAckResponse): MsgChannelOpenAckResponse;
    internalBinaryWrite(message: MsgChannelOpenAckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenAckResponse
 */
export declare const MsgChannelOpenAckResponse: MsgChannelOpenAckResponse$Type;
declare class MsgChannelOpenConfirm$Type extends MessageType<MsgChannelOpenConfirm> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenConfirm>): MsgChannelOpenConfirm;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenConfirm): MsgChannelOpenConfirm;
    internalBinaryWrite(message: MsgChannelOpenConfirm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirm
 */
export declare const MsgChannelOpenConfirm: MsgChannelOpenConfirm$Type;
declare class MsgChannelOpenConfirmResponse$Type extends MessageType<MsgChannelOpenConfirmResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelOpenConfirmResponse>): MsgChannelOpenConfirmResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelOpenConfirmResponse): MsgChannelOpenConfirmResponse;
    internalBinaryWrite(message: MsgChannelOpenConfirmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelOpenConfirmResponse
 */
export declare const MsgChannelOpenConfirmResponse: MsgChannelOpenConfirmResponse$Type;
declare class MsgChannelCloseInit$Type extends MessageType<MsgChannelCloseInit> {
    constructor();
    create(value?: PartialMessage<MsgChannelCloseInit>): MsgChannelCloseInit;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseInit): MsgChannelCloseInit;
    internalBinaryWrite(message: MsgChannelCloseInit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInit
 */
export declare const MsgChannelCloseInit: MsgChannelCloseInit$Type;
declare class MsgChannelCloseInitResponse$Type extends MessageType<MsgChannelCloseInitResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelCloseInitResponse>): MsgChannelCloseInitResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseInitResponse): MsgChannelCloseInitResponse;
    internalBinaryWrite(message: MsgChannelCloseInitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseInitResponse
 */
export declare const MsgChannelCloseInitResponse: MsgChannelCloseInitResponse$Type;
declare class MsgChannelCloseConfirm$Type extends MessageType<MsgChannelCloseConfirm> {
    constructor();
    create(value?: PartialMessage<MsgChannelCloseConfirm>): MsgChannelCloseConfirm;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseConfirm): MsgChannelCloseConfirm;
    internalBinaryWrite(message: MsgChannelCloseConfirm, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirm
 */
export declare const MsgChannelCloseConfirm: MsgChannelCloseConfirm$Type;
declare class MsgChannelCloseConfirmResponse$Type extends MessageType<MsgChannelCloseConfirmResponse> {
    constructor();
    create(value?: PartialMessage<MsgChannelCloseConfirmResponse>): MsgChannelCloseConfirmResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgChannelCloseConfirmResponse): MsgChannelCloseConfirmResponse;
    internalBinaryWrite(message: MsgChannelCloseConfirmResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgChannelCloseConfirmResponse
 */
export declare const MsgChannelCloseConfirmResponse: MsgChannelCloseConfirmResponse$Type;
declare class MsgRecvPacket$Type extends MessageType<MsgRecvPacket> {
    constructor();
    create(value?: PartialMessage<MsgRecvPacket>): MsgRecvPacket;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgRecvPacket): MsgRecvPacket;
    internalBinaryWrite(message: MsgRecvPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacket
 */
export declare const MsgRecvPacket: MsgRecvPacket$Type;
declare class MsgRecvPacketResponse$Type extends MessageType<MsgRecvPacketResponse> {
    constructor();
    create(value?: PartialMessage<MsgRecvPacketResponse>): MsgRecvPacketResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgRecvPacketResponse): MsgRecvPacketResponse;
    internalBinaryWrite(message: MsgRecvPacketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgRecvPacketResponse
 */
export declare const MsgRecvPacketResponse: MsgRecvPacketResponse$Type;
declare class MsgTimeout$Type extends MessageType<MsgTimeout> {
    constructor();
    create(value?: PartialMessage<MsgTimeout>): MsgTimeout;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeout): MsgTimeout;
    internalBinaryWrite(message: MsgTimeout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeout
 */
export declare const MsgTimeout: MsgTimeout$Type;
declare class MsgTimeoutResponse$Type extends MessageType<MsgTimeoutResponse> {
    constructor();
    create(value?: PartialMessage<MsgTimeoutResponse>): MsgTimeoutResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutResponse): MsgTimeoutResponse;
    internalBinaryWrite(message: MsgTimeoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutResponse
 */
export declare const MsgTimeoutResponse: MsgTimeoutResponse$Type;
declare class MsgTimeoutOnClose$Type extends MessageType<MsgTimeoutOnClose> {
    constructor();
    create(value?: PartialMessage<MsgTimeoutOnClose>): MsgTimeoutOnClose;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutOnClose): MsgTimeoutOnClose;
    internalBinaryWrite(message: MsgTimeoutOnClose, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnClose
 */
export declare const MsgTimeoutOnClose: MsgTimeoutOnClose$Type;
declare class MsgTimeoutOnCloseResponse$Type extends MessageType<MsgTimeoutOnCloseResponse> {
    constructor();
    create(value?: PartialMessage<MsgTimeoutOnCloseResponse>): MsgTimeoutOnCloseResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTimeoutOnCloseResponse): MsgTimeoutOnCloseResponse;
    internalBinaryWrite(message: MsgTimeoutOnCloseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgTimeoutOnCloseResponse
 */
export declare const MsgTimeoutOnCloseResponse: MsgTimeoutOnCloseResponse$Type;
declare class MsgAcknowledgement$Type extends MessageType<MsgAcknowledgement> {
    constructor();
    create(value?: PartialMessage<MsgAcknowledgement>): MsgAcknowledgement;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAcknowledgement): MsgAcknowledgement;
    internalBinaryWrite(message: MsgAcknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgement
 */
export declare const MsgAcknowledgement: MsgAcknowledgement$Type;
declare class MsgAcknowledgementResponse$Type extends MessageType<MsgAcknowledgementResponse> {
    constructor();
    create(value?: PartialMessage<MsgAcknowledgementResponse>): MsgAcknowledgementResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAcknowledgementResponse): MsgAcknowledgementResponse;
    internalBinaryWrite(message: MsgAcknowledgementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.MsgAcknowledgementResponse
 */
export declare const MsgAcknowledgementResponse: MsgAcknowledgementResponse$Type;
/**
 * @generated ServiceType for protobuf service ibc.core.channel.v1.Msg
 */
export declare const Msg: any;
export {};
