// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/core/channel/v1/channel.proto" (package "ibc.core.channel.v1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Height } from "../../client/v1/client";
/**
 * State defines if a channel is in one of the following states:
 * CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
 *
 * @generated from protobuf enum ibc.core.channel.v1.State
 */
export var State;
(function (State) {
    /**
     * Default State
     *
     * @generated from protobuf enum value: STATE_UNINITIALIZED_UNSPECIFIED = 0;
     */
    State[State["UNINITIALIZED_UNSPECIFIED"] = 0] = "UNINITIALIZED_UNSPECIFIED";
    /**
     * A channel has just started the opening handshake.
     *
     * @generated from protobuf enum value: STATE_INIT = 1;
     */
    State[State["INIT"] = 1] = "INIT";
    /**
     * A channel has acknowledged the handshake step on the counterparty chain.
     *
     * @generated from protobuf enum value: STATE_TRYOPEN = 2;
     */
    State[State["TRYOPEN"] = 2] = "TRYOPEN";
    /**
     * A channel has completed the handshake. Open channels are
     * ready to send and receive packets.
     *
     * @generated from protobuf enum value: STATE_OPEN = 3;
     */
    State[State["OPEN"] = 3] = "OPEN";
    /**
     * A channel has been closed and can no longer be used to send or receive
     * packets.
     *
     * @generated from protobuf enum value: STATE_CLOSED = 4;
     */
    State[State["CLOSED"] = 4] = "CLOSED";
})(State || (State = {}));
/**
 * Order defines if a channel is ORDERED or UNORDERED
 *
 * @generated from protobuf enum ibc.core.channel.v1.Order
 */
export var Order;
(function (Order) {
    /**
     * zero-value for channel ordering
     *
     * @generated from protobuf enum value: ORDER_NONE_UNSPECIFIED = 0;
     */
    Order[Order["NONE_UNSPECIFIED"] = 0] = "NONE_UNSPECIFIED";
    /**
     * packets can be delivered in any order, which may differ from the order in
     * which they were sent.
     *
     * @generated from protobuf enum value: ORDER_UNORDERED = 1;
     */
    Order[Order["UNORDERED"] = 1] = "UNORDERED";
    /**
     * packets are delivered exactly in the order which they were sent
     *
     * @generated from protobuf enum value: ORDER_ORDERED = 2;
     */
    Order[Order["ORDERED"] = 2] = "ORDERED";
})(Order || (Order = {}));
// @generated message type with reflection information, may provide speed optimized methods
class Channel$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.Channel", [
            { no: 1, name: "state", kind: "enum", T: () => ["ibc.core.channel.v1.State", State, "STATE_"] },
            { no: 2, name: "ordering", kind: "enum", T: () => ["ibc.core.channel.v1.Order", Order, "ORDER_"] },
            { no: 3, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 4, name: "connection_hops", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_hops\"" } },
            { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.state = 0;
        message.ordering = 0;
        message.connectionHops = [];
        message.version = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.State state */ 1:
                    message.state = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Order ordering */ 2:
                    message.ordering = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Counterparty counterparty */ 3:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* repeated string connection_hops */ 4:
                    message.connectionHops.push(reader.string());
                    break;
                case /* string version */ 5:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.State state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* ibc.core.channel.v1.Order ordering = 2; */
        if (message.ordering !== 0)
            writer.tag(2, WireType.Varint).int32(message.ordering);
        /* ibc.core.channel.v1.Counterparty counterparty = 3; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string connection_hops = 4; */
        for (let i = 0; i < message.connectionHops.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.connectionHops[i]);
        /* string version = 5; */
        if (message.version !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Channel
 */
export const Channel = new Channel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdentifiedChannel$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.IdentifiedChannel", [
            { no: 1, name: "state", kind: "enum", T: () => ["ibc.core.channel.v1.State", State, "STATE_"] },
            { no: 2, name: "ordering", kind: "enum", T: () => ["ibc.core.channel.v1.Order", Order, "ORDER_"] },
            { no: 3, name: "counterparty", kind: "message", T: () => Counterparty, options: { "gogoproto.nullable": false } },
            { no: 4, name: "connection_hops", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"connection_hops\"" } },
            { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.state = 0;
        message.ordering = 0;
        message.connectionHops = [];
        message.version = "";
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ibc.core.channel.v1.State state */ 1:
                    message.state = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Order ordering */ 2:
                    message.ordering = reader.int32();
                    break;
                case /* ibc.core.channel.v1.Counterparty counterparty */ 3:
                    message.counterparty = Counterparty.internalBinaryRead(reader, reader.uint32(), options, message.counterparty);
                    break;
                case /* repeated string connection_hops */ 4:
                    message.connectionHops.push(reader.string());
                    break;
                case /* string version */ 5:
                    message.version = reader.string();
                    break;
                case /* string port_id */ 6:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 7:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* ibc.core.channel.v1.State state = 1; */
        if (message.state !== 0)
            writer.tag(1, WireType.Varint).int32(message.state);
        /* ibc.core.channel.v1.Order ordering = 2; */
        if (message.ordering !== 0)
            writer.tag(2, WireType.Varint).int32(message.ordering);
        /* ibc.core.channel.v1.Counterparty counterparty = 3; */
        if (message.counterparty)
            Counterparty.internalBinaryWrite(message.counterparty, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string connection_hops = 4; */
        for (let i = 0; i < message.connectionHops.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.connectionHops[i]);
        /* string version = 5; */
        if (message.version !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        /* string port_id = 6; */
        if (message.portId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 7; */
        if (message.channelId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.IdentifiedChannel
 */
export const IdentifiedChannel = new IdentifiedChannel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Counterparty$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.Counterparty", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Counterparty
 */
export const Counterparty = new Counterparty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.Packet", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "source_port", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_port\"" } },
            { no: 3, name: "source_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_channel\"" } },
            { no: 4, name: "destination_port", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"destination_port\"" } },
            { no: 5, name: "destination_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"destination_channel\"" } },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "timeout_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"timeout_height\"" } },
            { no: 8, name: "timeout_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"timeout_timestamp\"" } }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sequence = "0";
        message.sourcePort = "";
        message.sourceChannel = "";
        message.destinationPort = "";
        message.destinationChannel = "";
        message.data = new Uint8Array(0);
        message.timeoutTimestamp = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string source_port */ 2:
                    message.sourcePort = reader.string();
                    break;
                case /* string source_channel */ 3:
                    message.sourceChannel = reader.string();
                    break;
                case /* string destination_port */ 4:
                    message.destinationPort = reader.string();
                    break;
                case /* string destination_channel */ 5:
                    message.destinationChannel = reader.string();
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                case /* ibc.core.client.v1.Height timeout_height */ 7:
                    message.timeoutHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.timeoutHeight);
                    break;
                case /* uint64 timeout_timestamp */ 8:
                    message.timeoutTimestamp = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        /* string source_port = 2; */
        if (message.sourcePort !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourcePort);
        /* string source_channel = 3; */
        if (message.sourceChannel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceChannel);
        /* string destination_port = 4; */
        if (message.destinationPort !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationPort);
        /* string destination_channel = 5; */
        if (message.destinationChannel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationChannel);
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        /* ibc.core.client.v1.Height timeout_height = 7; */
        if (message.timeoutHeight)
            Height.internalBinaryWrite(message.timeoutHeight, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timeout_timestamp = 8; */
        if (message.timeoutTimestamp !== "0")
            writer.tag(8, WireType.Varint).uint64(message.timeoutTimestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Packet
 */
export const Packet = new Packet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketState$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.PacketState", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* bytes data */ 4:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        /* bytes data = 4; */
        if (message.data.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.PacketState
 */
export const PacketState = new PacketState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PacketId$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.PacketId", [
            { no: 1, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"port_id\"" } },
            { no: 2, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"channel_id\"" } },
            { no: 3, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.portId = "";
        message.channelId = "";
        message.sequence = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string port_id */ 1:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 2:
                    message.channelId = reader.string();
                    break;
                case /* uint64 sequence */ 3:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string port_id = 1; */
        if (message.portId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 2; */
        if (message.channelId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.channelId);
        /* uint64 sequence = 3; */
        if (message.sequence !== "0")
            writer.tag(3, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.PacketId
 */
export const PacketId = new PacketId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Acknowledgement$Type extends MessageType {
    constructor() {
        super("ibc.core.channel.v1.Acknowledgement", [
            { no: 21, name: "result", kind: "scalar", oneof: "response", T: 12 /*ScalarType.BYTES*/ },
            { no: 22, name: "error", kind: "scalar", oneof: "response", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes result */ 21:
                    message.response = {
                        oneofKind: "result",
                        result: reader.bytes()
                    };
                    break;
                case /* string error */ 22:
                    message.response = {
                        oneofKind: "error",
                        error: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes result = 21; */
        if (message.response.oneofKind === "result")
            writer.tag(21, WireType.LengthDelimited).bytes(message.response.result);
        /* string error = 22; */
        if (message.response.oneofKind === "error")
            writer.tag(22, WireType.LengthDelimited).string(message.response.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.core.channel.v1.Acknowledgement
 */
export const Acknowledgement = new Acknowledgement$Type();
