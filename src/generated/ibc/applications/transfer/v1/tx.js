// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/applications/transfer/v1/tx.proto" (package "ibc.applications.transfer.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/applications/transfer/v1/tx.proto" (package "ibc.applications.transfer.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Height } from "../../../core/client/v1/client";
import { Coin } from "../../../../cosmos/base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class MsgTransfer$Type extends MessageType {
    constructor() {
        super("ibc.applications.transfer.v1.MsgTransfer", [
            { no: 1, name: "source_port", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_port\"" } },
            { no: 2, name: "source_channel", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"source_channel\"" } },
            { no: 3, name: "token", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timeout_height", kind: "message", T: () => Height, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"timeout_height\"" } },
            { no: 7, name: "timeout_timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"timeout_timestamp\"" } },
            { no: 8, name: "memo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sourcePort = "";
        message.sourceChannel = "";
        message.sender = "";
        message.receiver = "";
        message.timeoutTimestamp = "0";
        message.memo = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_port */ 1:
                    message.sourcePort = reader.string();
                    break;
                case /* string source_channel */ 2:
                    message.sourceChannel = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin token */ 3:
                    message.token = Coin.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                case /* string sender */ 4:
                    message.sender = reader.string();
                    break;
                case /* string receiver */ 5:
                    message.receiver = reader.string();
                    break;
                case /* ibc.core.client.v1.Height timeout_height */ 6:
                    message.timeoutHeight = Height.internalBinaryRead(reader, reader.uint32(), options, message.timeoutHeight);
                    break;
                case /* uint64 timeout_timestamp */ 7:
                    message.timeoutTimestamp = reader.uint64().toString();
                    break;
                case /* string memo */ 8:
                    message.memo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string source_port = 1; */
        if (message.sourcePort !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourcePort);
        /* string source_channel = 2; */
        if (message.sourceChannel !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceChannel);
        /* cosmos.base.v1beta1.Coin token = 3; */
        if (message.token)
            Coin.internalBinaryWrite(message.token, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string sender = 4; */
        if (message.sender !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sender);
        /* string receiver = 5; */
        if (message.receiver !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.receiver);
        /* ibc.core.client.v1.Height timeout_height = 6; */
        if (message.timeoutHeight)
            Height.internalBinaryWrite(message.timeoutHeight, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timeout_timestamp = 7; */
        if (message.timeoutTimestamp !== "0")
            writer.tag(7, WireType.Varint).uint64(message.timeoutTimestamp);
        /* string memo = 8; */
        if (message.memo !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.memo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.MsgTransfer
 */
export const MsgTransfer = new MsgTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTransferResponse$Type extends MessageType {
    constructor() {
        super("ibc.applications.transfer.v1.MsgTransferResponse", [
            { no: 1, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sequence = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sequence */ 1:
                    message.sequence = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 sequence = 1; */
        if (message.sequence !== "0")
            writer.tag(1, WireType.Varint).uint64(message.sequence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.MsgTransferResponse
 */
export const MsgTransferResponse = new MsgTransferResponse$Type();
/**
 * @generated ServiceType for protobuf service ibc.applications.transfer.v1.Msg
 */
export const Msg = new ServiceType("ibc.applications.transfer.v1.Msg", [
    { name: "Transfer", options: {}, I: MsgTransfer, O: MsgTransferResponse }
]);
