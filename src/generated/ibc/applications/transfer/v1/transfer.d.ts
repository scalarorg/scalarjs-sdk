// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/applications/transfer/v1/transfer.proto" (package "ibc.applications.transfer.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * DenomTrace contains the base denomination for ICS20 fungible tokens and the
 * source tracing information path.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.DenomTrace
 */
export interface DenomTrace {
    /**
     * path defines the chain of port/channel identifiers used for tracing the
     * source of the fungible token.
     *
     * @generated from protobuf field: string path = 1;
     */
    path: string;
    /**
     * base denomination of the relayed fungible token.
     *
     * @generated from protobuf field: string base_denom = 2;
     */
    baseDenom: string;
}
/**
 * Params defines the set of IBC transfer parameters.
 * NOTE: To prevent a single token from being transferred, set the
 * TransfersEnabled parameter to true and then set the bank module's SendEnabled
 * parameter for the denomination to false.
 *
 * @generated from protobuf message ibc.applications.transfer.v1.Params
 */
export interface Params {
    /**
     * send_enabled enables or disables all cross-chain token transfers from this
     * chain.
     *
     * @generated from protobuf field: bool send_enabled = 1;
     */
    sendEnabled: boolean;
    /**
     * receive_enabled enables or disables all cross-chain token transfers to this
     * chain.
     *
     * @generated from protobuf field: bool receive_enabled = 2;
     */
    receiveEnabled: boolean;
}
declare class DenomTrace$Type extends MessageType<DenomTrace> {
    constructor();
    create(value?: PartialMessage<DenomTrace>): DenomTrace;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DenomTrace): DenomTrace;
    internalBinaryWrite(message: DenomTrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.DenomTrace
 */
export declare const DenomTrace: DenomTrace$Type;
declare class Params$Type extends MessageType<Params> {
    constructor();
    create(value?: PartialMessage<Params>): Params;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params;
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.applications.transfer.v1.Params
 */
export declare const Params: Params$Type;
export {};
