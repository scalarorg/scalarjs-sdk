// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "ibc/lightclients/tendermint/v1/tendermint.proto" (package "ibc.lightclients.tendermint.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ValidatorSet } from "../../../../tendermint/types/validator";
import { SignedHeader } from "../../../../tendermint/types/types";
import { MerkleRoot } from "../../../core/commitment/v1/commitment";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { ProofSpec } from "../../../../proofs";
import { Height } from "../../../core/client/v1/client";
import { Duration } from "../../../../google/protobuf/duration";
/**
 * ClientState from Tendermint tracks the current validator set, latest height,
 * and a possible frozen height.
 *
 * @generated from protobuf message ibc.lightclients.tendermint.v1.ClientState
 */
export interface ClientState {
    /**
     * @generated from protobuf field: string chain_id = 1;
     */
    chainId: string;
    /**
     * @generated from protobuf field: ibc.lightclients.tendermint.v1.Fraction trust_level = 2;
     */
    trustLevel?: Fraction;
    /**
     * duration of the period since the LastestTimestamp during which the
     * submitted headers are valid for upgrade
     *
     * @generated from protobuf field: google.protobuf.Duration trusting_period = 3;
     */
    trustingPeriod?: Duration;
    /**
     * duration of the staking unbonding period
     *
     * @generated from protobuf field: google.protobuf.Duration unbonding_period = 4;
     */
    unbondingPeriod?: Duration;
    /**
     * defines how much new (untrusted) header's Time can drift into the future.
     *
     * @generated from protobuf field: google.protobuf.Duration max_clock_drift = 5;
     */
    maxClockDrift?: Duration;
    /**
     * Block height when the client was frozen due to a misbehaviour
     *
     * @generated from protobuf field: ibc.core.client.v1.Height frozen_height = 6;
     */
    frozenHeight?: Height;
    /**
     * Latest height the client was updated to
     *
     * @generated from protobuf field: ibc.core.client.v1.Height latest_height = 7;
     */
    latestHeight?: Height;
    /**
     * Proof specifications used in verifying counterparty state
     *
     * @generated from protobuf field: repeated ics23.ProofSpec proof_specs = 8;
     */
    proofSpecs: ProofSpec[];
    /**
     * Path at which next upgraded client will be committed.
     * Each element corresponds to the key for a single CommitmentProof in the
     * chained proof. NOTE: ClientState must stored under
     * `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be stored
     * under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains using
     * the default upgrade module, upgrade_path should be []string{"upgrade",
     * "upgradedIBCState"}`
     *
     * @generated from protobuf field: repeated string upgrade_path = 9;
     */
    upgradePath: string[];
    /**
     * allow_update_after_expiry is deprecated
     *
     * @deprecated
     * @generated from protobuf field: bool allow_update_after_expiry = 10 [deprecated = true];
     */
    allowUpdateAfterExpiry: boolean;
    /**
     * allow_update_after_misbehaviour is deprecated
     *
     * @deprecated
     * @generated from protobuf field: bool allow_update_after_misbehaviour = 11 [deprecated = true];
     */
    allowUpdateAfterMisbehaviour: boolean;
}
/**
 * ConsensusState defines the consensus state from Tendermint.
 *
 * @generated from protobuf message ibc.lightclients.tendermint.v1.ConsensusState
 */
export interface ConsensusState {
    /**
     * timestamp that corresponds to the block height in which the ConsensusState
     * was stored.
     *
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
     */
    timestamp?: Timestamp;
    /**
     * commitment root (i.e app hash)
     *
     * @generated from protobuf field: ibc.core.commitment.v1.MerkleRoot root = 2;
     */
    root?: MerkleRoot;
    /**
     * @generated from protobuf field: bytes next_validators_hash = 3;
     */
    nextValidatorsHash: Uint8Array;
}
/**
 * Misbehaviour is a wrapper over two conflicting Headers
 * that implements Misbehaviour interface expected by ICS-02
 *
 * @generated from protobuf message ibc.lightclients.tendermint.v1.Misbehaviour
 */
export interface Misbehaviour {
    /**
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * @generated from protobuf field: ibc.lightclients.tendermint.v1.Header header_1 = 2;
     */
    header1?: Header;
    /**
     * @generated from protobuf field: ibc.lightclients.tendermint.v1.Header header_2 = 3;
     */
    header2?: Header;
}
/**
 * Header defines the Tendermint client consensus Header.
 * It encapsulates all the information necessary to update from a trusted
 * Tendermint ConsensusState. The inclusion of TrustedHeight and
 * TrustedValidators allows this update to process correctly, so long as the
 * ConsensusState for the TrustedHeight exists, this removes race conditions
 * among relayers The SignedHeader and ValidatorSet are the new untrusted update
 * fields for the client. The TrustedHeight is the height of a stored
 * ConsensusState on the client that will be used to verify the new untrusted
 * header. The Trusted ConsensusState must be within the unbonding period of
 * current time in order to correctly verify, and the TrustedValidators must
 * hash to TrustedConsensusState.NextValidatorsHash since that is the last
 * trusted validator set at the TrustedHeight.
 *
 * @generated from protobuf message ibc.lightclients.tendermint.v1.Header
 */
export interface Header {
    /**
     * @generated from protobuf field: tendermint.types.SignedHeader signed_header = 1;
     */
    signedHeader?: SignedHeader;
    /**
     * @generated from protobuf field: tendermint.types.ValidatorSet validator_set = 2;
     */
    validatorSet?: ValidatorSet;
    /**
     * @generated from protobuf field: ibc.core.client.v1.Height trusted_height = 3;
     */
    trustedHeight?: Height;
    /**
     * @generated from protobuf field: tendermint.types.ValidatorSet trusted_validators = 4;
     */
    trustedValidators?: ValidatorSet;
}
/**
 * Fraction defines the protobuf message type for tmmath.Fraction that only
 * supports positive values.
 *
 * @generated from protobuf message ibc.lightclients.tendermint.v1.Fraction
 */
export interface Fraction {
    /**
     * @generated from protobuf field: uint64 numerator = 1;
     */
    numerator: string;
    /**
     * @generated from protobuf field: uint64 denominator = 2;
     */
    denominator: string;
}
declare class ClientState$Type extends MessageType<ClientState> {
    constructor();
    create(value?: PartialMessage<ClientState>): ClientState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientState): ClientState;
    internalBinaryWrite(message: ClientState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.tendermint.v1.ClientState
 */
export declare const ClientState: ClientState$Type;
declare class ConsensusState$Type extends MessageType<ConsensusState> {
    constructor();
    create(value?: PartialMessage<ConsensusState>): ConsensusState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsensusState): ConsensusState;
    internalBinaryWrite(message: ConsensusState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.tendermint.v1.ConsensusState
 */
export declare const ConsensusState: ConsensusState$Type;
declare class Misbehaviour$Type extends MessageType<Misbehaviour> {
    constructor();
    create(value?: PartialMessage<Misbehaviour>): Misbehaviour;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Misbehaviour): Misbehaviour;
    internalBinaryWrite(message: Misbehaviour, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.tendermint.v1.Misbehaviour
 */
export declare const Misbehaviour: Misbehaviour$Type;
declare class Header$Type extends MessageType<Header> {
    constructor();
    create(value?: PartialMessage<Header>): Header;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header;
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.tendermint.v1.Header
 */
export declare const Header: Header$Type;
declare class Fraction$Type extends MessageType<Fraction> {
    constructor();
    create(value?: PartialMessage<Fraction>): Fraction;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Fraction): Fraction;
    internalBinaryWrite(message: Fraction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message ibc.lightclients.tendermint.v1.Fraction
 */
export declare const Fraction: Fraction$Type;
export {};
