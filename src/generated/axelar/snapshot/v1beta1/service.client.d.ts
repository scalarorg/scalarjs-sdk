// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/snapshot/v1beta1/service.proto" (package "axelar.snapshot.v1beta1", syntax proto3)
// tslint:disable
import type { ParamsResponse } from "./query";
import type { ParamsRequest } from "./query";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { DeactivateProxyResponse } from "./tx";
import type { DeactivateProxyRequest } from "./tx";
import type { RegisterProxyResponse } from "./tx";
import type { RegisterProxyRequest } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the snapshot Msg service.
 *
 * @generated from protobuf service axelar.snapshot.v1beta1.MsgService
 */
export interface IMsgServiceClient {
    /**
     * RegisterProxy defines a method for registering a proxy account that can act
     * in a validator account's stead.
     *
     * @generated from protobuf rpc: RegisterProxy(axelar.snapshot.v1beta1.RegisterProxyRequest) returns (axelar.snapshot.v1beta1.RegisterProxyResponse);
     */
    registerProxy(input: RegisterProxyRequest, options?: RpcOptions): UnaryCall<RegisterProxyRequest, RegisterProxyResponse>;
    /**
     * DeactivateProxy defines a method for deregistering a proxy account.
     *
     * @generated from protobuf rpc: DeactivateProxy(axelar.snapshot.v1beta1.DeactivateProxyRequest) returns (axelar.snapshot.v1beta1.DeactivateProxyResponse);
     */
    deactivateProxy(input: DeactivateProxyRequest, options?: RpcOptions): UnaryCall<DeactivateProxyRequest, DeactivateProxyResponse>;
}
/**
 * Msg defines the snapshot Msg service.
 *
 * @generated from protobuf service axelar.snapshot.v1beta1.MsgService
 */
export declare class MsgServiceClient implements IMsgServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * RegisterProxy defines a method for registering a proxy account that can act
     * in a validator account's stead.
     *
     * @generated from protobuf rpc: RegisterProxy(axelar.snapshot.v1beta1.RegisterProxyRequest) returns (axelar.snapshot.v1beta1.RegisterProxyResponse);
     */
    registerProxy(input: RegisterProxyRequest, options?: RpcOptions): UnaryCall<RegisterProxyRequest, RegisterProxyResponse>;
    /**
     * DeactivateProxy defines a method for deregistering a proxy account.
     *
     * @generated from protobuf rpc: DeactivateProxy(axelar.snapshot.v1beta1.DeactivateProxyRequest) returns (axelar.snapshot.v1beta1.DeactivateProxyResponse);
     */
    deactivateProxy(input: DeactivateProxyRequest, options?: RpcOptions): UnaryCall<DeactivateProxyRequest, DeactivateProxyResponse>;
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.snapshot.v1beta1.QueryService
 */
export interface IQueryServiceClient {
    /**
     * @generated from protobuf rpc: Params(axelar.snapshot.v1beta1.ParamsRequest) returns (axelar.snapshot.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.snapshot.v1beta1.QueryService
 */
export declare class QueryServiceClient implements IQueryServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: Params(axelar.snapshot.v1beta1.ParamsRequest) returns (axelar.snapshot.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
