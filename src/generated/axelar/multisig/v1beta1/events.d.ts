// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/multisig/v1beta1/events.proto" (package "axelar.multisig.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenStarted
 */
export interface KeygenStarted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
    /**
     * @generated from protobuf field: repeated bytes participants = 3;
     */
    participants: Uint8Array[];
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenCompleted
 */
export interface KeygenCompleted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenExpired
 */
export interface KeygenExpired {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.PubKeySubmitted
 */
export interface PubKeySubmitted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
    /**
     * @generated from protobuf field: bytes participant = 3;
     */
    participant: Uint8Array;
    /**
     * @generated from protobuf field: bytes pub_key = 4;
     */
    pubKey: Uint8Array;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.SigningStarted
 */
export interface SigningStarted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: uint64 sig_id = 2;
     */
    sigId: string;
    /**
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
    /**
     * @generated from protobuf field: map<string, bytes> pub_keys = 4;
     */
    pubKeys: {
        [key: string]: Uint8Array;
    };
    /**
     * @generated from protobuf field: bytes payload_hash = 5;
     */
    payloadHash: Uint8Array;
    /**
     * @generated from protobuf field: string requesting_module = 6;
     */
    requestingModule: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.SigningCompleted
 */
export interface SigningCompleted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: uint64 sig_id = 2;
     */
    sigId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.SigningExpired
 */
export interface SigningExpired {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: uint64 sig_id = 2;
     */
    sigId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.SignatureSubmitted
 */
export interface SignatureSubmitted {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: uint64 sig_id = 2;
     */
    sigId: string;
    /**
     * @generated from protobuf field: bytes participant = 3;
     */
    participant: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 4;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeyAssigned
 */
export interface KeyAssigned {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeyRotated
 */
export interface KeyRotated {
    /**
     * @generated from protobuf field: string module = 1;
     */
    module: string;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenOptOut
 */
export interface KeygenOptOut {
    /**
     * @generated from protobuf field: bytes participant = 1;
     */
    participant: Uint8Array;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenOptIn
 */
export interface KeygenOptIn {
    /**
     * @generated from protobuf field: bytes participant = 1;
     */
    participant: Uint8Array;
}
declare class KeygenStarted$Type extends MessageType<KeygenStarted> {
    constructor();
    create(value?: PartialMessage<KeygenStarted>): KeygenStarted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenStarted): KeygenStarted;
    internalBinaryWrite(message: KeygenStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenStarted
 */
export declare const KeygenStarted: KeygenStarted$Type;
declare class KeygenCompleted$Type extends MessageType<KeygenCompleted> {
    constructor();
    create(value?: PartialMessage<KeygenCompleted>): KeygenCompleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenCompleted): KeygenCompleted;
    internalBinaryWrite(message: KeygenCompleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenCompleted
 */
export declare const KeygenCompleted: KeygenCompleted$Type;
declare class KeygenExpired$Type extends MessageType<KeygenExpired> {
    constructor();
    create(value?: PartialMessage<KeygenExpired>): KeygenExpired;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenExpired): KeygenExpired;
    internalBinaryWrite(message: KeygenExpired, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenExpired
 */
export declare const KeygenExpired: KeygenExpired$Type;
declare class PubKeySubmitted$Type extends MessageType<PubKeySubmitted> {
    constructor();
    create(value?: PartialMessage<PubKeySubmitted>): PubKeySubmitted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PubKeySubmitted): PubKeySubmitted;
    internalBinaryWrite(message: PubKeySubmitted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.PubKeySubmitted
 */
export declare const PubKeySubmitted: PubKeySubmitted$Type;
declare class SigningStarted$Type extends MessageType<SigningStarted> {
    constructor();
    create(value?: PartialMessage<SigningStarted>): SigningStarted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SigningStarted): SigningStarted;
    private binaryReadMap4;
    internalBinaryWrite(message: SigningStarted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.SigningStarted
 */
export declare const SigningStarted: SigningStarted$Type;
declare class SigningCompleted$Type extends MessageType<SigningCompleted> {
    constructor();
    create(value?: PartialMessage<SigningCompleted>): SigningCompleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SigningCompleted): SigningCompleted;
    internalBinaryWrite(message: SigningCompleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.SigningCompleted
 */
export declare const SigningCompleted: SigningCompleted$Type;
declare class SigningExpired$Type extends MessageType<SigningExpired> {
    constructor();
    create(value?: PartialMessage<SigningExpired>): SigningExpired;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SigningExpired): SigningExpired;
    internalBinaryWrite(message: SigningExpired, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.SigningExpired
 */
export declare const SigningExpired: SigningExpired$Type;
declare class SignatureSubmitted$Type extends MessageType<SignatureSubmitted> {
    constructor();
    create(value?: PartialMessage<SignatureSubmitted>): SignatureSubmitted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureSubmitted): SignatureSubmitted;
    internalBinaryWrite(message: SignatureSubmitted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.SignatureSubmitted
 */
export declare const SignatureSubmitted: SignatureSubmitted$Type;
declare class KeyAssigned$Type extends MessageType<KeyAssigned> {
    constructor();
    create(value?: PartialMessage<KeyAssigned>): KeyAssigned;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyAssigned): KeyAssigned;
    internalBinaryWrite(message: KeyAssigned, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeyAssigned
 */
export declare const KeyAssigned: KeyAssigned$Type;
declare class KeyRotated$Type extends MessageType<KeyRotated> {
    constructor();
    create(value?: PartialMessage<KeyRotated>): KeyRotated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyRotated): KeyRotated;
    internalBinaryWrite(message: KeyRotated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeyRotated
 */
export declare const KeyRotated: KeyRotated$Type;
declare class KeygenOptOut$Type extends MessageType<KeygenOptOut> {
    constructor();
    create(value?: PartialMessage<KeygenOptOut>): KeygenOptOut;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptOut): KeygenOptOut;
    internalBinaryWrite(message: KeygenOptOut, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenOptOut
 */
export declare const KeygenOptOut: KeygenOptOut$Type;
declare class KeygenOptIn$Type extends MessageType<KeygenOptIn> {
    constructor();
    create(value?: PartialMessage<KeygenOptIn>): KeygenOptIn;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenOptIn): KeygenOptIn;
    internalBinaryWrite(message: KeygenOptIn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenOptIn
 */
export declare const KeygenOptIn: KeygenOptIn$Type;
export {};
