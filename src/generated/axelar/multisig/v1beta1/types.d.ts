// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/multisig/v1beta1/types.proto" (package "axelar.multisig.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { MultisigState } from "../exported/v1beta1/types";
import { KeyState } from "../exported/v1beta1/types";
import { Threshold } from "../../utils/v1beta1/threshold";
import { Snapshot } from "../../snapshot/exported/v1beta1/types";
/**
 * @generated from protobuf message axelar.multisig.v1beta1.Key
 */
export interface Key {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: axelar.snapshot.exported.v1beta1.Snapshot snapshot = 2;
     */
    snapshot?: Snapshot;
    /**
     * @generated from protobuf field: map<string, bytes> pub_keys = 3;
     */
    pubKeys: {
        [key: string]: Uint8Array;
    };
    /**
     * @generated from protobuf field: axelar.utils.v1beta1.Threshold signing_threshold = 4;
     */
    signingThreshold?: Threshold;
    /**
     * @generated from protobuf field: axelar.multisig.exported.v1beta1.KeyState state = 5;
     */
    state: KeyState;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeygenSession
 */
export interface KeygenSession {
    /**
     * @generated from protobuf field: axelar.multisig.v1beta1.Key key = 1;
     */
    key?: Key;
    /**
     * @generated from protobuf field: axelar.multisig.exported.v1beta1.MultisigState state = 2;
     */
    state: MultisigState;
    /**
     * @generated from protobuf field: axelar.utils.v1beta1.Threshold keygen_threshold = 3;
     */
    keygenThreshold?: Threshold;
    /**
     * @generated from protobuf field: int64 expires_at = 4;
     */
    expiresAt: string;
    /**
     * @generated from protobuf field: int64 completed_at = 5;
     */
    completedAt: string;
    /**
     * @generated from protobuf field: map<string, bool> is_pub_key_received = 6;
     */
    isPubKeyReceived: {
        [key: string]: boolean;
    };
    /**
     * @generated from protobuf field: int64 grace_period = 7;
     */
    gracePeriod: string;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.MultiSig
 */
export interface MultiSig {
    /**
     * @generated from protobuf field: string key_id = 1;
     */
    keyId: string;
    /**
     * @generated from protobuf field: bytes payload_hash = 2;
     */
    payloadHash: Uint8Array;
    /**
     * @generated from protobuf field: map<string, bytes> sigs = 3;
     */
    sigs: {
        [key: string]: Uint8Array;
    };
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.SigningSession
 */
export interface SigningSession {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: axelar.multisig.v1beta1.MultiSig multi_sig = 2;
     */
    multiSig?: MultiSig;
    /**
     * @generated from protobuf field: axelar.multisig.exported.v1beta1.MultisigState state = 3;
     */
    state: MultisigState;
    /**
     * @generated from protobuf field: axelar.multisig.v1beta1.Key key = 4;
     */
    key?: Key;
    /**
     * @generated from protobuf field: int64 expires_at = 5;
     */
    expiresAt: string;
    /**
     * @generated from protobuf field: int64 completed_at = 6;
     */
    completedAt: string;
    /**
     * @generated from protobuf field: int64 grace_period = 7;
     */
    gracePeriod: string;
    /**
     * @generated from protobuf field: string module = 8;
     */
    module: string;
    /**
     * @generated from protobuf field: google.protobuf.Any module_metadata = 9;
     */
    moduleMetadata?: Any;
}
/**
 * @generated from protobuf message axelar.multisig.v1beta1.KeyEpoch
 */
export interface KeyEpoch {
    /**
     * @generated from protobuf field: uint64 epoch = 1;
     */
    epoch: string;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: string key_id = 3;
     */
    keyId: string;
}
declare class Key$Type extends MessageType<Key> {
    constructor();
    create(value?: PartialMessage<Key>): Key;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Key): Key;
    private binaryReadMap3;
    internalBinaryWrite(message: Key, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.Key
 */
export declare const Key: Key$Type;
declare class KeygenSession$Type extends MessageType<KeygenSession> {
    constructor();
    create(value?: PartialMessage<KeygenSession>): KeygenSession;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenSession): KeygenSession;
    private binaryReadMap6;
    internalBinaryWrite(message: KeygenSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeygenSession
 */
export declare const KeygenSession: KeygenSession$Type;
declare class MultiSig$Type extends MessageType<MultiSig> {
    constructor();
    create(value?: PartialMessage<MultiSig>): MultiSig;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiSig): MultiSig;
    private binaryReadMap3;
    internalBinaryWrite(message: MultiSig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.MultiSig
 */
export declare const MultiSig: MultiSig$Type;
declare class SigningSession$Type extends MessageType<SigningSession> {
    constructor();
    create(value?: PartialMessage<SigningSession>): SigningSession;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SigningSession): SigningSession;
    internalBinaryWrite(message: SigningSession, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.SigningSession
 */
export declare const SigningSession: SigningSession$Type;
declare class KeyEpoch$Type extends MessageType<KeyEpoch> {
    constructor();
    create(value?: PartialMessage<KeyEpoch>): KeyEpoch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyEpoch): KeyEpoch;
    internalBinaryWrite(message: KeyEpoch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.multisig.v1beta1.KeyEpoch
 */
export declare const KeyEpoch: KeyEpoch$Type;
export {};
