// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/permission/v1beta1/service.proto" (package "axelar.permission.v1beta1", syntax proto3)
// tslint:disable
import type { ParamsResponse } from "./query";
import type { ParamsRequest } from "./query";
import type { QueryGovernanceKeyResponse } from "./query";
import type { QueryGovernanceKeyRequest } from "./query";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { UpdateGovernanceKeyResponse } from "./tx";
import type { UpdateGovernanceKeyRequest } from "./tx";
import type { DeregisterControllerResponse } from "./tx";
import type { DeregisterControllerRequest } from "./tx";
import type { RegisterControllerResponse } from "./tx";
import type { RegisterControllerRequest } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the gov Msg service.
 *
 * @generated from protobuf service axelar.permission.v1beta1.Msg
 */
export interface IMsgClient {
    /**
     * @generated from protobuf rpc: RegisterController(axelar.permission.v1beta1.RegisterControllerRequest) returns (axelar.permission.v1beta1.RegisterControllerResponse);
     */
    registerController(input: RegisterControllerRequest, options?: RpcOptions): UnaryCall<RegisterControllerRequest, RegisterControllerResponse>;
    /**
     * @generated from protobuf rpc: DeregisterController(axelar.permission.v1beta1.DeregisterControllerRequest) returns (axelar.permission.v1beta1.DeregisterControllerResponse);
     */
    deregisterController(input: DeregisterControllerRequest, options?: RpcOptions): UnaryCall<DeregisterControllerRequest, DeregisterControllerResponse>;
    /**
     * @generated from protobuf rpc: UpdateGovernanceKey(axelar.permission.v1beta1.UpdateGovernanceKeyRequest) returns (axelar.permission.v1beta1.UpdateGovernanceKeyResponse);
     */
    updateGovernanceKey(input: UpdateGovernanceKeyRequest, options?: RpcOptions): UnaryCall<UpdateGovernanceKeyRequest, UpdateGovernanceKeyResponse>;
}
/**
 * Msg defines the gov Msg service.
 *
 * @generated from protobuf service axelar.permission.v1beta1.Msg
 */
export declare class MsgClient implements IMsgClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: RegisterController(axelar.permission.v1beta1.RegisterControllerRequest) returns (axelar.permission.v1beta1.RegisterControllerResponse);
     */
    registerController(input: RegisterControllerRequest, options?: RpcOptions): UnaryCall<RegisterControllerRequest, RegisterControllerResponse>;
    /**
     * @generated from protobuf rpc: DeregisterController(axelar.permission.v1beta1.DeregisterControllerRequest) returns (axelar.permission.v1beta1.DeregisterControllerResponse);
     */
    deregisterController(input: DeregisterControllerRequest, options?: RpcOptions): UnaryCall<DeregisterControllerRequest, DeregisterControllerResponse>;
    /**
     * @generated from protobuf rpc: UpdateGovernanceKey(axelar.permission.v1beta1.UpdateGovernanceKeyRequest) returns (axelar.permission.v1beta1.UpdateGovernanceKeyResponse);
     */
    updateGovernanceKey(input: UpdateGovernanceKeyRequest, options?: RpcOptions): UnaryCall<UpdateGovernanceKeyRequest, UpdateGovernanceKeyResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.permission.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * GovernanceKey returns the multisig governance key
     *
     * @generated from protobuf rpc: GovernanceKey(axelar.permission.v1beta1.QueryGovernanceKeyRequest) returns (axelar.permission.v1beta1.QueryGovernanceKeyResponse);
     */
    governanceKey(input: QueryGovernanceKeyRequest, options?: RpcOptions): UnaryCall<QueryGovernanceKeyRequest, QueryGovernanceKeyResponse>;
    /**
     * @generated from protobuf rpc: Params(axelar.permission.v1beta1.ParamsRequest) returns (axelar.permission.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.permission.v1beta1.Query
 */
export declare class QueryClient implements IQueryClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * GovernanceKey returns the multisig governance key
     *
     * @generated from protobuf rpc: GovernanceKey(axelar.permission.v1beta1.QueryGovernanceKeyRequest) returns (axelar.permission.v1beta1.QueryGovernanceKeyResponse);
     */
    governanceKey(input: QueryGovernanceKeyRequest, options?: RpcOptions): UnaryCall<QueryGovernanceKeyRequest, QueryGovernanceKeyResponse>;
    /**
     * @generated from protobuf rpc: Params(axelar.permission.v1beta1.ParamsRequest) returns (axelar.permission.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
}
