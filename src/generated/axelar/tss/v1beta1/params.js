// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/tss/v1beta1/params.proto" (package "axelar.tss.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Threshold } from "../../utils/v1beta1/threshold";
import { KeyRequirement } from "../exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("axelar.tss.v1beta1.Params", [
            { no: 1, name: "key_requirements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeyRequirement, options: { "gogoproto.nullable": false } },
            { no: 2, name: "suspend_duration_in_blocks", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "heartbeat_period_in_blocks", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "max_missed_blocks_per_window", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 5, name: "unbonding_locking_key_rotation_count", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "external_multisig_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 7, name: "max_sign_queue_size", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 8, name: "max_simultaneous_sign_shares", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 9, name: "tss_signed_blocks_window", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.keyRequirements = [];
        message.suspendDurationInBlocks = "0";
        message.heartbeatPeriodInBlocks = "0";
        message.unbondingLockingKeyRotationCount = "0";
        message.maxSignQueueSize = "0";
        message.maxSimultaneousSignShares = "0";
        message.tssSignedBlocksWindow = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated axelar.tss.exported.v1beta1.KeyRequirement key_requirements */ 1:
                    message.keyRequirements.push(KeyRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 suspend_duration_in_blocks */ 2:
                    message.suspendDurationInBlocks = reader.int64().toString();
                    break;
                case /* int64 heartbeat_period_in_blocks */ 3:
                    message.heartbeatPeriodInBlocks = reader.int64().toString();
                    break;
                case /* axelar.utils.v1beta1.Threshold max_missed_blocks_per_window */ 4:
                    message.maxMissedBlocksPerWindow = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.maxMissedBlocksPerWindow);
                    break;
                case /* int64 unbonding_locking_key_rotation_count */ 5:
                    message.unbondingLockingKeyRotationCount = reader.int64().toString();
                    break;
                case /* axelar.utils.v1beta1.Threshold external_multisig_threshold */ 6:
                    message.externalMultisigThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.externalMultisigThreshold);
                    break;
                case /* int64 max_sign_queue_size */ 7:
                    message.maxSignQueueSize = reader.int64().toString();
                    break;
                case /* int64 max_simultaneous_sign_shares */ 8:
                    message.maxSimultaneousSignShares = reader.int64().toString();
                    break;
                case /* int64 tss_signed_blocks_window */ 9:
                    message.tssSignedBlocksWindow = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated axelar.tss.exported.v1beta1.KeyRequirement key_requirements = 1; */
        for (let i = 0; i < message.keyRequirements.length; i++)
            KeyRequirement.internalBinaryWrite(message.keyRequirements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 suspend_duration_in_blocks = 2; */
        if (message.suspendDurationInBlocks !== "0")
            writer.tag(2, WireType.Varint).int64(message.suspendDurationInBlocks);
        /* int64 heartbeat_period_in_blocks = 3; */
        if (message.heartbeatPeriodInBlocks !== "0")
            writer.tag(3, WireType.Varint).int64(message.heartbeatPeriodInBlocks);
        /* axelar.utils.v1beta1.Threshold max_missed_blocks_per_window = 4; */
        if (message.maxMissedBlocksPerWindow)
            Threshold.internalBinaryWrite(message.maxMissedBlocksPerWindow, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 unbonding_locking_key_rotation_count = 5; */
        if (message.unbondingLockingKeyRotationCount !== "0")
            writer.tag(5, WireType.Varint).int64(message.unbondingLockingKeyRotationCount);
        /* axelar.utils.v1beta1.Threshold external_multisig_threshold = 6; */
        if (message.externalMultisigThreshold)
            Threshold.internalBinaryWrite(message.externalMultisigThreshold, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 max_sign_queue_size = 7; */
        if (message.maxSignQueueSize !== "0")
            writer.tag(7, WireType.Varint).int64(message.maxSignQueueSize);
        /* int64 max_simultaneous_sign_shares = 8; */
        if (message.maxSimultaneousSignShares !== "0")
            writer.tag(8, WireType.Varint).int64(message.maxSimultaneousSignShares);
        /* int64 tss_signed_blocks_window = 9; */
        if (message.tssSignedBlocksWindow !== "0")
            writer.tag(9, WireType.Varint).int64(message.tssSignedBlocksWindow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.Params
 */
export const Params = new Params$Type();
