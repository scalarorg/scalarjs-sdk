// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/tss/v1beta1/types.proto" (package "axelar.tss.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { KeyType } from "../exported/v1beta1/types";
import { KeyRole } from "../exported/v1beta1/types";
/**
 * @generated from protobuf message axelar.tss.v1beta1.KeygenVoteData
 */
export interface KeygenVoteData {
    /**
     * @generated from protobuf field: bytes pub_key = 1;
     */
    pubKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes group_recovery_info = 2;
     */
    groupRecoveryInfo: Uint8Array;
}
/**
 * KeyInfo holds information about a key
 *
 * @generated from protobuf message axelar.tss.v1beta1.KeyInfo
 */
export interface KeyInfo {
    /**
     * @generated from protobuf field: string key_id = 1;
     */
    keyId: string;
    /**
     * @generated from protobuf field: axelar.tss.exported.v1beta1.KeyRole key_role = 2;
     */
    keyRole: KeyRole;
    /**
     * @generated from protobuf field: axelar.tss.exported.v1beta1.KeyType key_type = 3;
     */
    keyType: KeyType;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.MultisigInfo
 */
export interface MultisigInfo {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: int64 timeout = 2;
     */
    timeout: string;
    /**
     * @generated from protobuf field: int64 target_num = 3;
     */
    targetNum: string;
    /**
     * @generated from protobuf field: repeated axelar.tss.v1beta1.MultisigInfo.Info infos = 4;
     */
    infos: MultisigInfo_Info[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.MultisigInfo.Info
 */
export interface MultisigInfo_Info {
    /**
     * @generated from protobuf field: bytes participant = 1;
     */
    participant: Uint8Array;
    /**
     * @generated from protobuf field: repeated bytes data = 2;
     */
    data: Uint8Array[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.KeyRecoveryInfo
 */
export interface KeyRecoveryInfo {
    /**
     * @generated from protobuf field: string key_id = 1;
     */
    keyId: string;
    /**
     * @generated from protobuf field: bytes public = 2;
     */
    public: Uint8Array;
    /**
     * @generated from protobuf field: map<string, bytes> private = 3;
     */
    private: {
        [key: string]: Uint8Array;
    };
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.ExternalKeys
 */
export interface ExternalKeys {
    /**
     * @generated from protobuf field: string chain = 1;
     */
    chain: string;
    /**
     * @generated from protobuf field: repeated string key_ids = 2;
     */
    keyIds: string[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.ValidatorStatus
 */
export interface ValidatorStatus {
    /**
     * @generated from protobuf field: bytes validator = 1;
     */
    validator: Uint8Array;
    /**
     * @generated from protobuf field: uint64 suspended_until = 2;
     */
    suspendedUntil: string;
}
declare class KeygenVoteData$Type extends MessageType<KeygenVoteData> {
    constructor();
    create(value?: PartialMessage<KeygenVoteData>): KeygenVoteData;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeygenVoteData): KeygenVoteData;
    internalBinaryWrite(message: KeygenVoteData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.KeygenVoteData
 */
export declare const KeygenVoteData: KeygenVoteData$Type;
declare class KeyInfo$Type extends MessageType<KeyInfo> {
    constructor();
    create(value?: PartialMessage<KeyInfo>): KeyInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyInfo): KeyInfo;
    internalBinaryWrite(message: KeyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.KeyInfo
 */
export declare const KeyInfo: KeyInfo$Type;
declare class MultisigInfo$Type extends MessageType<MultisigInfo> {
    constructor();
    create(value?: PartialMessage<MultisigInfo>): MultisigInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultisigInfo): MultisigInfo;
    internalBinaryWrite(message: MultisigInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.MultisigInfo
 */
export declare const MultisigInfo: MultisigInfo$Type;
declare class MultisigInfo_Info$Type extends MessageType<MultisigInfo_Info> {
    constructor();
    create(value?: PartialMessage<MultisigInfo_Info>): MultisigInfo_Info;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultisigInfo_Info): MultisigInfo_Info;
    internalBinaryWrite(message: MultisigInfo_Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.MultisigInfo.Info
 */
export declare const MultisigInfo_Info: MultisigInfo_Info$Type;
declare class KeyRecoveryInfo$Type extends MessageType<KeyRecoveryInfo> {
    constructor();
    create(value?: PartialMessage<KeyRecoveryInfo>): KeyRecoveryInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyRecoveryInfo): KeyRecoveryInfo;
    private binaryReadMap3;
    internalBinaryWrite(message: KeyRecoveryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.KeyRecoveryInfo
 */
export declare const KeyRecoveryInfo: KeyRecoveryInfo$Type;
declare class ExternalKeys$Type extends MessageType<ExternalKeys> {
    constructor();
    create(value?: PartialMessage<ExternalKeys>): ExternalKeys;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExternalKeys): ExternalKeys;
    internalBinaryWrite(message: ExternalKeys, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ExternalKeys
 */
export declare const ExternalKeys: ExternalKeys$Type;
declare class ValidatorStatus$Type extends MessageType<ValidatorStatus> {
    constructor();
    create(value?: PartialMessage<ValidatorStatus>): ValidatorStatus;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorStatus): ValidatorStatus;
    internalBinaryWrite(message: ValidatorStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ValidatorStatus
 */
export declare const ValidatorStatus: ValidatorStatus$Type;
export {};
