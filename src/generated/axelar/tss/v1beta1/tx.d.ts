// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/tss/v1beta1/tx.proto" (package "axelar.tss.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SigKeyPair } from "../exported/v1beta1/types";
import { MessageOut_SignResult } from "../tofnd/v1beta1/tofnd";
import { MessageOut_KeygenResult } from "../tofnd/v1beta1/tofnd";
import { PollKey } from "../../vote/exported/v1beta1/types";
import { TrafficOut } from "../tofnd/v1beta1/tofnd";
import { KeyRole } from "../exported/v1beta1/types";
import { KeyInfo } from "./types";
/**
 * StartKeygenRequest indicate the start of keygen
 *
 * @generated from protobuf message axelar.tss.v1beta1.StartKeygenRequest
 */
export interface StartKeygenRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: axelar.tss.v1beta1.KeyInfo key_info = 2;
     */
    keyInfo?: KeyInfo;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.StartKeygenResponse
 */
export interface StartKeygenResponse {
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.RotateKeyRequest
 */
export interface RotateKeyRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: axelar.tss.exported.v1beta1.KeyRole key_role = 3;
     */
    keyRole: KeyRole;
    /**
     * @generated from protobuf field: string key_id = 4;
     */
    keyId: string;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.RotateKeyResponse
 */
export interface RotateKeyResponse {
}
/**
 * ProcessKeygenTrafficRequest protocol message
 *
 * @generated from protobuf message axelar.tss.v1beta1.ProcessKeygenTrafficRequest
 */
export interface ProcessKeygenTrafficRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: axelar.tss.tofnd.v1beta1.TrafficOut payload = 3;
     */
    payload?: TrafficOut;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.ProcessKeygenTrafficResponse
 */
export interface ProcessKeygenTrafficResponse {
}
/**
 * ProcessSignTrafficRequest protocol message
 *
 * @generated from protobuf message axelar.tss.v1beta1.ProcessSignTrafficRequest
 */
export interface ProcessSignTrafficRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: axelar.tss.tofnd.v1beta1.TrafficOut payload = 3;
     */
    payload?: TrafficOut;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.ProcessSignTrafficResponse
 */
export interface ProcessSignTrafficResponse {
}
/**
 * VotePubKeyRequest represents the message to vote on a public key
 *
 * @generated from protobuf message axelar.tss.v1beta1.VotePubKeyRequest
 */
export interface VotePubKeyRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: axelar.vote.exported.v1beta1.PollKey poll_key = 2;
     */
    pollKey?: PollKey;
    /**
     * @generated from protobuf field: axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult result = 3;
     */
    result?: MessageOut_KeygenResult;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.VotePubKeyResponse
 */
export interface VotePubKeyResponse {
    /**
     * @generated from protobuf field: string log = 1;
     */
    log: string;
}
/**
 * VoteSigRequest represents a message to vote for a signature
 *
 * @generated from protobuf message axelar.tss.v1beta1.VoteSigRequest
 */
export interface VoteSigRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: axelar.vote.exported.v1beta1.PollKey poll_key = 2;
     */
    pollKey?: PollKey;
    /**
     * @generated from protobuf field: axelar.tss.tofnd.v1beta1.MessageOut.SignResult result = 3;
     */
    result?: MessageOut_SignResult;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.VoteSigResponse
 */
export interface VoteSigResponse {
    /**
     * @generated from protobuf field: string log = 1;
     */
    log: string;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.HeartBeatRequest
 */
export interface HeartBeatRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: repeated string key_ids = 2;
     */
    keyIds: string[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.HeartBeatResponse
 */
export interface HeartBeatResponse {
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.RegisterExternalKeysRequest
 */
export interface RegisterExternalKeysRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string chain = 2;
     */
    chain: string;
    /**
     * @generated from protobuf field: repeated axelar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey external_keys = 3;
     */
    externalKeys: RegisterExternalKeysRequest_ExternalKey[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey
 */
export interface RegisterExternalKeysRequest_ExternalKey {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes pub_key = 2;
     */
    pubKey: Uint8Array;
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.RegisterExternalKeysResponse
 */
export interface RegisterExternalKeysResponse {
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.SubmitMultisigPubKeysRequest
 */
export interface SubmitMultisigPubKeysRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string key_id = 2;
     */
    keyId: string;
    /**
     * @generated from protobuf field: repeated axelar.tss.exported.v1beta1.SigKeyPair sig_key_pairs = 3;
     */
    sigKeyPairs: SigKeyPair[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.SubmitMultisigPubKeysResponse
 */
export interface SubmitMultisigPubKeysResponse {
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.SubmitMultisigSignaturesRequest
 */
export interface SubmitMultisigSignaturesRequest {
    /**
     * @generated from protobuf field: bytes sender = 1;
     */
    sender: Uint8Array;
    /**
     * @generated from protobuf field: string sig_id = 2;
     */
    sigId: string;
    /**
     * @generated from protobuf field: repeated bytes signatures = 3;
     */
    signatures: Uint8Array[];
}
/**
 * @generated from protobuf message axelar.tss.v1beta1.SubmitMultisigSignaturesResponse
 */
export interface SubmitMultisigSignaturesResponse {
}
declare class StartKeygenRequest$Type extends MessageType<StartKeygenRequest> {
    constructor();
    create(value?: PartialMessage<StartKeygenRequest>): StartKeygenRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartKeygenRequest): StartKeygenRequest;
    internalBinaryWrite(message: StartKeygenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.StartKeygenRequest
 */
export declare const StartKeygenRequest: StartKeygenRequest$Type;
declare class StartKeygenResponse$Type extends MessageType<StartKeygenResponse> {
    constructor();
    create(value?: PartialMessage<StartKeygenResponse>): StartKeygenResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartKeygenResponse): StartKeygenResponse;
    internalBinaryWrite(message: StartKeygenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.StartKeygenResponse
 */
export declare const StartKeygenResponse: StartKeygenResponse$Type;
declare class RotateKeyRequest$Type extends MessageType<RotateKeyRequest> {
    constructor();
    create(value?: PartialMessage<RotateKeyRequest>): RotateKeyRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RotateKeyRequest): RotateKeyRequest;
    internalBinaryWrite(message: RotateKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.RotateKeyRequest
 */
export declare const RotateKeyRequest: RotateKeyRequest$Type;
declare class RotateKeyResponse$Type extends MessageType<RotateKeyResponse> {
    constructor();
    create(value?: PartialMessage<RotateKeyResponse>): RotateKeyResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RotateKeyResponse): RotateKeyResponse;
    internalBinaryWrite(message: RotateKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.RotateKeyResponse
 */
export declare const RotateKeyResponse: RotateKeyResponse$Type;
declare class ProcessKeygenTrafficRequest$Type extends MessageType<ProcessKeygenTrafficRequest> {
    constructor();
    create(value?: PartialMessage<ProcessKeygenTrafficRequest>): ProcessKeygenTrafficRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessKeygenTrafficRequest): ProcessKeygenTrafficRequest;
    internalBinaryWrite(message: ProcessKeygenTrafficRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ProcessKeygenTrafficRequest
 */
export declare const ProcessKeygenTrafficRequest: ProcessKeygenTrafficRequest$Type;
declare class ProcessKeygenTrafficResponse$Type extends MessageType<ProcessKeygenTrafficResponse> {
    constructor();
    create(value?: PartialMessage<ProcessKeygenTrafficResponse>): ProcessKeygenTrafficResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessKeygenTrafficResponse): ProcessKeygenTrafficResponse;
    internalBinaryWrite(message: ProcessKeygenTrafficResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ProcessKeygenTrafficResponse
 */
export declare const ProcessKeygenTrafficResponse: ProcessKeygenTrafficResponse$Type;
declare class ProcessSignTrafficRequest$Type extends MessageType<ProcessSignTrafficRequest> {
    constructor();
    create(value?: PartialMessage<ProcessSignTrafficRequest>): ProcessSignTrafficRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessSignTrafficRequest): ProcessSignTrafficRequest;
    internalBinaryWrite(message: ProcessSignTrafficRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ProcessSignTrafficRequest
 */
export declare const ProcessSignTrafficRequest: ProcessSignTrafficRequest$Type;
declare class ProcessSignTrafficResponse$Type extends MessageType<ProcessSignTrafficResponse> {
    constructor();
    create(value?: PartialMessage<ProcessSignTrafficResponse>): ProcessSignTrafficResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessSignTrafficResponse): ProcessSignTrafficResponse;
    internalBinaryWrite(message: ProcessSignTrafficResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.ProcessSignTrafficResponse
 */
export declare const ProcessSignTrafficResponse: ProcessSignTrafficResponse$Type;
declare class VotePubKeyRequest$Type extends MessageType<VotePubKeyRequest> {
    constructor();
    create(value?: PartialMessage<VotePubKeyRequest>): VotePubKeyRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VotePubKeyRequest): VotePubKeyRequest;
    internalBinaryWrite(message: VotePubKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.VotePubKeyRequest
 */
export declare const VotePubKeyRequest: VotePubKeyRequest$Type;
declare class VotePubKeyResponse$Type extends MessageType<VotePubKeyResponse> {
    constructor();
    create(value?: PartialMessage<VotePubKeyResponse>): VotePubKeyResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VotePubKeyResponse): VotePubKeyResponse;
    internalBinaryWrite(message: VotePubKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.VotePubKeyResponse
 */
export declare const VotePubKeyResponse: VotePubKeyResponse$Type;
declare class VoteSigRequest$Type extends MessageType<VoteSigRequest> {
    constructor();
    create(value?: PartialMessage<VoteSigRequest>): VoteSigRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoteSigRequest): VoteSigRequest;
    internalBinaryWrite(message: VoteSigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.VoteSigRequest
 */
export declare const VoteSigRequest: VoteSigRequest$Type;
declare class VoteSigResponse$Type extends MessageType<VoteSigResponse> {
    constructor();
    create(value?: PartialMessage<VoteSigResponse>): VoteSigResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VoteSigResponse): VoteSigResponse;
    internalBinaryWrite(message: VoteSigResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.VoteSigResponse
 */
export declare const VoteSigResponse: VoteSigResponse$Type;
declare class HeartBeatRequest$Type extends MessageType<HeartBeatRequest> {
    constructor();
    create(value?: PartialMessage<HeartBeatRequest>): HeartBeatRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeartBeatRequest): HeartBeatRequest;
    internalBinaryWrite(message: HeartBeatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.HeartBeatRequest
 */
export declare const HeartBeatRequest: HeartBeatRequest$Type;
declare class HeartBeatResponse$Type extends MessageType<HeartBeatResponse> {
    constructor();
    create(value?: PartialMessage<HeartBeatResponse>): HeartBeatResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HeartBeatResponse): HeartBeatResponse;
    internalBinaryWrite(message: HeartBeatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.HeartBeatResponse
 */
export declare const HeartBeatResponse: HeartBeatResponse$Type;
declare class RegisterExternalKeysRequest$Type extends MessageType<RegisterExternalKeysRequest> {
    constructor();
    create(value?: PartialMessage<RegisterExternalKeysRequest>): RegisterExternalKeysRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterExternalKeysRequest): RegisterExternalKeysRequest;
    internalBinaryWrite(message: RegisterExternalKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.RegisterExternalKeysRequest
 */
export declare const RegisterExternalKeysRequest: RegisterExternalKeysRequest$Type;
declare class RegisterExternalKeysRequest_ExternalKey$Type extends MessageType<RegisterExternalKeysRequest_ExternalKey> {
    constructor();
    create(value?: PartialMessage<RegisterExternalKeysRequest_ExternalKey>): RegisterExternalKeysRequest_ExternalKey;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterExternalKeysRequest_ExternalKey): RegisterExternalKeysRequest_ExternalKey;
    internalBinaryWrite(message: RegisterExternalKeysRequest_ExternalKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey
 */
export declare const RegisterExternalKeysRequest_ExternalKey: RegisterExternalKeysRequest_ExternalKey$Type;
declare class RegisterExternalKeysResponse$Type extends MessageType<RegisterExternalKeysResponse> {
    constructor();
    create(value?: PartialMessage<RegisterExternalKeysResponse>): RegisterExternalKeysResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterExternalKeysResponse): RegisterExternalKeysResponse;
    internalBinaryWrite(message: RegisterExternalKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.RegisterExternalKeysResponse
 */
export declare const RegisterExternalKeysResponse: RegisterExternalKeysResponse$Type;
declare class SubmitMultisigPubKeysRequest$Type extends MessageType<SubmitMultisigPubKeysRequest> {
    constructor();
    create(value?: PartialMessage<SubmitMultisigPubKeysRequest>): SubmitMultisigPubKeysRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitMultisigPubKeysRequest): SubmitMultisigPubKeysRequest;
    internalBinaryWrite(message: SubmitMultisigPubKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.SubmitMultisigPubKeysRequest
 */
export declare const SubmitMultisigPubKeysRequest: SubmitMultisigPubKeysRequest$Type;
declare class SubmitMultisigPubKeysResponse$Type extends MessageType<SubmitMultisigPubKeysResponse> {
    constructor();
    create(value?: PartialMessage<SubmitMultisigPubKeysResponse>): SubmitMultisigPubKeysResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitMultisigPubKeysResponse): SubmitMultisigPubKeysResponse;
    internalBinaryWrite(message: SubmitMultisigPubKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.SubmitMultisigPubKeysResponse
 */
export declare const SubmitMultisigPubKeysResponse: SubmitMultisigPubKeysResponse$Type;
declare class SubmitMultisigSignaturesRequest$Type extends MessageType<SubmitMultisigSignaturesRequest> {
    constructor();
    create(value?: PartialMessage<SubmitMultisigSignaturesRequest>): SubmitMultisigSignaturesRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitMultisigSignaturesRequest): SubmitMultisigSignaturesRequest;
    internalBinaryWrite(message: SubmitMultisigSignaturesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.SubmitMultisigSignaturesRequest
 */
export declare const SubmitMultisigSignaturesRequest: SubmitMultisigSignaturesRequest$Type;
declare class SubmitMultisigSignaturesResponse$Type extends MessageType<SubmitMultisigSignaturesResponse> {
    constructor();
    create(value?: PartialMessage<SubmitMultisigSignaturesResponse>): SubmitMultisigSignaturesResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitMultisigSignaturesResponse): SubmitMultisigSignaturesResponse;
    internalBinaryWrite(message: SubmitMultisigSignaturesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.tss.v1beta1.SubmitMultisigSignaturesResponse
 */
export declare const SubmitMultisigSignaturesResponse: SubmitMultisigSignaturesResponse$Type;
export {};
