// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/vote/exported/v1beta1/types.proto" (package "axelar.vote.exported.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Snapshot } from "../../../snapshot/exported/v1beta1/types";
import { Threshold } from "../../../utils/v1beta1/threshold";
import { Any } from "../../../../google/protobuf/any";
/**
 * @generated from protobuf enum axelar.vote.exported.v1beta1.PollState
 */
export var PollState;
(function (PollState) {
    /**
     * @generated from protobuf enum value: POLL_STATE_UNSPECIFIED = 0;
     */
    PollState[PollState["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: POLL_STATE_PENDING = 1;
     */
    PollState[PollState["PENDING"] = 1] = "PENDING";
    /**
     * @generated from protobuf enum value: POLL_STATE_COMPLETED = 2;
     */
    PollState[PollState["COMPLETED"] = 2] = "COMPLETED";
    /**
     * @generated from protobuf enum value: POLL_STATE_FAILED = 3;
     */
    PollState[PollState["FAILED"] = 3] = "FAILED";
})(PollState || (PollState = {}));
// @generated message type with reflection information, may provide speed optimized methods
class PollMetadata$Type extends MessageType {
    constructor() {
        super("axelar.vote.exported.v1beta1.PollMetadata", [
            { no: 3, name: "expires_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "result", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "github.com/cosmos/codec/ProtoMarshaler" } },
            { no: 5, name: "voting_threshold", kind: "message", T: () => Threshold, options: { "gogoproto.nullable": false } },
            { no: 6, name: "state", kind: "enum", T: () => ["axelar.vote.exported.v1beta1.PollState", PollState, "POLL_STATE_"] },
            { no: 7, name: "min_voter_count", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 10, name: "reward_pool_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "grace_period", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 12, name: "completed_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 13, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "PollID", "gogoproto.customname": "ID" } },
            { no: 15, name: "snapshot", kind: "message", T: () => Snapshot, options: { "gogoproto.nullable": false } },
            { no: 16, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "module_metadata", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "github.com/cosmos/codec/ProtoMarshaler" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.expiresAt = "0";
        message.state = 0;
        message.minVoterCount = "0";
        message.rewardPoolName = "";
        message.gracePeriod = "0";
        message.completedAt = "0";
        message.id = "0";
        message.module = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 expires_at */ 3:
                    message.expiresAt = reader.int64().toString();
                    break;
                case /* google.protobuf.Any result */ 4:
                    message.result = Any.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* axelar.utils.v1beta1.Threshold voting_threshold */ 5:
                    message.votingThreshold = Threshold.internalBinaryRead(reader, reader.uint32(), options, message.votingThreshold);
                    break;
                case /* axelar.vote.exported.v1beta1.PollState state */ 6:
                    message.state = reader.int32();
                    break;
                case /* int64 min_voter_count */ 7:
                    message.minVoterCount = reader.int64().toString();
                    break;
                case /* string reward_pool_name */ 10:
                    message.rewardPoolName = reader.string();
                    break;
                case /* int64 grace_period */ 11:
                    message.gracePeriod = reader.int64().toString();
                    break;
                case /* int64 completed_at */ 12:
                    message.completedAt = reader.int64().toString();
                    break;
                case /* uint64 id */ 13:
                    message.id = reader.uint64().toString();
                    break;
                case /* axelar.snapshot.exported.v1beta1.Snapshot snapshot */ 15:
                    message.snapshot = Snapshot.internalBinaryRead(reader, reader.uint32(), options, message.snapshot);
                    break;
                case /* string module */ 16:
                    message.module = reader.string();
                    break;
                case /* google.protobuf.Any module_metadata */ 17:
                    message.moduleMetadata = Any.internalBinaryRead(reader, reader.uint32(), options, message.moduleMetadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 expires_at = 3; */
        if (message.expiresAt !== "0")
            writer.tag(3, WireType.Varint).int64(message.expiresAt);
        /* google.protobuf.Any result = 4; */
        if (message.result)
            Any.internalBinaryWrite(message.result, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* axelar.utils.v1beta1.Threshold voting_threshold = 5; */
        if (message.votingThreshold)
            Threshold.internalBinaryWrite(message.votingThreshold, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* axelar.vote.exported.v1beta1.PollState state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        /* int64 min_voter_count = 7; */
        if (message.minVoterCount !== "0")
            writer.tag(7, WireType.Varint).int64(message.minVoterCount);
        /* string reward_pool_name = 10; */
        if (message.rewardPoolName !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.rewardPoolName);
        /* int64 grace_period = 11; */
        if (message.gracePeriod !== "0")
            writer.tag(11, WireType.Varint).int64(message.gracePeriod);
        /* int64 completed_at = 12; */
        if (message.completedAt !== "0")
            writer.tag(12, WireType.Varint).int64(message.completedAt);
        /* uint64 id = 13; */
        if (message.id !== "0")
            writer.tag(13, WireType.Varint).uint64(message.id);
        /* axelar.snapshot.exported.v1beta1.Snapshot snapshot = 15; */
        if (message.snapshot)
            Snapshot.internalBinaryWrite(message.snapshot, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string module = 16; */
        if (message.module !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.module);
        /* google.protobuf.Any module_metadata = 17; */
        if (message.moduleMetadata)
            Any.internalBinaryWrite(message.moduleMetadata, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.vote.exported.v1beta1.PollMetadata
 */
export const PollMetadata = new PollMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollKey$Type extends MessageType {
    constructor() {
        super("axelar.vote.exported.v1beta1.PollKey", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.module = "";
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message axelar.vote.exported.v1beta1.PollKey
 */
export const PollKey = new PollKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollParticipants$Type extends MessageType {
    constructor() {
        super("axelar.vote.exported.v1beta1.PollParticipants", [
            { no: 1, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "PollID", "gogoproto.customname": "PollID" } },
            { no: 2, name: "participants", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pollId = "0";
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poll_id */ 1:
                    message.pollId = reader.uint64().toString();
                    break;
                case /* repeated bytes participants */ 2:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 poll_id = 1; */
        if (message.pollId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.pollId);
        /* repeated bytes participants = 2; */
        for (let i = 0; i < message.participants.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.participants[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.vote.exported.v1beta1.PollParticipants
 */
export const PollParticipants = new PollParticipants$Type();
