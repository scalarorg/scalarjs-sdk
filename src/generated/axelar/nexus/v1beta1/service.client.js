// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/nexus/v1beta1/service.proto" (package "axelar.nexus.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/nexus/v1beta1/service.proto" (package "axelar.nexus.v1beta1", syntax proto3)
// tslint:disable
import { QueryService } from "./service";
import { MsgService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the nexus Msg service.
 *
 * @generated from protobuf service axelar.nexus.v1beta1.MsgService
 */
export class MsgServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = MsgService.typeName;
        this.methods = MsgService.methods;
        this.options = MsgService.options;
    }
    /**
     * @generated from protobuf rpc: RegisterChainMaintainer(axelar.nexus.v1beta1.RegisterChainMaintainerRequest) returns (axelar.nexus.v1beta1.RegisterChainMaintainerResponse);
     */
    registerChainMaintainer(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeregisterChainMaintainer(axelar.nexus.v1beta1.DeregisterChainMaintainerRequest) returns (axelar.nexus.v1beta1.DeregisterChainMaintainerResponse);
     */
    deregisterChainMaintainer(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ActivateChain(axelar.nexus.v1beta1.ActivateChainRequest) returns (axelar.nexus.v1beta1.ActivateChainResponse);
     */
    activateChain(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeactivateChain(axelar.nexus.v1beta1.DeactivateChainRequest) returns (axelar.nexus.v1beta1.DeactivateChainResponse);
     */
    deactivateChain(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterAssetFee(axelar.nexus.v1beta1.RegisterAssetFeeRequest) returns (axelar.nexus.v1beta1.RegisterAssetFeeResponse);
     */
    registerAssetFee(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTransferRateLimit(axelar.nexus.v1beta1.SetTransferRateLimitRequest) returns (axelar.nexus.v1beta1.SetTransferRateLimitResponse);
     */
    setTransferRateLimit(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.nexus.v1beta1.QueryService
 */
export class QueryServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = QueryService.typeName;
        this.methods = QueryService.methods;
        this.options = QueryService.options;
    }
    /**
     * LatestDepositAddress queries the a deposit address by recipient
     *
     * @generated from protobuf rpc: LatestDepositAddress(axelar.nexus.v1beta1.LatestDepositAddressRequest) returns (axelar.nexus.v1beta1.LatestDepositAddressResponse);
     */
    latestDepositAddress(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TransfersForChain queries transfers by chain
     *
     * @generated from protobuf rpc: TransfersForChain(axelar.nexus.v1beta1.TransfersForChainRequest) returns (axelar.nexus.v1beta1.TransfersForChainResponse);
     */
    transfersForChain(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * FeeInfo queries the fee info by chain and asset
     *
     * @generated from protobuf rpc: FeeInfo(axelar.nexus.v1beta1.FeeInfoRequest) returns (axelar.nexus.v1beta1.FeeInfoResponse);
     */
    feeInfo(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TransferFee queries the transfer fee by the source, destination chain,
     * and amount. If amount is 0, the min fee is returned
     *
     * @generated from protobuf rpc: TransferFee(axelar.nexus.v1beta1.TransferFeeRequest) returns (axelar.nexus.v1beta1.TransferFeeResponse);
     */
    transferFee(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Chains queries the chains registered on the network
     *
     * @generated from protobuf rpc: Chains(axelar.nexus.v1beta1.ChainsRequest) returns (axelar.nexus.v1beta1.ChainsResponse);
     */
    chains(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Assets queries the assets registered for a chain
     *
     * @generated from protobuf rpc: Assets(axelar.nexus.v1beta1.AssetsRequest) returns (axelar.nexus.v1beta1.AssetsResponse);
     */
    assets(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ChainState queries the state of a registered chain on the network
     *
     * @generated from protobuf rpc: ChainState(axelar.nexus.v1beta1.ChainStateRequest) returns (axelar.nexus.v1beta1.ChainStateResponse);
     */
    chainState(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ChainsByAsset queries the chains that support an asset on the network
     *
     * @generated from protobuf rpc: ChainsByAsset(axelar.nexus.v1beta1.ChainsByAssetRequest) returns (axelar.nexus.v1beta1.ChainsByAssetResponse);
     */
    chainsByAsset(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * RecipientAddress queries the recipient address for a given deposit address
     *
     * @generated from protobuf rpc: RecipientAddress(axelar.nexus.v1beta1.RecipientAddressRequest) returns (axelar.nexus.v1beta1.RecipientAddressResponse);
     */
    recipientAddress(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ChainMaintainers queries the chain maintainers for a given chain
     *
     * @generated from protobuf rpc: ChainMaintainers(axelar.nexus.v1beta1.ChainMaintainersRequest) returns (axelar.nexus.v1beta1.ChainMaintainersResponse);
     */
    chainMaintainers(input, options) {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TransferRateLimit queries the transfer rate limit for a given chain and
     * asset. If a rate limit is not set, nil is returned.
     *
     * @generated from protobuf rpc: TransferRateLimit(axelar.nexus.v1beta1.TransferRateLimitRequest) returns (axelar.nexus.v1beta1.TransferRateLimitResponse);
     */
    transferRateLimit(input, options) {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Message(axelar.nexus.v1beta1.MessageRequest) returns (axelar.nexus.v1beta1.MessageResponse);
     */
    message(input, options) {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Params(axelar.nexus.v1beta1.ParamsRequest) returns (axelar.nexus.v1beta1.ParamsResponse);
     */
    params(input, options) {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
