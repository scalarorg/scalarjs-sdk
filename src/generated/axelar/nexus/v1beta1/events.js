// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/nexus/v1beta1/events.proto" (package "axelar.nexus.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WasmMessage } from "../exported/v1beta1/types";
import { CrossChainAddress } from "../exported/v1beta1/types";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class FeeDeducted$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.FeeDeducted", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "TransferID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "recipient_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "recipient_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 5, name: "fee", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.transferId = "0";
        message.recipientChain = "";
        message.recipientAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 transfer_id */ 1:
                    message.transferId = reader.uint64().toString();
                    break;
                case /* string recipient_chain */ 2:
                    message.recipientChain = reader.string();
                    break;
                case /* string recipient_address */ 3:
                    message.recipientAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 4:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* cosmos.base.v1beta1.Coin fee */ 5:
                    message.fee = Coin.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 transfer_id = 1; */
        if (message.transferId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.transferId);
        /* string recipient_chain = 2; */
        if (message.recipientChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientChain);
        /* string recipient_address = 3; */
        if (message.recipientAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipientAddress);
        /* cosmos.base.v1beta1.Coin amount = 4; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.v1beta1.Coin fee = 5; */
        if (message.fee)
            Coin.internalBinaryWrite(message.fee, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.FeeDeducted
 */
export const FeeDeducted = new FeeDeducted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InsufficientFee$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.InsufficientFee", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "TransferID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "recipient_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "recipient_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 5, name: "fee", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.transferId = "0";
        message.recipientChain = "";
        message.recipientAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 transfer_id */ 1:
                    message.transferId = reader.uint64().toString();
                    break;
                case /* string recipient_chain */ 2:
                    message.recipientChain = reader.string();
                    break;
                case /* string recipient_address */ 3:
                    message.recipientAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin amount */ 4:
                    message.amount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* cosmos.base.v1beta1.Coin fee */ 5:
                    message.fee = Coin.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 transfer_id = 1; */
        if (message.transferId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.transferId);
        /* string recipient_chain = 2; */
        if (message.recipientChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientChain);
        /* string recipient_address = 3; */
        if (message.recipientAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipientAddress);
        /* cosmos.base.v1beta1.Coin amount = 4; */
        if (message.amount)
            Coin.internalBinaryWrite(message.amount, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.v1beta1.Coin fee = 5; */
        if (message.fee)
            Coin.internalBinaryWrite(message.fee, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.InsufficientFee
 */
export const InsufficientFee = new InsufficientFee$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RateLimitUpdated$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.RateLimitUpdated", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "limit", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 3, name: "window", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin limit */ 2:
                    message.limit = Coin.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* google.protobuf.Duration window */ 3:
                    message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* cosmos.base.v1beta1.Coin limit = 2; */
        if (message.limit)
            Coin.internalBinaryWrite(message.limit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration window = 3; */
        if (message.window)
            Duration.internalBinaryWrite(message.window, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.RateLimitUpdated
 */
export const RateLimitUpdated = new RateLimitUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageReceived$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageReceived", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "sender", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } },
            { no: 4, name: "recipient", kind: "message", T: () => CrossChainAddress, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes payload_hash */ 2:
                    message.payloadHash = reader.bytes();
                    break;
                case /* axelar.nexus.exported.v1beta1.CrossChainAddress sender */ 3:
                    message.sender = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.sender);
                    break;
                case /* axelar.nexus.exported.v1beta1.CrossChainAddress recipient */ 4:
                    message.recipient = CrossChainAddress.internalBinaryRead(reader, reader.uint32(), options, message.recipient);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes payload_hash = 2; */
        if (message.payloadHash.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payloadHash);
        /* axelar.nexus.exported.v1beta1.CrossChainAddress sender = 3; */
        if (message.sender)
            CrossChainAddress.internalBinaryWrite(message.sender, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* axelar.nexus.exported.v1beta1.CrossChainAddress recipient = 4; */
        if (message.recipient)
            CrossChainAddress.internalBinaryWrite(message.recipient, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageReceived
 */
export const MessageReceived = new MessageReceived$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageProcessing$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageProcessing", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageProcessing
 */
export const MessageProcessing = new MessageProcessing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageExecuted$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageExecuted", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageExecuted
 */
export const MessageExecuted = new MessageExecuted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageFailed$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageFailed", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageFailed
 */
export const MessageFailed = new MessageFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WasmMessageRouted$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.WasmMessageRouted", [
            { no: 1, name: "message", kind: "message", T: () => WasmMessage, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.exported.v1beta1.WasmMessage message */ 1:
                    message.message = WasmMessage.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.exported.v1beta1.WasmMessage message = 1; */
        if (message.message)
            WasmMessage.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.WasmMessageRouted
 */
export const WasmMessageRouted = new WasmMessageRouted$Type();
