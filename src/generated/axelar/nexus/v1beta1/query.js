// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/nexus/v1beta1/query.proto" (package "axelar.nexus.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./params";
import { GeneralMessage } from "../exported/v1beta1/types";
import { Duration } from "../../../google/protobuf/duration";
import { ChainState } from "./types";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { FeeInfo } from "../exported/v1beta1/types";
import { PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { CrossChainTransfer } from "../exported/v1beta1/types";
import { PageRequest } from "../../../cosmos/base/query/v1beta1/pagination";
import { TransferState } from "../exported/v1beta1/types";
/**
 * @generated from protobuf enum axelar.nexus.v1beta1.ChainStatus
 */
export var ChainStatus;
(function (ChainStatus) {
    /**
     * @generated from protobuf enum value: CHAIN_STATUS_UNSPECIFIED = 0;
     */
    ChainStatus[ChainStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: CHAIN_STATUS_ACTIVATED = 1;
     */
    ChainStatus[ChainStatus["ACTIVATED"] = 1] = "ACTIVATED";
    /**
     * @generated from protobuf enum value: CHAIN_STATUS_DEACTIVATED = 2;
     */
    ChainStatus[ChainStatus["DEACTIVATED"] = 2] = "DEACTIVATED";
})(ChainStatus || (ChainStatus = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ChainMaintainersRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainMaintainersRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainMaintainersRequest
 */
export const ChainMaintainersRequest = new ChainMaintainersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainMaintainersResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainMaintainersResponse", [
            { no: 1, name: "maintainers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.maintainers = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes maintainers */ 1:
                    message.maintainers.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes maintainers = 1; */
        for (let i = 0; i < message.maintainers.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.maintainers[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainMaintainersResponse
 */
export const ChainMaintainersResponse = new ChainMaintainersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LatestDepositAddressRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.LatestDepositAddressRequest", [
            { no: 1, name: "recipient_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deposit_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.recipientAddr = "";
        message.recipientChain = "";
        message.depositChain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recipient_addr */ 1:
                    message.recipientAddr = reader.string();
                    break;
                case /* string recipient_chain */ 2:
                    message.recipientChain = reader.string();
                    break;
                case /* string deposit_chain */ 3:
                    message.depositChain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string recipient_addr = 1; */
        if (message.recipientAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recipientAddr);
        /* string recipient_chain = 2; */
        if (message.recipientChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientChain);
        /* string deposit_chain = 3; */
        if (message.depositChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.depositChain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.LatestDepositAddressRequest
 */
export const LatestDepositAddressRequest = new LatestDepositAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LatestDepositAddressResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.LatestDepositAddressResponse", [
            { no: 1, name: "deposit_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.depositAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string deposit_addr */ 1:
                    message.depositAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string deposit_addr = 1; */
        if (message.depositAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.depositAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.LatestDepositAddressResponse
 */
export const LatestDepositAddressResponse = new LatestDepositAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransfersForChainRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransfersForChainRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "state", kind: "enum", T: () => ["axelar.nexus.exported.v1beta1.TransferState", TransferState, "TRANSFER_STATE_"] },
            { no: 3, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* axelar.nexus.exported.v1beta1.TransferState state */ 2:
                    message.state = reader.int32();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 3:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* axelar.nexus.exported.v1beta1.TransferState state = 2; */
        if (message.state !== 0)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 3; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransfersForChainRequest
 */
export const TransfersForChainRequest = new TransfersForChainRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransfersForChainResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransfersForChainResponse", [
            { no: 1, name: "transfers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CrossChainTransfer, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.transfers = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated axelar.nexus.exported.v1beta1.CrossChainTransfer transfers */ 1:
                    message.transfers.push(CrossChainTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated axelar.nexus.exported.v1beta1.CrossChainTransfer transfers = 1; */
        for (let i = 0; i < message.transfers.length; i++)
            CrossChainTransfer.internalBinaryWrite(message.transfers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransfersForChainResponse
 */
export const TransfersForChainResponse = new TransfersForChainResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeeInfoRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.FeeInfoRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string asset */ 2:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string asset = 2; */
        if (message.asset !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.FeeInfoRequest
 */
export const FeeInfoRequest = new FeeInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeeInfoResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.FeeInfoResponse", [
            { no: 1, name: "fee_info", kind: "message", T: () => FeeInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.exported.v1beta1.FeeInfo fee_info */ 1:
                    message.feeInfo = FeeInfo.internalBinaryRead(reader, reader.uint32(), options, message.feeInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.exported.v1beta1.FeeInfo fee_info = 1; */
        if (message.feeInfo)
            FeeInfo.internalBinaryWrite(message.feeInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.FeeInfoResponse
 */
export const FeeInfoResponse = new FeeInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferFeeRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransferFeeRequest", [
            { no: 1, name: "source_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sourceChain = "";
        message.destinationChain = "";
        message.amount = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_chain */ 1:
                    message.sourceChain = reader.string();
                    break;
                case /* string destination_chain */ 2:
                    message.destinationChain = reader.string();
                    break;
                case /* string amount */ 3:
                    message.amount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string source_chain = 1; */
        if (message.sourceChain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourceChain);
        /* string destination_chain = 2; */
        if (message.destinationChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.destinationChain);
        /* string amount = 3; */
        if (message.amount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransferFeeRequest
 */
export const TransferFeeRequest = new TransferFeeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferFeeResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransferFeeResponse", [
            { no: 1, name: "fee", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.v1beta1.Coin fee */ 1:
                    message.fee = Coin.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.v1beta1.Coin fee = 1; */
        if (message.fee)
            Coin.internalBinaryWrite(message.fee, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransferFeeResponse
 */
export const TransferFeeResponse = new TransferFeeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainsRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainsRequest", [
            { no: 1, name: "status", kind: "enum", T: () => ["axelar.nexus.v1beta1.ChainStatus", ChainStatus, "CHAIN_STATUS_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.v1beta1.ChainStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.v1beta1.ChainStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainsRequest
 */
export const ChainsRequest = new ChainsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainsResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainsResponse", [
            { no: 1, name: "chains", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chains = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string chains */ 1:
                    message.chains.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string chains = 1; */
        for (let i = 0; i < message.chains.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.chains[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainsResponse
 */
export const ChainsResponse = new ChainsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetsRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.AssetsRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.AssetsRequest
 */
export const AssetsRequest = new AssetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetsResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.AssetsResponse", [
            { no: 1, name: "assets", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.assets = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string assets */ 1:
                    message.assets.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string assets = 1; */
        for (let i = 0; i < message.assets.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.assets[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.AssetsResponse
 */
export const AssetsResponse = new AssetsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainStateRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainStateRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainStateRequest
 */
export const ChainStateRequest = new ChainStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainStateResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainStateResponse", [
            { no: 1, name: "state", kind: "message", T: () => ChainState, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.v1beta1.ChainState state */ 1:
                    message.state = ChainState.internalBinaryRead(reader, reader.uint32(), options, message.state);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.v1beta1.ChainState state = 1; */
        if (message.state)
            ChainState.internalBinaryWrite(message.state, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainStateResponse
 */
export const ChainStateResponse = new ChainStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainsByAssetRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainsByAssetRequest", [
            { no: 1, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string asset */ 1:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string asset = 1; */
        if (message.asset !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainsByAssetRequest
 */
export const ChainsByAssetRequest = new ChainsByAssetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainsByAssetResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ChainsByAssetResponse", [
            { no: 1, name: "chains", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chains = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string chains */ 1:
                    message.chains.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string chains = 1; */
        for (let i = 0; i < message.chains.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.chains[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ChainsByAssetResponse
 */
export const ChainsByAssetResponse = new ChainsByAssetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecipientAddressRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.RecipientAddressRequest", [
            { no: 1, name: "deposit_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deposit_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.depositAddr = "";
        message.depositChain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string deposit_addr */ 1:
                    message.depositAddr = reader.string();
                    break;
                case /* string deposit_chain */ 2:
                    message.depositChain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string deposit_addr = 1; */
        if (message.depositAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.depositAddr);
        /* string deposit_chain = 2; */
        if (message.depositChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.depositChain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.RecipientAddressRequest
 */
export const RecipientAddressRequest = new RecipientAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecipientAddressResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.RecipientAddressResponse", [
            { no: 1, name: "recipient_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.recipientAddr = "";
        message.recipientChain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string recipient_addr */ 1:
                    message.recipientAddr = reader.string();
                    break;
                case /* string recipient_chain */ 2:
                    message.recipientChain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string recipient_addr = 1; */
        if (message.recipientAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recipientAddr);
        /* string recipient_chain = 2; */
        if (message.recipientChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientChain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.RecipientAddressResponse
 */
export const RecipientAddressResponse = new RecipientAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferRateLimitRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransferRateLimitRequest", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string asset */ 2:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string asset = 2; */
        if (message.asset !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransferRateLimitRequest
 */
export const TransferRateLimitRequest = new TransferRateLimitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferRateLimitResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransferRateLimitResponse", [
            { no: 1, name: "transfer_rate_limit", kind: "message", T: () => TransferRateLimit }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.v1beta1.TransferRateLimit transfer_rate_limit */ 1:
                    message.transferRateLimit = TransferRateLimit.internalBinaryRead(reader, reader.uint32(), options, message.transferRateLimit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.v1beta1.TransferRateLimit transfer_rate_limit = 1; */
        if (message.transferRateLimit)
            TransferRateLimit.internalBinaryWrite(message.transferRateLimit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransferRateLimitResponse
 */
export const TransferRateLimitResponse = new TransferRateLimitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferRateLimit$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.TransferRateLimit", [
            { no: 1, name: "limit", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 2, name: "window", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } },
            { no: 3, name: "incoming", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 4, name: "outgoing", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 5, name: "time_left", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } },
            { no: 6, name: "from", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 7, name: "to", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.limit = new Uint8Array(0);
        message.incoming = new Uint8Array(0);
        message.outgoing = new Uint8Array(0);
        message.from = new Uint8Array(0);
        message.to = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes limit */ 1:
                    message.limit = reader.bytes();
                    break;
                case /* google.protobuf.Duration window */ 2:
                    message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                    break;
                case /* bytes incoming = 3 [deprecated = true];*/ 3:
                    message.incoming = reader.bytes();
                    break;
                case /* bytes outgoing = 4 [deprecated = true];*/ 4:
                    message.outgoing = reader.bytes();
                    break;
                case /* google.protobuf.Duration time_left */ 5:
                    message.timeLeft = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeLeft);
                    break;
                case /* bytes from */ 6:
                    message.from = reader.bytes();
                    break;
                case /* bytes to */ 7:
                    message.to = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes limit = 1; */
        if (message.limit.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.limit);
        /* google.protobuf.Duration window = 2; */
        if (message.window)
            Duration.internalBinaryWrite(message.window, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes incoming = 3 [deprecated = true]; */
        if (message.incoming.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.incoming);
        /* bytes outgoing = 4 [deprecated = true]; */
        if (message.outgoing.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.outgoing);
        /* google.protobuf.Duration time_left = 5; */
        if (message.timeLeft)
            Duration.internalBinaryWrite(message.timeLeft, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bytes from = 6; */
        if (message.from.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.from);
        /* bytes to = 7; */
        if (message.to.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.to);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.TransferRateLimit
 */
export const TransferRateLimit = new TransferRateLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageRequest
 */
export const MessageRequest = new MessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.MessageResponse", [
            { no: 1, name: "message", kind: "message", T: () => GeneralMessage, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.exported.v1beta1.GeneralMessage message */ 1:
                    message.message = GeneralMessage.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.exported.v1beta1.GeneralMessage message = 1; */
        if (message.message)
            GeneralMessage.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageResponse
 */
export const MessageResponse = new MessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsRequest$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ParamsRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ParamsRequest
 */
export const ParamsRequest = new ParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsResponse$Type extends MessageType {
    constructor() {
        super("axelar.nexus.v1beta1.ParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.nexus.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.nexus.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.ParamsResponse
 */
export const ParamsResponse = new ParamsResponse$Type();
