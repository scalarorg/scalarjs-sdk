// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/nexus/v1beta1/events.proto" (package "axelar.nexus.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WasmMessage } from "../exported/v1beta1/types";
import { CrossChainAddress } from "../exported/v1beta1/types";
import { Duration } from "../../../google/protobuf/duration";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message axelar.nexus.v1beta1.FeeDeducted
 */
export interface FeeDeducted {
    /**
     * @generated from protobuf field: uint64 transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string recipient_chain = 2;
     */
    recipientChain: string;
    /**
     * @generated from protobuf field: string recipient_address = 3;
     */
    recipientAddress: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 4;
     */
    amount?: Coin;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin fee = 5;
     */
    fee?: Coin;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.InsufficientFee
 */
export interface InsufficientFee {
    /**
     * @generated from protobuf field: uint64 transfer_id = 1;
     */
    transferId: string;
    /**
     * @generated from protobuf field: string recipient_chain = 2;
     */
    recipientChain: string;
    /**
     * @generated from protobuf field: string recipient_address = 3;
     */
    recipientAddress: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin amount = 4;
     */
    amount?: Coin;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin fee = 5;
     */
    fee?: Coin;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.RateLimitUpdated
 */
export interface RateLimitUpdated {
    /**
     * @generated from protobuf field: string chain = 1;
     */
    chain: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin limit = 2;
     */
    limit?: Coin;
    /**
     * @generated from protobuf field: google.protobuf.Duration window = 3;
     */
    window?: Duration;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.MessageReceived
 */
export interface MessageReceived {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bytes payload_hash = 2;
     */
    payloadHash: Uint8Array;
    /**
     * @generated from protobuf field: axelar.nexus.exported.v1beta1.CrossChainAddress sender = 3;
     */
    sender?: CrossChainAddress;
    /**
     * @generated from protobuf field: axelar.nexus.exported.v1beta1.CrossChainAddress recipient = 4;
     */
    recipient?: CrossChainAddress;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.MessageProcessing
 */
export interface MessageProcessing {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.MessageExecuted
 */
export interface MessageExecuted {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.MessageFailed
 */
export interface MessageFailed {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message axelar.nexus.v1beta1.WasmMessageRouted
 */
export interface WasmMessageRouted {
    /**
     * @generated from protobuf field: axelar.nexus.exported.v1beta1.WasmMessage message = 1;
     */
    message?: WasmMessage;
}
declare class FeeDeducted$Type extends MessageType<FeeDeducted> {
    constructor();
    create(value?: PartialMessage<FeeDeducted>): FeeDeducted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeeDeducted): FeeDeducted;
    internalBinaryWrite(message: FeeDeducted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.FeeDeducted
 */
export declare const FeeDeducted: FeeDeducted$Type;
declare class InsufficientFee$Type extends MessageType<InsufficientFee> {
    constructor();
    create(value?: PartialMessage<InsufficientFee>): InsufficientFee;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InsufficientFee): InsufficientFee;
    internalBinaryWrite(message: InsufficientFee, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.InsufficientFee
 */
export declare const InsufficientFee: InsufficientFee$Type;
declare class RateLimitUpdated$Type extends MessageType<RateLimitUpdated> {
    constructor();
    create(value?: PartialMessage<RateLimitUpdated>): RateLimitUpdated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RateLimitUpdated): RateLimitUpdated;
    internalBinaryWrite(message: RateLimitUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.RateLimitUpdated
 */
export declare const RateLimitUpdated: RateLimitUpdated$Type;
declare class MessageReceived$Type extends MessageType<MessageReceived> {
    constructor();
    create(value?: PartialMessage<MessageReceived>): MessageReceived;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageReceived): MessageReceived;
    internalBinaryWrite(message: MessageReceived, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageReceived
 */
export declare const MessageReceived: MessageReceived$Type;
declare class MessageProcessing$Type extends MessageType<MessageProcessing> {
    constructor();
    create(value?: PartialMessage<MessageProcessing>): MessageProcessing;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageProcessing): MessageProcessing;
    internalBinaryWrite(message: MessageProcessing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageProcessing
 */
export declare const MessageProcessing: MessageProcessing$Type;
declare class MessageExecuted$Type extends MessageType<MessageExecuted> {
    constructor();
    create(value?: PartialMessage<MessageExecuted>): MessageExecuted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageExecuted): MessageExecuted;
    internalBinaryWrite(message: MessageExecuted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageExecuted
 */
export declare const MessageExecuted: MessageExecuted$Type;
declare class MessageFailed$Type extends MessageType<MessageFailed> {
    constructor();
    create(value?: PartialMessage<MessageFailed>): MessageFailed;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageFailed): MessageFailed;
    internalBinaryWrite(message: MessageFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.MessageFailed
 */
export declare const MessageFailed: MessageFailed$Type;
declare class WasmMessageRouted$Type extends MessageType<WasmMessageRouted> {
    constructor();
    create(value?: PartialMessage<WasmMessageRouted>): WasmMessageRouted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WasmMessageRouted): WasmMessageRouted;
    internalBinaryWrite(message: WasmMessageRouted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.nexus.v1beta1.WasmMessageRouted
 */
export declare const WasmMessageRouted: WasmMessageRouted$Type;
export {};
