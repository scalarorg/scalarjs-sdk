// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/evm/v1beta1/types.proto" (package "axelar.evm.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
/**
 * @generated from protobuf enum axelar.evm.v1beta1.Event.Status
 */
export var Event_Status;
(function (Event_Status) {
    /**
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    Event_Status[Event_Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_CONFIRMED = 1;
     */
    Event_Status[Event_Status["CONFIRMED"] = 1] = "CONFIRMED";
    /**
     * @generated from protobuf enum value: STATUS_COMPLETED = 2;
     */
    Event_Status[Event_Status["COMPLETED"] = 2] = "COMPLETED";
    /**
     * @generated from protobuf enum value: STATUS_FAILED = 3;
     */
    Event_Status[Event_Status["FAILED"] = 3] = "FAILED";
})(Event_Status || (Event_Status = {}));
/**
 * @generated from protobuf enum axelar.evm.v1beta1.Status
 */
export var Status;
(function (Status) {
    /**
     * these enum values are used for bitwise operations, therefore they need to
     * be powers of 2
     *
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    Status[Status["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: STATUS_INITIALIZED = 1;
     */
    Status[Status["INITIALIZED"] = 1] = "INITIALIZED";
    /**
     * @generated from protobuf enum value: STATUS_PENDING = 2;
     */
    Status[Status["PENDING"] = 2] = "PENDING";
    /**
     * @generated from protobuf enum value: STATUS_CONFIRMED = 4;
     */
    Status[Status["CONFIRMED"] = 4] = "CONFIRMED";
})(Status || (Status = {}));
/**
 * @generated from protobuf enum axelar.evm.v1beta1.CommandType
 */
export var CommandType;
(function (CommandType) {
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_UNSPECIFIED = 0;
     */
    CommandType[CommandType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_MINT_TOKEN = 1;
     */
    CommandType[CommandType["MINT_TOKEN"] = 1] = "MINT_TOKEN";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_DEPLOY_TOKEN = 2;
     */
    CommandType[CommandType["DEPLOY_TOKEN"] = 2] = "DEPLOY_TOKEN";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_BURN_TOKEN = 3;
     */
    CommandType[CommandType["BURN_TOKEN"] = 3] = "BURN_TOKEN";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_TRANSFER_OPERATORSHIP = 4;
     */
    CommandType[CommandType["TRANSFER_OPERATORSHIP"] = 4] = "TRANSFER_OPERATORSHIP";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT = 5;
     */
    CommandType[CommandType["APPROVE_CONTRACT_CALL_WITH_MINT"] = 5] = "APPROVE_CONTRACT_CALL_WITH_MINT";
    /**
     * @generated from protobuf enum value: COMMAND_TYPE_APPROVE_CONTRACT_CALL = 6;
     */
    CommandType[CommandType["APPROVE_CONTRACT_CALL"] = 6] = "APPROVE_CONTRACT_CALL";
})(CommandType || (CommandType = {}));
/**
 * @generated from protobuf enum axelar.evm.v1beta1.BatchedCommandsStatus
 */
export var BatchedCommandsStatus;
(function (BatchedCommandsStatus) {
    /**
     * @generated from protobuf enum value: BATCHED_COMMANDS_STATUS_UNSPECIFIED = 0;
     */
    BatchedCommandsStatus[BatchedCommandsStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: BATCHED_COMMANDS_STATUS_SIGNING = 1;
     */
    BatchedCommandsStatus[BatchedCommandsStatus["SIGNING"] = 1] = "SIGNING";
    /**
     * @generated from protobuf enum value: BATCHED_COMMANDS_STATUS_ABORTED = 2;
     */
    BatchedCommandsStatus[BatchedCommandsStatus["ABORTED"] = 2] = "ABORTED";
    /**
     * @generated from protobuf enum value: BATCHED_COMMANDS_STATUS_SIGNED = 3;
     */
    BatchedCommandsStatus[BatchedCommandsStatus["SIGNED"] = 3] = "SIGNED";
})(BatchedCommandsStatus || (BatchedCommandsStatus = {}));
/**
 * @generated from protobuf enum axelar.evm.v1beta1.SigType
 */
export var SigType;
(function (SigType) {
    /**
     * @generated from protobuf enum value: SIG_TYPE_UNSPECIFIED = 0;
     */
    SigType[SigType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: SIG_TYPE_TX = 1;
     */
    SigType[SigType["TX"] = 1] = "TX";
    /**
     * @generated from protobuf enum value: SIG_TYPE_COMMAND = 2;
     */
    SigType[SigType["COMMAND"] = 2] = "COMMAND";
})(SigType || (SigType = {}));
/**
 * @generated from protobuf enum axelar.evm.v1beta1.DepositStatus
 */
export var DepositStatus;
(function (DepositStatus) {
    /**
     * @generated from protobuf enum value: DEPOSIT_STATUS_UNSPECIFIED = 0;
     */
    DepositStatus[DepositStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * @generated from protobuf enum value: DEPOSIT_STATUS_PENDING = 1;
     */
    DepositStatus[DepositStatus["PENDING"] = 1] = "PENDING";
    /**
     * @generated from protobuf enum value: DEPOSIT_STATUS_CONFIRMED = 2;
     */
    DepositStatus[DepositStatus["CONFIRMED"] = 2] = "CONFIRMED";
    /**
     * @generated from protobuf enum value: DEPOSIT_STATUS_BURNED = 3;
     */
    DepositStatus[DepositStatus["BURNED"] = 3] = "BURNED";
})(DepositStatus || (DepositStatus = {}));
// @generated message type with reflection information, may provide speed optimized methods
class VoteEvents$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.VoteEvents", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Event, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.events = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* repeated axelar.evm.v1beta1.Event events */ 2:
                    message.events.push(Event.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* repeated axelar.evm.v1beta1.Event events = 2; */
        for (let i = 0; i < message.events.length; i++)
            Event.internalBinaryWrite(message.events[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.VoteEvents
 */
export const VoteEvents = new VoteEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.Event", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 3, name: "index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["axelar.evm.v1beta1.Event.Status", Event_Status, "STATUS_"] },
            { no: 5, name: "token_sent", kind: "message", oneof: "event", T: () => EventTokenSent },
            { no: 6, name: "contract_call", kind: "message", oneof: "event", T: () => EventContractCall },
            { no: 7, name: "contract_call_with_token", kind: "message", oneof: "event", T: () => EventContractCallWithToken },
            { no: 8, name: "transfer", kind: "message", oneof: "event", T: () => EventTransfer },
            { no: 9, name: "token_deployed", kind: "message", oneof: "event", T: () => EventTokenDeployed },
            { no: 10, name: "multisig_ownership_transferred", kind: "message", oneof: "event", T: () => EventMultisigOwnershipTransferred },
            { no: 11, name: "multisig_operatorship_transferred", kind: "message", oneof: "event", T: () => EventMultisigOperatorshipTransferred }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.txId = new Uint8Array(0);
        message.index = "0";
        message.status = 0;
        message.event = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* bytes tx_id */ 2:
                    message.txId = reader.bytes();
                    break;
                case /* uint64 index */ 3:
                    message.index = reader.uint64().toString();
                    break;
                case /* axelar.evm.v1beta1.Event.Status status */ 4:
                    message.status = reader.int32();
                    break;
                case /* axelar.evm.v1beta1.EventTokenSent token_sent */ 5:
                    message.event = {
                        oneofKind: "tokenSent",
                        tokenSent: EventTokenSent.internalBinaryRead(reader, reader.uint32(), options, message.event.tokenSent)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventContractCall contract_call */ 6:
                    message.event = {
                        oneofKind: "contractCall",
                        contractCall: EventContractCall.internalBinaryRead(reader, reader.uint32(), options, message.event.contractCall)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventContractCallWithToken contract_call_with_token */ 7:
                    message.event = {
                        oneofKind: "contractCallWithToken",
                        contractCallWithToken: EventContractCallWithToken.internalBinaryRead(reader, reader.uint32(), options, message.event.contractCallWithToken)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventTransfer transfer */ 8:
                    message.event = {
                        oneofKind: "transfer",
                        transfer: EventTransfer.internalBinaryRead(reader, reader.uint32(), options, message.event.transfer)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventTokenDeployed token_deployed */ 9:
                    message.event = {
                        oneofKind: "tokenDeployed",
                        tokenDeployed: EventTokenDeployed.internalBinaryRead(reader, reader.uint32(), options, message.event.tokenDeployed)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventMultisigOwnershipTransferred multisig_ownership_transferred = 10 [deprecated = true];*/ 10:
                    message.event = {
                        oneofKind: "multisigOwnershipTransferred",
                        multisigOwnershipTransferred: EventMultisigOwnershipTransferred.internalBinaryRead(reader, reader.uint32(), options, message.event.multisigOwnershipTransferred)
                    };
                    break;
                case /* axelar.evm.v1beta1.EventMultisigOperatorshipTransferred multisig_operatorship_transferred */ 11:
                    message.event = {
                        oneofKind: "multisigOperatorshipTransferred",
                        multisigOperatorshipTransferred: EventMultisigOperatorshipTransferred.internalBinaryRead(reader, reader.uint32(), options, message.event.multisigOperatorshipTransferred)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* bytes tx_id = 2; */
        if (message.txId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.txId);
        /* uint64 index = 3; */
        if (message.index !== "0")
            writer.tag(3, WireType.Varint).uint64(message.index);
        /* axelar.evm.v1beta1.Event.Status status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* axelar.evm.v1beta1.EventTokenSent token_sent = 5; */
        if (message.event.oneofKind === "tokenSent")
            EventTokenSent.internalBinaryWrite(message.event.tokenSent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventContractCall contract_call = 6; */
        if (message.event.oneofKind === "contractCall")
            EventContractCall.internalBinaryWrite(message.event.contractCall, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventContractCallWithToken contract_call_with_token = 7; */
        if (message.event.oneofKind === "contractCallWithToken")
            EventContractCallWithToken.internalBinaryWrite(message.event.contractCallWithToken, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventTransfer transfer = 8; */
        if (message.event.oneofKind === "transfer")
            EventTransfer.internalBinaryWrite(message.event.transfer, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventTokenDeployed token_deployed = 9; */
        if (message.event.oneofKind === "tokenDeployed")
            EventTokenDeployed.internalBinaryWrite(message.event.tokenDeployed, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventMultisigOwnershipTransferred multisig_ownership_transferred = 10 [deprecated = true]; */
        if (message.event.oneofKind === "multisigOwnershipTransferred")
            EventMultisigOwnershipTransferred.internalBinaryWrite(message.event.multisigOwnershipTransferred, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* axelar.evm.v1beta1.EventMultisigOperatorshipTransferred multisig_operatorship_transferred = 11; */
        if (message.event.oneofKind === "multisigOperatorshipTransferred")
            EventMultisigOperatorshipTransferred.internalBinaryWrite(message.event.multisigOperatorshipTransferred, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventTokenSent$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventTokenSent", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "destination_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.destinationChain = "";
        message.destinationAddress = "";
        message.symbol = "";
        message.amount = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string destination_chain */ 2:
                    message.destinationChain = reader.string();
                    break;
                case /* string destination_address */ 3:
                    message.destinationAddress = reader.string();
                    break;
                case /* string symbol */ 4:
                    message.symbol = reader.string();
                    break;
                case /* bytes amount */ 5:
                    message.amount = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string destination_chain = 2; */
        if (message.destinationChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.destinationChain);
        /* string destination_address = 3; */
        if (message.destinationAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.destinationAddress);
        /* string symbol = 4; */
        if (message.symbol !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.symbol);
        /* bytes amount = 5; */
        if (message.amount.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventTokenSent
 */
export const EventTokenSent = new EventTokenSent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventContractCall$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventContractCall", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.destinationChain = "";
        message.contractAddress = "";
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string destination_chain */ 2:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 3:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload_hash */ 4:
                    message.payloadHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string destination_chain = 2; */
        if (message.destinationChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 3; */
        if (message.contractAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload_hash = 4; */
        if (message.payloadHash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.payloadHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventContractCall
 */
export const EventContractCall = new EventContractCall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventContractCallWithToken$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventContractCallWithToken", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } },
            { no: 5, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.destinationChain = "";
        message.contractAddress = "";
        message.payloadHash = new Uint8Array(0);
        message.symbol = "";
        message.amount = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string destination_chain */ 2:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 3:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload_hash */ 4:
                    message.payloadHash = reader.bytes();
                    break;
                case /* string symbol */ 5:
                    message.symbol = reader.string();
                    break;
                case /* bytes amount */ 6:
                    message.amount = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string destination_chain = 2; */
        if (message.destinationChain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 3; */
        if (message.contractAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload_hash = 4; */
        if (message.payloadHash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.payloadHash);
        /* string symbol = 5; */
        if (message.symbol !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.symbol);
        /* bytes amount = 6; */
        if (message.amount.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventContractCallWithToken
 */
export const EventContractCallWithToken = new EventContractCallWithToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventTransfer$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventTransfer", [
            { no: 1, name: "to", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.to = new Uint8Array(0);
        message.amount = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes to */ 1:
                    message.to = reader.bytes();
                    break;
                case /* bytes amount */ 2:
                    message.amount = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes to = 1; */
        if (message.to.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.to);
        /* bytes amount = 2; */
        if (message.amount.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventTransfer
 */
export const EventTransfer = new EventTransfer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventTokenDeployed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventTokenDeployed", [
            { no: 1, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "token_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.symbol = "";
        message.tokenAddress = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string symbol */ 1:
                    message.symbol = reader.string();
                    break;
                case /* bytes token_address */ 2:
                    message.tokenAddress = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string symbol = 1; */
        if (message.symbol !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.symbol);
        /* bytes token_address = 2; */
        if (message.tokenAddress.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.tokenAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventTokenDeployed
 */
export const EventTokenDeployed = new EventTokenDeployed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMultisigOwnershipTransferred$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventMultisigOwnershipTransferred", [
            { no: 1, name: "pre_owners", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "prev_threshold", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } },
            { no: 3, name: "new_owners", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "new_threshold", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.preOwners = [];
        message.prevThreshold = new Uint8Array(0);
        message.newOwners = [];
        message.newThreshold = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes pre_owners */ 1:
                    message.preOwners.push(reader.bytes());
                    break;
                case /* bytes prev_threshold */ 2:
                    message.prevThreshold = reader.bytes();
                    break;
                case /* repeated bytes new_owners */ 3:
                    message.newOwners.push(reader.bytes());
                    break;
                case /* bytes new_threshold */ 4:
                    message.newThreshold = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes pre_owners = 1; */
        for (let i = 0; i < message.preOwners.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.preOwners[i]);
        /* bytes prev_threshold = 2; */
        if (message.prevThreshold.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.prevThreshold);
        /* repeated bytes new_owners = 3; */
        for (let i = 0; i < message.newOwners.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.newOwners[i]);
        /* bytes new_threshold = 4; */
        if (message.newThreshold.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.newThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventMultisigOwnershipTransferred
 */
export const EventMultisigOwnershipTransferred = new EventMultisigOwnershipTransferred$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMultisigOperatorshipTransferred$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EventMultisigOperatorshipTransferred", [
            { no: 3, name: "new_operators", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "new_threshold", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } },
            { no: 5, name: "new_weights", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.newOperators = [];
        message.newThreshold = new Uint8Array(0);
        message.newWeights = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes new_operators */ 3:
                    message.newOperators.push(reader.bytes());
                    break;
                case /* bytes new_threshold */ 4:
                    message.newThreshold = reader.bytes();
                    break;
                case /* repeated bytes new_weights */ 5:
                    message.newWeights.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes new_operators = 3; */
        for (let i = 0; i < message.newOperators.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.newOperators[i]);
        /* bytes new_threshold = 4; */
        if (message.newThreshold.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.newThreshold);
        /* repeated bytes new_weights = 5; */
        for (let i = 0; i < message.newWeights.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.newWeights[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EventMultisigOperatorshipTransferred
 */
export const EventMultisigOperatorshipTransferred = new EventMultisigOperatorshipTransferred$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NetworkInfo$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.NetworkInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.id = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bytes id */ 2:
                    message.id = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bytes id = 2; */
        if (message.id.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.NetworkInfo
 */
export const NetworkInfo = new NetworkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BurnerInfo$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.BurnerInfo", [
            { no: 1, name: "burner_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 2, name: "token_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 3, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "salt", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.burnerAddress = new Uint8Array(0);
        message.tokenAddress = new Uint8Array(0);
        message.destinationChain = "";
        message.symbol = "";
        message.asset = "";
        message.salt = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes burner_address */ 1:
                    message.burnerAddress = reader.bytes();
                    break;
                case /* bytes token_address */ 2:
                    message.tokenAddress = reader.bytes();
                    break;
                case /* string destination_chain */ 3:
                    message.destinationChain = reader.string();
                    break;
                case /* string symbol */ 4:
                    message.symbol = reader.string();
                    break;
                case /* string asset */ 5:
                    message.asset = reader.string();
                    break;
                case /* bytes salt */ 6:
                    message.salt = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes burner_address = 1; */
        if (message.burnerAddress.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.burnerAddress);
        /* bytes token_address = 2; */
        if (message.tokenAddress.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.tokenAddress);
        /* string destination_chain = 3; */
        if (message.destinationChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.destinationChain);
        /* string symbol = 4; */
        if (message.symbol !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.symbol);
        /* string asset = 5; */
        if (message.asset !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.asset);
        /* bytes salt = 6; */
        if (message.salt.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.salt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.BurnerInfo
 */
export const BurnerInfo = new BurnerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ERC20Deposit$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ERC20Deposit", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "amount", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } },
            { no: 3, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "burner_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 6, name: "log_index", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.amount = new Uint8Array(0);
        message.asset = "";
        message.destinationChain = "";
        message.burnerAddress = new Uint8Array(0);
        message.logIndex = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* bytes amount */ 2:
                    message.amount = reader.bytes();
                    break;
                case /* string asset */ 3:
                    message.asset = reader.string();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* bytes burner_address */ 5:
                    message.burnerAddress = reader.bytes();
                    break;
                case /* uint64 log_index */ 6:
                    message.logIndex = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* bytes amount = 2; */
        if (message.amount.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.amount);
        /* string asset = 3; */
        if (message.asset !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.asset);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* bytes burner_address = 5; */
        if (message.burnerAddress.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.burnerAddress);
        /* uint64 log_index = 6; */
        if (message.logIndex !== "0")
            writer.tag(6, WireType.Varint).uint64(message.logIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ERC20Deposit
 */
export const ERC20Deposit = new ERC20Deposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ERC20TokenMetadata$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ERC20TokenMetadata", [
            { no: 1, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chain_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.customname": "ChainID" } },
            { no: 3, name: "details", kind: "message", T: () => TokenDetails, options: { "gogoproto.nullable": false } },
            { no: 4, name: "token_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 5, name: "tx_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } },
            { no: 7, name: "status", kind: "enum", T: () => ["axelar.evm.v1beta1.Status", Status, "STATUS_"] },
            { no: 8, name: "is_external", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "burner_code", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.asset = "";
        message.chainId = new Uint8Array(0);
        message.tokenAddress = "";
        message.txHash = "";
        message.status = 0;
        message.isExternal = false;
        message.burnerCode = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string asset */ 1:
                    message.asset = reader.string();
                    break;
                case /* bytes chain_id */ 2:
                    message.chainId = reader.bytes();
                    break;
                case /* axelar.evm.v1beta1.TokenDetails details */ 3:
                    message.details = TokenDetails.internalBinaryRead(reader, reader.uint32(), options, message.details);
                    break;
                case /* string token_address */ 4:
                    message.tokenAddress = reader.string();
                    break;
                case /* string tx_hash */ 5:
                    message.txHash = reader.string();
                    break;
                case /* axelar.evm.v1beta1.Status status */ 7:
                    message.status = reader.int32();
                    break;
                case /* bool is_external */ 8:
                    message.isExternal = reader.bool();
                    break;
                case /* bytes burner_code */ 9:
                    message.burnerCode = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string asset = 1; */
        if (message.asset !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.asset);
        /* bytes chain_id = 2; */
        if (message.chainId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.chainId);
        /* axelar.evm.v1beta1.TokenDetails details = 3; */
        if (message.details)
            TokenDetails.internalBinaryWrite(message.details, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string token_address = 4; */
        if (message.tokenAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenAddress);
        /* string tx_hash = 5; */
        if (message.txHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.txHash);
        /* axelar.evm.v1beta1.Status status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        /* bool is_external = 8; */
        if (message.isExternal !== false)
            writer.tag(8, WireType.Varint).bool(message.isExternal);
        /* bytes burner_code = 9; */
        if (message.burnerCode.length)
            writer.tag(9, WireType.LengthDelimited).bytes(message.burnerCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ERC20TokenMetadata
 */
export const ERC20TokenMetadata = new ERC20TokenMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionMetadata$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.TransactionMetadata", [
            { no: 1, name: "raw_tx", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "RawTX" } },
            { no: 2, name: "pub_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rawTx = new Uint8Array(0);
        message.pubKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes raw_tx */ 1:
                    message.rawTx = reader.bytes();
                    break;
                case /* bytes pub_key */ 2:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes raw_tx = 1; */
        if (message.rawTx.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.rawTx);
        /* bytes pub_key = 2; */
        if (message.pubKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.TransactionMetadata
 */
export const TransactionMetadata = new TransactionMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Command$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.Command", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "ID" } },
            { no: 2, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "params", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" } },
            { no: 5, name: "max_gas_cost", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "type", kind: "enum", T: () => ["axelar.evm.v1beta1.CommandType", CommandType, "COMMAND_TYPE_"] }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = new Uint8Array(0);
        message.command = "";
        message.params = new Uint8Array(0);
        message.keyId = "";
        message.maxGasCost = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* string command = 2 [deprecated = true];*/ 2:
                    message.command = reader.string();
                    break;
                case /* bytes params */ 3:
                    message.params = reader.bytes();
                    break;
                case /* string key_id */ 4:
                    message.keyId = reader.string();
                    break;
                case /* uint32 max_gas_cost */ 5:
                    message.maxGasCost = reader.uint32();
                    break;
                case /* axelar.evm.v1beta1.CommandType type */ 6:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* string command = 2 [deprecated = true]; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        /* bytes params = 3; */
        if (message.params.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.params);
        /* string key_id = 4; */
        if (message.keyId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.keyId);
        /* uint32 max_gas_cost = 5; */
        if (message.maxGasCost !== 0)
            writer.tag(5, WireType.Varint).uint32(message.maxGasCost);
        /* axelar.evm.v1beta1.CommandType type = 6; */
        if (message.type !== 0)
            writer.tag(6, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.Command
 */
export const Command = new Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandBatchMetadata$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.CommandBatchMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "ID" } },
            { no: 2, name: "command_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "CommandIDs" } },
            { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "sig_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } },
            { no: 5, name: "status", kind: "enum", T: () => ["axelar.evm.v1beta1.BatchedCommandsStatus", BatchedCommandsStatus, "BATCHED_COMMANDS_STATUS_"] },
            { no: 6, name: "key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "KeyID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" } },
            { no: 7, name: "prev_batched_commands_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "PrevBatchedCommandsID" } },
            { no: 8, name: "signature", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "github.com/cosmos/codec/ProtoMarshaler" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = new Uint8Array(0);
        message.commandIds = [];
        message.data = new Uint8Array(0);
        message.sigHash = new Uint8Array(0);
        message.status = 0;
        message.keyId = "";
        message.prevBatchedCommandsId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* repeated bytes command_ids */ 2:
                    message.commandIds.push(reader.bytes());
                    break;
                case /* bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                case /* bytes sig_hash */ 4:
                    message.sigHash = reader.bytes();
                    break;
                case /* axelar.evm.v1beta1.BatchedCommandsStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* string key_id */ 6:
                    message.keyId = reader.string();
                    break;
                case /* bytes prev_batched_commands_id */ 7:
                    message.prevBatchedCommandsId = reader.bytes();
                    break;
                case /* google.protobuf.Any signature */ 8:
                    message.signature = Any.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* repeated bytes command_ids = 2; */
        for (let i = 0; i < message.commandIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.commandIds[i]);
        /* bytes data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        /* bytes sig_hash = 4; */
        if (message.sigHash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.sigHash);
        /* axelar.evm.v1beta1.BatchedCommandsStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* string key_id = 6; */
        if (message.keyId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.keyId);
        /* bytes prev_batched_commands_id = 7; */
        if (message.prevBatchedCommandsId.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.prevBatchedCommandsId);
        /* google.protobuf.Any signature = 8; */
        if (message.signature)
            Any.internalBinaryWrite(message.signature, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.CommandBatchMetadata
 */
export const CommandBatchMetadata = new CommandBatchMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigMetadata$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.SigMetadata", [
            { no: 1, name: "type", kind: "enum", T: () => ["axelar.evm.v1beta1.SigType", SigType, "SIG_TYPE_"] },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "command_batch_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "CommandBatchID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.type = 0;
        message.chain = "";
        message.commandBatchId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.evm.v1beta1.SigType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes command_batch_id */ 3:
                    message.commandBatchId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.evm.v1beta1.SigType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes command_batch_id = 3; */
        if (message.commandBatchId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandBatchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.SigMetadata
 */
export const SigMetadata = new SigMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferKey$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.TransferKey", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 3, name: "next_key_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "NextKeyID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/multisig/exported.KeyID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.nextKeyId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string next_key_id */ 3:
                    message.nextKeyId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string next_key_id = 3; */
        if (message.nextKeyId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.nextKeyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.TransferKey
 */
export const TransferKey = new TransferKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Asset$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.Asset", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.Asset
 */
export const Asset = new Asset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenDetails$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.TokenDetails", [
            { no: 1, name: "token_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "decimals", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.casttype": "uint8" } },
            { no: 4, name: "capacity", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.tokenName = "";
        message.symbol = "";
        message.decimals = 0;
        message.capacity = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_name */ 1:
                    message.tokenName = reader.string();
                    break;
                case /* string symbol */ 2:
                    message.symbol = reader.string();
                    break;
                case /* uint32 decimals */ 3:
                    message.decimals = reader.uint32();
                    break;
                case /* bytes capacity */ 4:
                    message.capacity = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string token_name = 1; */
        if (message.tokenName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenName);
        /* string symbol = 2; */
        if (message.symbol !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.symbol);
        /* uint32 decimals = 3; */
        if (message.decimals !== 0)
            writer.tag(3, WireType.Varint).uint32(message.decimals);
        /* bytes capacity = 4; */
        if (message.capacity.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.capacity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.TokenDetails
 */
export const TokenDetails = new TokenDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Gateway$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.Gateway", [
            { no: 1, name: "address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address */ 1:
                    message.address = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes address = 1; */
        if (message.address.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.Gateway
 */
export const Gateway = new Gateway$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollMetadata$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.PollMetadata", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.txId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* bytes tx_id */ 2:
                    message.txId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* bytes tx_id = 2; */
        if (message.txId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.txId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PollMetadata
 */
export const PollMetadata = new PollMetadata$Type();
