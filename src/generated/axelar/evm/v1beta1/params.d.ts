// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/evm/v1beta1/params.proto" (package "axelar.evm.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Chain } from "../../nexus/exported/v1beta1/types";
import { Threshold } from "../../utils/v1beta1/threshold";
import { NetworkInfo } from "./types";
/**
 * Params is the parameter set for this module
 *
 * @generated from protobuf message axelar.evm.v1beta1.Params
 */
export interface Params {
    /**
     * @generated from protobuf field: string chain = 1;
     */
    chain: string;
    /**
     * @generated from protobuf field: uint64 confirmation_height = 2;
     */
    confirmationHeight: string;
    /**
     * @generated from protobuf field: string network = 3;
     */
    network: string;
    /**
     * @generated from protobuf field: bytes token_code = 5;
     */
    tokenCode: Uint8Array;
    /**
     * @generated from protobuf field: bytes burnable = 6;
     */
    burnable: Uint8Array;
    /**
     * @generated from protobuf field: int64 revote_locking_period = 7;
     */
    revoteLockingPeriod: string;
    /**
     * @generated from protobuf field: repeated axelar.evm.v1beta1.NetworkInfo networks = 8;
     */
    networks: NetworkInfo[];
    /**
     * @generated from protobuf field: axelar.utils.v1beta1.Threshold voting_threshold = 9;
     */
    votingThreshold?: Threshold;
    /**
     * @generated from protobuf field: int64 min_voter_count = 10;
     */
    minVoterCount: string;
    /**
     * @generated from protobuf field: uint32 commands_gas_limit = 11;
     */
    commandsGasLimit: number;
    /**
     * @generated from protobuf field: int64 voting_grace_period = 13;
     */
    votingGracePeriod: string;
    /**
     * @generated from protobuf field: int64 end_blocker_limit = 14;
     */
    endBlockerLimit: string;
    /**
     * @generated from protobuf field: uint64 transfer_limit = 15;
     */
    transferLimit: string;
}
/**
 * @generated from protobuf message axelar.evm.v1beta1.PendingChain
 */
export interface PendingChain {
    /**
     * @generated from protobuf field: axelar.evm.v1beta1.Params params = 1;
     */
    params?: Params;
    /**
     * @generated from protobuf field: axelar.nexus.exported.v1beta1.Chain chain = 2;
     */
    chain?: Chain;
}
declare class Params$Type extends MessageType<Params> {
    constructor();
    create(value?: PartialMessage<Params>): Params;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params;
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.Params
 */
export declare const Params: Params$Type;
declare class PendingChain$Type extends MessageType<PendingChain> {
    constructor();
    create(value?: PartialMessage<PendingChain>): PendingChain;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PendingChain): PendingChain;
    internalBinaryWrite(message: PendingChain, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PendingChain
 */
export declare const PendingChain: PendingChain$Type;
export {};
