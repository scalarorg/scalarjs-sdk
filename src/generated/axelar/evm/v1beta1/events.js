// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/evm/v1beta1/events.proto" (package "axelar.evm.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { TokenDetails } from "./types";
import { PollParticipants } from "../../vote/exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class PollFailed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.PollFailed", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/axelarnetwork/axelar-core/x/vote/exported.PollID", "gogoproto.customname": "PollID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.pollId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 poll_id */ 3:
                    message.pollId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 poll_id = 3; */
        if (message.pollId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.pollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PollFailed
 */
export const PollFailed = new PollFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollExpired$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.PollExpired", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/axelarnetwork/axelar-core/x/vote/exported.PollID", "gogoproto.customname": "PollID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.pollId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 poll_id */ 3:
                    message.pollId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 poll_id = 3; */
        if (message.pollId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.pollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PollExpired
 */
export const PollExpired = new PollExpired$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollCompleted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.PollCompleted", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/axelarnetwork/axelar-core/x/vote/exported.PollID", "gogoproto.customname": "PollID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.pollId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 poll_id */ 3:
                    message.pollId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 poll_id = 3; */
        if (message.pollId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.pollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PollCompleted
 */
export const PollCompleted = new PollCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoEventsConfirmed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.NoEventsConfirmed", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/axelarnetwork/axelar-core/x/vote/exported.PollID", "gogoproto.customname": "PollID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.pollId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 poll_id */ 3:
                    message.pollId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 poll_id = 3; */
        if (message.pollId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.pollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.NoEventsConfirmed
 */
export const NoEventsConfirmed = new NoEventsConfirmed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmKeyTransferStarted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ConfirmKeyTransferStarted", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 3, name: "gateway_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "participants", kind: "message", T: () => PollParticipants, options: { "gogoproto.nullable": false, "gogoproto.embed": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.txId = new Uint8Array(0);
        message.gatewayAddress = new Uint8Array(0);
        message.confirmationHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* bytes tx_id */ 2:
                    message.txId = reader.bytes();
                    break;
                case /* bytes gateway_address */ 3:
                    message.gatewayAddress = reader.bytes();
                    break;
                case /* uint64 confirmation_height */ 4:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* axelar.vote.exported.v1beta1.PollParticipants participants */ 5:
                    message.participants = PollParticipants.internalBinaryRead(reader, reader.uint32(), options, message.participants);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* bytes tx_id = 2; */
        if (message.txId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.txId);
        /* bytes gateway_address = 3; */
        if (message.gatewayAddress.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.gatewayAddress);
        /* uint64 confirmation_height = 4; */
        if (message.confirmationHeight !== "0")
            writer.tag(4, WireType.Varint).uint64(message.confirmationHeight);
        /* axelar.vote.exported.v1beta1.PollParticipants participants = 5; */
        if (message.participants)
            PollParticipants.internalBinaryWrite(message.participants, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ConfirmKeyTransferStarted
 */
export const ConfirmKeyTransferStarted = new ConfirmKeyTransferStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmGatewayTxStarted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ConfirmGatewayTxStarted", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "gateway_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "participants", kind: "message", T: () => PollParticipants, options: { "gogoproto.nullable": false, "gogoproto.embed": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.gatewayAddress = new Uint8Array(0);
        message.confirmationHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes gateway_address */ 3:
                    message.gatewayAddress = reader.bytes();
                    break;
                case /* uint64 confirmation_height */ 4:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* axelar.vote.exported.v1beta1.PollParticipants participants */ 5:
                    message.participants = PollParticipants.internalBinaryRead(reader, reader.uint32(), options, message.participants);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes gateway_address = 3; */
        if (message.gatewayAddress.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.gatewayAddress);
        /* uint64 confirmation_height = 4; */
        if (message.confirmationHeight !== "0")
            writer.tag(4, WireType.Varint).uint64(message.confirmationHeight);
        /* axelar.vote.exported.v1beta1.PollParticipants participants = 5; */
        if (message.participants)
            PollParticipants.internalBinaryWrite(message.participants, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ConfirmGatewayTxStarted
 */
export const ConfirmGatewayTxStarted = new ConfirmGatewayTxStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PollMapping$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.PollMapping", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "poll_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/axelarnetwork/axelar-core/x/vote/exported.PollID", "gogoproto.customname": "PollID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.pollId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* uint64 poll_id */ 2:
                    message.pollId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* uint64 poll_id = 2; */
        if (message.pollId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.pollId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.PollMapping
 */
export const PollMapping = new PollMapping$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmGatewayTxsStarted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ConfirmGatewayTxsStarted", [
            { no: 1, name: "poll_mappings", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PollMapping, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "poll_mappings,omitempty" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "gateway_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "participants", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.ValAddress" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pollMappings = [];
        message.chain = "";
        message.gatewayAddress = new Uint8Array(0);
        message.confirmationHeight = "0";
        message.participants = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated axelar.evm.v1beta1.PollMapping poll_mappings */ 1:
                    message.pollMappings.push(PollMapping.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes gateway_address */ 3:
                    message.gatewayAddress = reader.bytes();
                    break;
                case /* uint64 confirmation_height */ 4:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* repeated bytes participants */ 5:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated axelar.evm.v1beta1.PollMapping poll_mappings = 1; */
        for (let i = 0; i < message.pollMappings.length; i++)
            PollMapping.internalBinaryWrite(message.pollMappings[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes gateway_address = 3; */
        if (message.gatewayAddress.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.gatewayAddress);
        /* uint64 confirmation_height = 4; */
        if (message.confirmationHeight !== "0")
            writer.tag(4, WireType.Varint).uint64(message.confirmationHeight);
        /* repeated bytes participants = 5; */
        for (let i = 0; i < message.participants.length; i++)
            writer.tag(5, WireType.LengthDelimited).bytes(message.participants[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ConfirmGatewayTxsStarted
 */
export const ConfirmGatewayTxsStarted = new ConfirmGatewayTxsStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDepositStarted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ConfirmDepositStarted", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "deposit_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "token_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 5, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "participants", kind: "message", T: () => PollParticipants, options: { "gogoproto.nullable": false, "gogoproto.embed": true } },
            { no: 7, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.depositAddress = new Uint8Array(0);
        message.tokenAddress = new Uint8Array(0);
        message.confirmationHeight = "0";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes deposit_address */ 3:
                    message.depositAddress = reader.bytes();
                    break;
                case /* bytes token_address */ 4:
                    message.tokenAddress = reader.bytes();
                    break;
                case /* uint64 confirmation_height */ 5:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* axelar.vote.exported.v1beta1.PollParticipants participants */ 6:
                    message.participants = PollParticipants.internalBinaryRead(reader, reader.uint32(), options, message.participants);
                    break;
                case /* string asset */ 7:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes deposit_address = 3; */
        if (message.depositAddress.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.depositAddress);
        /* bytes token_address = 4; */
        if (message.tokenAddress.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.tokenAddress);
        /* uint64 confirmation_height = 5; */
        if (message.confirmationHeight !== "0")
            writer.tag(5, WireType.Varint).uint64(message.confirmationHeight);
        /* axelar.vote.exported.v1beta1.PollParticipants participants = 6; */
        if (message.participants)
            PollParticipants.internalBinaryWrite(message.participants, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string asset = 7; */
        if (message.asset !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ConfirmDepositStarted
 */
export const ConfirmDepositStarted = new ConfirmDepositStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmTokenStarted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ConfirmTokenStarted", [
            { no: 1, name: "tx_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash", "gogoproto.customname": "TxID" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "gateway_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 4, name: "token_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Address" } },
            { no: 5, name: "token_details", kind: "message", T: () => TokenDetails, options: { "gogoproto.nullable": false } },
            { no: 6, name: "confirmation_height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 7, name: "participants", kind: "message", T: () => PollParticipants, options: { "gogoproto.nullable": false, "gogoproto.embed": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.txId = new Uint8Array(0);
        message.chain = "";
        message.gatewayAddress = new Uint8Array(0);
        message.tokenAddress = new Uint8Array(0);
        message.confirmationHeight = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes tx_id */ 1:
                    message.txId = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes gateway_address */ 3:
                    message.gatewayAddress = reader.bytes();
                    break;
                case /* bytes token_address */ 4:
                    message.tokenAddress = reader.bytes();
                    break;
                case /* axelar.evm.v1beta1.TokenDetails token_details */ 5:
                    message.tokenDetails = TokenDetails.internalBinaryRead(reader, reader.uint32(), options, message.tokenDetails);
                    break;
                case /* uint64 confirmation_height */ 6:
                    message.confirmationHeight = reader.uint64().toString();
                    break;
                case /* axelar.vote.exported.v1beta1.PollParticipants participants */ 7:
                    message.participants = PollParticipants.internalBinaryRead(reader, reader.uint32(), options, message.participants);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes tx_id = 1; */
        if (message.txId.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.txId);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes gateway_address = 3; */
        if (message.gatewayAddress.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.gatewayAddress);
        /* bytes token_address = 4; */
        if (message.tokenAddress.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.tokenAddress);
        /* axelar.evm.v1beta1.TokenDetails token_details = 5; */
        if (message.tokenDetails)
            TokenDetails.internalBinaryWrite(message.tokenDetails, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint64 confirmation_height = 6; */
        if (message.confirmationHeight !== "0")
            writer.tag(6, WireType.Varint).uint64(message.confirmationHeight);
        /* axelar.vote.exported.v1beta1.PollParticipants participants = 7; */
        if (message.participants)
            PollParticipants.internalBinaryWrite(message.participants, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ConfirmTokenStarted
 */
export const ConfirmTokenStarted = new ConfirmTokenStarted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChainAdded$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ChainAdded", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ChainAdded
 */
export const ChainAdded = new ChainAdded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandBatchSigned$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.CommandBatchSigned", [
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "command_batch_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "CommandBatchID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.commandBatchId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes command_batch_id */ 3:
                    message.commandBatchId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes command_batch_id = 3; */
        if (message.commandBatchId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandBatchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.CommandBatchSigned
 */
export const CommandBatchSigned = new CommandBatchSigned$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandBatchAborted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.CommandBatchAborted", [
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "command_batch_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.customname": "CommandBatchID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.commandBatchId = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* bytes command_batch_id */ 3:
                    message.commandBatchId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* bytes command_batch_id = 3; */
        if (message.commandBatchId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandBatchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.CommandBatchAborted
 */
export const CommandBatchAborted = new CommandBatchAborted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EVMEventConfirmed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EVMEventConfirmed", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EVMEventConfirmed
 */
export const EVMEventConfirmed = new EVMEventConfirmed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EVMEventCompleted$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EVMEventCompleted", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EVMEventCompleted
 */
export const EVMEventCompleted = new EVMEventCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EVMEventFailed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EVMEventFailed", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EVMEventFailed
 */
export const EVMEventFailed = new EVMEventFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EVMEventRetryFailed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.EVMEventRetryFailed", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.EVMEventRetryFailed
 */
export const EVMEventRetryFailed = new EVMEventRetryFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCallApproved$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ContractCallApproved", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "command_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "CommandID" } },
            { no: 4, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 6, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.commandId = new Uint8Array(0);
        message.sender = "";
        message.destinationChain = "";
        message.contractAddress = "";
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* bytes command_id */ 3:
                    message.commandId = reader.bytes();
                    break;
                case /* string sender */ 4:
                    message.sender = reader.string();
                    break;
                case /* string destination_chain */ 5:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 6:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload_hash */ 7:
                    message.payloadHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* bytes command_id = 3; */
        if (message.commandId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandId);
        /* string sender = 4; */
        if (message.sender !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sender);
        /* string destination_chain = 5; */
        if (message.destinationChain !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 6; */
        if (message.contractAddress !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload_hash = 7; */
        if (message.payloadHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.payloadHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ContractCallApproved
 */
export const ContractCallApproved = new ContractCallApproved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCallFailed$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ContractCallFailed", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "msg_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "MessageID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.msgId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string msg_id */ 2:
                    message.msgId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string msg_id = 2; */
        if (message.msgId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.msgId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ContractCallFailed
 */
export const ContractCallFailed = new ContractCallFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCallWithMintApproved$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.ContractCallWithMintApproved", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "command_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "CommandID" } },
            { no: 4, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 6, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "Hash" } },
            { no: 8, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.commandId = new Uint8Array(0);
        message.sender = "";
        message.destinationChain = "";
        message.contractAddress = "";
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* bytes command_id */ 3:
                    message.commandId = reader.bytes();
                    break;
                case /* string sender */ 4:
                    message.sender = reader.string();
                    break;
                case /* string destination_chain */ 5:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 6:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload_hash */ 7:
                    message.payloadHash = reader.bytes();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 8:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* bytes command_id = 3; */
        if (message.commandId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandId);
        /* string sender = 4; */
        if (message.sender !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sender);
        /* string destination_chain = 5; */
        if (message.destinationChain !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 6; */
        if (message.contractAddress !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload_hash = 7; */
        if (message.payloadHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.payloadHash);
        /* cosmos.base.v1beta1.Coin asset = 8; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.ContractCallWithMintApproved
 */
export const ContractCallWithMintApproved = new ContractCallWithMintApproved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenSent$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.TokenSent", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "EventID", "gogoproto.casttype": "EventID" } },
            { no: 3, name: "transfer_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "TransferID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 4, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 6, name: "destination_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.eventId = "";
        message.transferId = "0";
        message.sender = "";
        message.destinationChain = "";
        message.destinationAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* string event_id */ 2:
                    message.eventId = reader.string();
                    break;
                case /* uint64 transfer_id */ 3:
                    message.transferId = reader.uint64().toString();
                    break;
                case /* string sender */ 4:
                    message.sender = reader.string();
                    break;
                case /* string destination_chain */ 5:
                    message.destinationChain = reader.string();
                    break;
                case /* string destination_address */ 6:
                    message.destinationAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 7:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* string event_id = 2; */
        if (message.eventId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.eventId);
        /* uint64 transfer_id = 3; */
        if (message.transferId !== "0")
            writer.tag(3, WireType.Varint).uint64(message.transferId);
        /* string sender = 4; */
        if (message.sender !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sender);
        /* string destination_chain = 5; */
        if (message.destinationChain !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationChain);
        /* string destination_address = 6; */
        if (message.destinationAddress !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.destinationAddress);
        /* cosmos.base.v1beta1.Coin asset = 7; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.TokenSent
 */
export const TokenSent = new TokenSent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MintCommand$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.MintCommand", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "transfer_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "TransferID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 3, name: "command_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "CommandID" } },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "destination_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.transferId = "0";
        message.commandId = new Uint8Array(0);
        message.destinationChain = "";
        message.destinationAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* uint64 transfer_id */ 2:
                    message.transferId = reader.uint64().toString();
                    break;
                case /* bytes command_id */ 3:
                    message.commandId = reader.bytes();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* string destination_address */ 5:
                    message.destinationAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 6:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* uint64 transfer_id = 2; */
        if (message.transferId !== "0")
            writer.tag(2, WireType.Varint).uint64(message.transferId);
        /* bytes command_id = 3; */
        if (message.commandId.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.commandId);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* string destination_address = 5; */
        if (message.destinationAddress !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationAddress);
        /* cosmos.base.v1beta1.Coin asset = 6; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.MintCommand
 */
export const MintCommand = new MintCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BurnCommand$Type extends MessageType {
    constructor() {
        super("axelar.evm.v1beta1.BurnCommand", [
            { no: 1, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 2, name: "command_id", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "CommandID", "gogoproto.customname": "CommandID" } },
            { no: 3, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "deposit_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.chain = "";
        message.commandId = new Uint8Array(0);
        message.destinationChain = "";
        message.depositAddress = "";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chain */ 1:
                    message.chain = reader.string();
                    break;
                case /* bytes command_id */ 2:
                    message.commandId = reader.bytes();
                    break;
                case /* string destination_chain */ 3:
                    message.destinationChain = reader.string();
                    break;
                case /* string deposit_address */ 4:
                    message.depositAddress = reader.string();
                    break;
                case /* string asset */ 5:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string chain = 1; */
        if (message.chain !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chain);
        /* bytes command_id = 2; */
        if (message.commandId.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.commandId);
        /* string destination_chain = 3; */
        if (message.destinationChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.destinationChain);
        /* string deposit_address = 4; */
        if (message.depositAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.depositAddress);
        /* string asset = 5; */
        if (message.asset !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.evm.v1beta1.BurnCommand
 */
export const BurnCommand = new BurnCommand$Type();
