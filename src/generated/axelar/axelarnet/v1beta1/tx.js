// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/axelarnet/v1beta1/tx.proto" (package "axelar.axelarnet.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Fee } from "./types";
import { Duration } from "../../../google/protobuf/duration";
import { Asset } from "../../nexus/exported/v1beta1/types";
import { Chain } from "../../nexus/exported/v1beta1/types";
// @generated message type with reflection information, may provide speed optimized methods
class LinkRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.LinkRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "recipient_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recipient_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.recipientAddr = "";
        message.recipientChain = "";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string recipient_addr */ 2:
                    message.recipientAddr = reader.string();
                    break;
                case /* string recipient_chain */ 3:
                    message.recipientChain = reader.string();
                    break;
                case /* string asset */ 4:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string recipient_addr = 2; */
        if (message.recipientAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientAddr);
        /* string recipient_chain = 3; */
        if (message.recipientChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipientChain);
        /* string asset = 4; */
        if (message.asset !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.LinkRequest
 */
export const LinkRequest = new LinkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.LinkResponse", [
            { no: 1, name: "deposit_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.depositAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string deposit_addr */ 1:
                    message.depositAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string deposit_addr = 1; */
        if (message.depositAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.depositAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.LinkResponse
 */
export const LinkResponse = new LinkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDepositRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ConfirmDepositRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 4, name: "deposit_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 5, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.depositAddress = new Uint8Array(0);
        message.denom = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* bytes deposit_address */ 4:
                    message.depositAddress = reader.bytes();
                    break;
                case /* string denom */ 5:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* bytes deposit_address = 4; */
        if (message.depositAddress.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.depositAddress);
        /* string denom = 5; */
        if (message.denom !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ConfirmDepositRequest
 */
export const ConfirmDepositRequest = new ConfirmDepositRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfirmDepositResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ConfirmDepositResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ConfirmDepositResponse
 */
export const ConfirmDepositResponse = new ConfirmDepositResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecutePendingTransfersRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ExecutePendingTransfersRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ExecutePendingTransfersRequest
 */
export const ExecutePendingTransfersRequest = new ExecutePendingTransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecutePendingTransfersResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ExecutePendingTransfersResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ExecutePendingTransfersResponse
 */
export const ExecutePendingTransfersResponse = new ExecutePendingTransfersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterIBCPathRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterIBCPathRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_CHAIN_MANAGEMENT" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* string path */ 3:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* string path = 3; */
        if (message.path !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @deprecated
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterIBCPathRequest
 */
export const RegisterIBCPathRequest = new RegisterIBCPathRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterIBCPathResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterIBCPathResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterIBCPathResponse
 */
export const RegisterIBCPathResponse = new RegisterIBCPathResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCosmosBasedChainRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.AddCosmosBasedChainRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "message", T: () => Chain, options: { "gogoproto.nullable": false } },
            { no: 3, name: "addr_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "native_assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Asset, options: { "gogoproto.nullable": false } },
            { no: 6, name: "cosmos_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 7, name: "ibc_path", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "IBCPath" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_ACCESS_CONTROL" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.addrPrefix = "";
        message.nativeAssets = [];
        message.cosmosChain = "";
        message.ibcPath = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* axelar.nexus.exported.v1beta1.Chain chain = 2 [deprecated = true];*/ 2:
                    message.chain = Chain.internalBinaryRead(reader, reader.uint32(), options, message.chain);
                    break;
                case /* string addr_prefix */ 3:
                    message.addrPrefix = reader.string();
                    break;
                case /* repeated axelar.nexus.exported.v1beta1.Asset native_assets = 5 [deprecated = true];*/ 5:
                    message.nativeAssets.push(Asset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string cosmos_chain */ 6:
                    message.cosmosChain = reader.string();
                    break;
                case /* string ibc_path */ 7:
                    message.ibcPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* axelar.nexus.exported.v1beta1.Chain chain = 2 [deprecated = true]; */
        if (message.chain)
            Chain.internalBinaryWrite(message.chain, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string addr_prefix = 3; */
        if (message.addrPrefix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.addrPrefix);
        /* repeated axelar.nexus.exported.v1beta1.Asset native_assets = 5 [deprecated = true]; */
        for (let i = 0; i < message.nativeAssets.length; i++)
            Asset.internalBinaryWrite(message.nativeAssets[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string cosmos_chain = 6; */
        if (message.cosmosChain !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cosmosChain);
        /* string ibc_path = 7; */
        if (message.ibcPath !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ibcPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.AddCosmosBasedChainRequest
 */
export const AddCosmosBasedChainRequest = new AddCosmosBasedChainRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddCosmosBasedChainResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.AddCosmosBasedChainResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.AddCosmosBasedChainResponse
 */
export const AddCosmosBasedChainResponse = new AddCosmosBasedChainResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAssetRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterAssetRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "asset", kind: "message", T: () => Asset, options: { "gogoproto.nullable": false } },
            { no: 4, name: "limit", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Uint" } },
            { no: 5, name: "window", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_CHAIN_MANAGEMENT" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.limit = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* axelar.nexus.exported.v1beta1.Asset asset */ 3:
                    message.asset = Asset.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* bytes limit */ 4:
                    message.limit = reader.bytes();
                    break;
                case /* google.protobuf.Duration window */ 5:
                    message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* axelar.nexus.exported.v1beta1.Asset asset = 3; */
        if (message.asset)
            Asset.internalBinaryWrite(message.asset, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bytes limit = 4; */
        if (message.limit.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.limit);
        /* google.protobuf.Duration window = 5; */
        if (message.window)
            Duration.internalBinaryWrite(message.window, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterAssetRequest
 */
export const RegisterAssetRequest = new RegisterAssetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAssetResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterAssetResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterAssetResponse
 */
export const RegisterAssetResponse = new RegisterAssetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteIBCTransfersRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RouteIBCTransfersRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RouteIBCTransfersRequest
 */
export const RouteIBCTransfersRequest = new RouteIBCTransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteIBCTransfersResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RouteIBCTransfersResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RouteIBCTransfersResponse
 */
export const RouteIBCTransfersResponse = new RouteIBCTransfersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterFeeCollectorRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterFeeCollectorRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "fee_collector", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_ACCESS_CONTROL" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.feeCollector = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* bytes fee_collector */ 2:
                    message.feeCollector = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* bytes fee_collector = 2; */
        if (message.feeCollector.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.feeCollector);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterFeeCollectorRequest
 */
export const RegisterFeeCollectorRequest = new RegisterFeeCollectorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterFeeCollectorResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RegisterFeeCollectorResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RegisterFeeCollectorResponse
 */
export const RegisterFeeCollectorResponse = new RegisterFeeCollectorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryIBCTransferRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RetryIBCTransferRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.id = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain = 2 [deprecated = true];*/ 2:
                    message.chain = reader.string();
                    break;
                case /* uint64 id */ 3:
                    message.id = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2 [deprecated = true]; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* uint64 id = 3; */
        if (message.id !== "0")
            writer.tag(3, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RetryIBCTransferRequest
 */
export const RetryIBCTransferRequest = new RetryIBCTransferRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryIBCTransferResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RetryIBCTransferResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RetryIBCTransferResponse
 */
export const RetryIBCTransferResponse = new RetryIBCTransferResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteMessageRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RouteMessageRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ID" } },
            { no: 3, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "feegranter", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.id = "";
        message.payload = new Uint8Array(0);
        message.feegranter = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* bytes payload */ 3:
                    message.payload = reader.bytes();
                    break;
                case /* bytes feegranter */ 4:
                    message.feegranter = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* bytes payload = 3; */
        if (message.payload.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.payload);
        /* bytes feegranter = 4; */
        if (message.feegranter.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.feegranter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RouteMessageRequest
 */
export const RouteMessageRequest = new RouteMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RouteMessageResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.RouteMessageResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.RouteMessageResponse
 */
export const RouteMessageResponse = new RouteMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallContractRequest$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.CallContractRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 3, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "fee", kind: "message", T: () => Fee }
        ], { "axelar.permission.exported.v1beta1.permission_role": "ROLE_UNRESTRICTED" });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.sender = new Uint8Array(0);
        message.chain = "";
        message.contractAddress = "";
        message.payload = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sender */ 1:
                    message.sender = reader.bytes();
                    break;
                case /* string chain */ 2:
                    message.chain = reader.string();
                    break;
                case /* string contract_address */ 3:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload */ 4:
                    message.payload = reader.bytes();
                    break;
                case /* axelar.axelarnet.v1beta1.Fee fee */ 5:
                    message.fee = Fee.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes sender = 1; */
        if (message.sender.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sender);
        /* string chain = 2; */
        if (message.chain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chain);
        /* string contract_address = 3; */
        if (message.contractAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload = 4; */
        if (message.payload.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.payload);
        /* axelar.axelarnet.v1beta1.Fee fee = 5; */
        if (message.fee)
            Fee.internalBinaryWrite(message.fee, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.CallContractRequest
 */
export const CallContractRequest = new CallContractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallContractResponse$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.CallContractResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.CallContractResponse
 */
export const CallContractResponse = new CallContractResponse$Type();
