// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/axelarnet/v1beta1/events.proto" (package "axelar.axelarnet.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class IBCTransferSent$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.IBCTransferSent", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "receipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PortID" } },
            { no: 6, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChannelID" } },
            { no: 7, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.receipient = "";
        message.sequence = "0";
        message.portId = "";
        message.channelId = "";
        message.recipient = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* string receipient = 2 [deprecated = true];*/ 2:
                    message.receipient = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 3:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* uint64 sequence */ 4:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string port_id */ 5:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 6:
                    message.channelId = reader.string();
                    break;
                case /* string recipient */ 7:
                    message.recipient = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string receipient = 2 [deprecated = true]; */
        if (message.receipient !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receipient);
        /* cosmos.base.v1beta1.Coin asset = 3; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 sequence = 4; */
        if (message.sequence !== "0")
            writer.tag(4, WireType.Varint).uint64(message.sequence);
        /* string port_id = 5; */
        if (message.portId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 6; */
        if (message.channelId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.channelId);
        /* string recipient = 7; */
        if (message.recipient !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.recipient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.IBCTransferSent
 */
export const IBCTransferSent = new IBCTransferSent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IBCTransferCompleted$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.IBCTransferCompleted", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PortID" } },
            { no: 4, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChannelID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.sequence = "0";
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* uint64 sequence */ 2:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string port_id */ 3:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 4:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 sequence = 2; */
        if (message.sequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sequence);
        /* string port_id = 3; */
        if (message.portId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 4; */
        if (message.channelId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.IBCTransferCompleted
 */
export const IBCTransferCompleted = new IBCTransferCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IBCTransferFailed$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.IBCTransferFailed", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PortID" } },
            { no: 4, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChannelID" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.sequence = "0";
        message.portId = "";
        message.channelId = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* uint64 sequence */ 2:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string port_id */ 3:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 4:
                    message.channelId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 sequence = 2; */
        if (message.sequence !== "0")
            writer.tag(2, WireType.Varint).uint64(message.sequence);
        /* string port_id = 3; */
        if (message.portId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 4; */
        if (message.channelId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.IBCTransferFailed
 */
export const IBCTransferFailed = new IBCTransferFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IBCTransferRetried$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.IBCTransferRetried", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "receipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "port_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "PortID" } },
            { no: 6, name: "channel_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "ChannelID" } },
            { no: 7, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.receipient = "";
        message.sequence = "0";
        message.portId = "";
        message.channelId = "";
        message.recipient = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* string receipient = 2 [deprecated = true];*/ 2:
                    message.receipient = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 3:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* uint64 sequence */ 4:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* string port_id */ 5:
                    message.portId = reader.string();
                    break;
                case /* string channel_id */ 6:
                    message.channelId = reader.string();
                    break;
                case /* string recipient */ 7:
                    message.recipient = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string receipient = 2 [deprecated = true]; */
        if (message.receipient !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receipient);
        /* cosmos.base.v1beta1.Coin asset = 3; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 sequence = 4; */
        if (message.sequence !== "0")
            writer.tag(4, WireType.Varint).uint64(message.sequence);
        /* string port_id = 5; */
        if (message.portId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.portId);
        /* string channel_id = 6; */
        if (message.channelId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.channelId);
        /* string recipient = 7; */
        if (message.recipient !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.recipient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.IBCTransferRetried
 */
export const IBCTransferRetried = new IBCTransferRetried$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AxelarTransferCompleted$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.AxelarTransferCompleted", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "ID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "receipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.id = "0";
        message.receipient = "";
        message.recipient = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* string receipient = 2 [deprecated = true];*/ 2:
                    message.receipient = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 3:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                case /* string recipient */ 4:
                    message.recipient = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string receipient = 2 [deprecated = true]; */
        if (message.receipient !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receipient);
        /* cosmos.base.v1beta1.Coin asset = 3; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string recipient = 4; */
        if (message.recipient !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.recipient);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.AxelarTransferCompleted
 */
export const AxelarTransferCompleted = new AxelarTransferCompleted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeeCollected$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.FeeCollected", [
            { no: 1, name: "collector", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 2, name: "fee", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.collector = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes collector */ 1:
                    message.collector = reader.bytes();
                    break;
                case /* cosmos.base.v1beta1.Coin fee */ 2:
                    message.fee = Coin.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes collector = 1; */
        if (message.collector.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.collector);
        /* cosmos.base.v1beta1.Coin fee = 2; */
        if (message.fee)
            Coin.internalBinaryWrite(message.fee, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.FeeCollected
 */
export const FeeCollected = new FeeCollected$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeePaid$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.FeePaid", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "MessageID" } },
            { no: 2, name: "recipient", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 3, name: "fee", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } },
            { no: 4, name: "refund_recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "asset", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.messageId = "";
        message.recipient = new Uint8Array(0);
        message.refundRecipient = "";
        message.asset = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* bytes recipient */ 2:
                    message.recipient = reader.bytes();
                    break;
                case /* cosmos.base.v1beta1.Coin fee */ 3:
                    message.fee = Coin.internalBinaryRead(reader, reader.uint32(), options, message.fee);
                    break;
                case /* string refund_recipient */ 4:
                    message.refundRecipient = reader.string();
                    break;
                case /* string asset */ 5:
                    message.asset = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* bytes recipient = 2; */
        if (message.recipient.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.recipient);
        /* cosmos.base.v1beta1.Coin fee = 3; */
        if (message.fee)
            Coin.internalBinaryWrite(message.fee, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string refund_recipient = 4; */
        if (message.refundRecipient !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.refundRecipient);
        /* string asset = 5; */
        if (message.asset !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.asset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.FeePaid
 */
export const FeePaid = new FeePaid$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCallSubmitted$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ContractCallSubmitted", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "MessageID" } },
            { no: 2, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.messageId = "";
        message.sender = "";
        message.sourceChain = "";
        message.destinationChain = "";
        message.contractAddress = "";
        message.payload = new Uint8Array(0);
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string sender */ 2:
                    message.sender = reader.string();
                    break;
                case /* string source_chain */ 3:
                    message.sourceChain = reader.string();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 5:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload */ 6:
                    message.payload = reader.bytes();
                    break;
                case /* bytes payload_hash */ 7:
                    message.payloadHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string sender = 2; */
        if (message.sender !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sender);
        /* string source_chain = 3; */
        if (message.sourceChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceChain);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 5; */
        if (message.contractAddress !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload = 6; */
        if (message.payload.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.payload);
        /* bytes payload_hash = 7; */
        if (message.payloadHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.payloadHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ContractCallSubmitted
 */
export const ContractCallSubmitted = new ContractCallSubmitted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCallWithTokenSubmitted$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted", [
            { no: 1, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.customname": "MessageID" } },
            { no: 2, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "contract_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "payload_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.messageId = "";
        message.sender = "";
        message.sourceChain = "";
        message.destinationChain = "";
        message.contractAddress = "";
        message.payload = new Uint8Array(0);
        message.payloadHash = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message_id */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string sender */ 2:
                    message.sender = reader.string();
                    break;
                case /* string source_chain */ 3:
                    message.sourceChain = reader.string();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* string contract_address */ 5:
                    message.contractAddress = reader.string();
                    break;
                case /* bytes payload */ 6:
                    message.payload = reader.bytes();
                    break;
                case /* bytes payload_hash */ 7:
                    message.payloadHash = reader.bytes();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 8:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message_id = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string sender = 2; */
        if (message.sender !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sender);
        /* string source_chain = 3; */
        if (message.sourceChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceChain);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* string contract_address = 5; */
        if (message.contractAddress !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.contractAddress);
        /* bytes payload = 6; */
        if (message.payload.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.payload);
        /* bytes payload_hash = 7; */
        if (message.payloadHash.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.payloadHash);
        /* cosmos.base.v1beta1.Coin asset = 8; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted
 */
export const ContractCallWithTokenSubmitted = new ContractCallWithTokenSubmitted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenSent$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.TokenSent", [
            { no: 1, name: "transfer_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.customname": "TransferID", "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.TransferID" } },
            { no: 2, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 4, name: "destination_chain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.casttype": "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName" } },
            { no: 5, name: "destination_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "asset", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.transferId = "0";
        message.sender = "";
        message.sourceChain = "";
        message.destinationChain = "";
        message.destinationAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 transfer_id */ 1:
                    message.transferId = reader.uint64().toString();
                    break;
                case /* string sender */ 2:
                    message.sender = reader.string();
                    break;
                case /* string source_chain */ 3:
                    message.sourceChain = reader.string();
                    break;
                case /* string destination_chain */ 4:
                    message.destinationChain = reader.string();
                    break;
                case /* string destination_address */ 5:
                    message.destinationAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin asset */ 6:
                    message.asset = Coin.internalBinaryRead(reader, reader.uint32(), options, message.asset);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 transfer_id = 1; */
        if (message.transferId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.transferId);
        /* string sender = 2; */
        if (message.sender !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sender);
        /* string source_chain = 3; */
        if (message.sourceChain !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sourceChain);
        /* string destination_chain = 4; */
        if (message.destinationChain !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.destinationChain);
        /* string destination_address = 5; */
        if (message.destinationAddress !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.destinationAddress);
        /* cosmos.base.v1beta1.Coin asset = 6; */
        if (message.asset)
            Coin.internalBinaryWrite(message.asset, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.TokenSent
 */
export const TokenSent = new TokenSent$Type();
