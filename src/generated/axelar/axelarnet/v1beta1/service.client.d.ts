// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/axelarnet/v1beta1/service.proto" (package "axelar.axelarnet.v1beta1", syntax proto3)
// tslint:disable
import type { ChainByIBCPathResponse } from "./query";
import type { ChainByIBCPathRequest } from "./query";
import type { IBCPathResponse } from "./query";
import type { IBCPathRequest } from "./query";
import type { ParamsResponse } from "./query";
import type { ParamsRequest } from "./query";
import type { PendingIBCTransferCountResponse } from "./query";
import type { PendingIBCTransferCountRequest } from "./query";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { CallContractResponse } from "./tx";
import type { CallContractRequest } from "./tx";
import type { RouteMessageResponse } from "./tx";
import type { RouteMessageRequest } from "./tx";
import type { RetryIBCTransferResponse } from "./tx";
import type { RetryIBCTransferRequest } from "./tx";
import type { RegisterFeeCollectorResponse } from "./tx";
import type { RegisterFeeCollectorRequest } from "./tx";
import type { RouteIBCTransfersResponse } from "./tx";
import type { RouteIBCTransfersRequest } from "./tx";
import type { RegisterAssetResponse } from "./tx";
import type { RegisterAssetRequest } from "./tx";
import type { AddCosmosBasedChainResponse } from "./tx";
import type { AddCosmosBasedChainRequest } from "./tx";
import type { ExecutePendingTransfersResponse } from "./tx";
import type { ExecutePendingTransfersRequest } from "./tx";
import type { ConfirmDepositResponse } from "./tx";
import type { ConfirmDepositRequest } from "./tx";
import type { LinkResponse } from "./tx";
import type { LinkRequest } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg defines the axelarnet Msg service.
 *
 * @generated from protobuf service axelar.axelarnet.v1beta1.MsgService
 */
export interface IMsgServiceClient {
    /**
     * @generated from protobuf rpc: Link(axelar.axelarnet.v1beta1.LinkRequest) returns (axelar.axelarnet.v1beta1.LinkResponse);
     */
    link(input: LinkRequest, options?: RpcOptions): UnaryCall<LinkRequest, LinkResponse>;
    /**
     * @generated from protobuf rpc: ConfirmDeposit(axelar.axelarnet.v1beta1.ConfirmDepositRequest) returns (axelar.axelarnet.v1beta1.ConfirmDepositResponse);
     */
    confirmDeposit(input: ConfirmDepositRequest, options?: RpcOptions): UnaryCall<ConfirmDepositRequest, ConfirmDepositResponse>;
    /**
     * @generated from protobuf rpc: ExecutePendingTransfers(axelar.axelarnet.v1beta1.ExecutePendingTransfersRequest) returns (axelar.axelarnet.v1beta1.ExecutePendingTransfersResponse);
     */
    executePendingTransfers(input: ExecutePendingTransfersRequest, options?: RpcOptions): UnaryCall<ExecutePendingTransfersRequest, ExecutePendingTransfersResponse>;
    /**
     * @generated from protobuf rpc: AddCosmosBasedChain(axelar.axelarnet.v1beta1.AddCosmosBasedChainRequest) returns (axelar.axelarnet.v1beta1.AddCosmosBasedChainResponse);
     */
    addCosmosBasedChain(input: AddCosmosBasedChainRequest, options?: RpcOptions): UnaryCall<AddCosmosBasedChainRequest, AddCosmosBasedChainResponse>;
    /**
     * @generated from protobuf rpc: RegisterAsset(axelar.axelarnet.v1beta1.RegisterAssetRequest) returns (axelar.axelarnet.v1beta1.RegisterAssetResponse);
     */
    registerAsset(input: RegisterAssetRequest, options?: RpcOptions): UnaryCall<RegisterAssetRequest, RegisterAssetResponse>;
    /**
     * @generated from protobuf rpc: RouteIBCTransfers(axelar.axelarnet.v1beta1.RouteIBCTransfersRequest) returns (axelar.axelarnet.v1beta1.RouteIBCTransfersResponse);
     */
    routeIBCTransfers(input: RouteIBCTransfersRequest, options?: RpcOptions): UnaryCall<RouteIBCTransfersRequest, RouteIBCTransfersResponse>;
    /**
     * @generated from protobuf rpc: RegisterFeeCollector(axelar.axelarnet.v1beta1.RegisterFeeCollectorRequest) returns (axelar.axelarnet.v1beta1.RegisterFeeCollectorResponse);
     */
    registerFeeCollector(input: RegisterFeeCollectorRequest, options?: RpcOptions): UnaryCall<RegisterFeeCollectorRequest, RegisterFeeCollectorResponse>;
    /**
     * @generated from protobuf rpc: RetryIBCTransfer(axelar.axelarnet.v1beta1.RetryIBCTransferRequest) returns (axelar.axelarnet.v1beta1.RetryIBCTransferResponse);
     */
    retryIBCTransfer(input: RetryIBCTransferRequest, options?: RpcOptions): UnaryCall<RetryIBCTransferRequest, RetryIBCTransferResponse>;
    /**
     * @generated from protobuf rpc: RouteMessage(axelar.axelarnet.v1beta1.RouteMessageRequest) returns (axelar.axelarnet.v1beta1.RouteMessageResponse);
     */
    routeMessage(input: RouteMessageRequest, options?: RpcOptions): UnaryCall<RouteMessageRequest, RouteMessageResponse>;
    /**
     * @generated from protobuf rpc: CallContract(axelar.axelarnet.v1beta1.CallContractRequest) returns (axelar.axelarnet.v1beta1.CallContractResponse);
     */
    callContract(input: CallContractRequest, options?: RpcOptions): UnaryCall<CallContractRequest, CallContractResponse>;
}
/**
 * Msg defines the axelarnet Msg service.
 *
 * @generated from protobuf service axelar.axelarnet.v1beta1.MsgService
 */
export declare class MsgServiceClient implements IMsgServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: Link(axelar.axelarnet.v1beta1.LinkRequest) returns (axelar.axelarnet.v1beta1.LinkResponse);
     */
    link(input: LinkRequest, options?: RpcOptions): UnaryCall<LinkRequest, LinkResponse>;
    /**
     * @generated from protobuf rpc: ConfirmDeposit(axelar.axelarnet.v1beta1.ConfirmDepositRequest) returns (axelar.axelarnet.v1beta1.ConfirmDepositResponse);
     */
    confirmDeposit(input: ConfirmDepositRequest, options?: RpcOptions): UnaryCall<ConfirmDepositRequest, ConfirmDepositResponse>;
    /**
     * @generated from protobuf rpc: ExecutePendingTransfers(axelar.axelarnet.v1beta1.ExecutePendingTransfersRequest) returns (axelar.axelarnet.v1beta1.ExecutePendingTransfersResponse);
     */
    executePendingTransfers(input: ExecutePendingTransfersRequest, options?: RpcOptions): UnaryCall<ExecutePendingTransfersRequest, ExecutePendingTransfersResponse>;
    /**
     * @generated from protobuf rpc: AddCosmosBasedChain(axelar.axelarnet.v1beta1.AddCosmosBasedChainRequest) returns (axelar.axelarnet.v1beta1.AddCosmosBasedChainResponse);
     */
    addCosmosBasedChain(input: AddCosmosBasedChainRequest, options?: RpcOptions): UnaryCall<AddCosmosBasedChainRequest, AddCosmosBasedChainResponse>;
    /**
     * @generated from protobuf rpc: RegisterAsset(axelar.axelarnet.v1beta1.RegisterAssetRequest) returns (axelar.axelarnet.v1beta1.RegisterAssetResponse);
     */
    registerAsset(input: RegisterAssetRequest, options?: RpcOptions): UnaryCall<RegisterAssetRequest, RegisterAssetResponse>;
    /**
     * @generated from protobuf rpc: RouteIBCTransfers(axelar.axelarnet.v1beta1.RouteIBCTransfersRequest) returns (axelar.axelarnet.v1beta1.RouteIBCTransfersResponse);
     */
    routeIBCTransfers(input: RouteIBCTransfersRequest, options?: RpcOptions): UnaryCall<RouteIBCTransfersRequest, RouteIBCTransfersResponse>;
    /**
     * @generated from protobuf rpc: RegisterFeeCollector(axelar.axelarnet.v1beta1.RegisterFeeCollectorRequest) returns (axelar.axelarnet.v1beta1.RegisterFeeCollectorResponse);
     */
    registerFeeCollector(input: RegisterFeeCollectorRequest, options?: RpcOptions): UnaryCall<RegisterFeeCollectorRequest, RegisterFeeCollectorResponse>;
    /**
     * @generated from protobuf rpc: RetryIBCTransfer(axelar.axelarnet.v1beta1.RetryIBCTransferRequest) returns (axelar.axelarnet.v1beta1.RetryIBCTransferResponse);
     */
    retryIBCTransfer(input: RetryIBCTransferRequest, options?: RpcOptions): UnaryCall<RetryIBCTransferRequest, RetryIBCTransferResponse>;
    /**
     * @generated from protobuf rpc: RouteMessage(axelar.axelarnet.v1beta1.RouteMessageRequest) returns (axelar.axelarnet.v1beta1.RouteMessageResponse);
     */
    routeMessage(input: RouteMessageRequest, options?: RpcOptions): UnaryCall<RouteMessageRequest, RouteMessageResponse>;
    /**
     * @generated from protobuf rpc: CallContract(axelar.axelarnet.v1beta1.CallContractRequest) returns (axelar.axelarnet.v1beta1.CallContractResponse);
     */
    callContract(input: CallContractRequest, options?: RpcOptions): UnaryCall<CallContractRequest, CallContractResponse>;
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.axelarnet.v1beta1.QueryService
 */
export interface IQueryServiceClient {
    /**
     * PendingIBCTransferCount queries the pending ibc transfers for all chains
     *
     * @generated from protobuf rpc: PendingIBCTransferCount(axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest) returns (axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse);
     */
    pendingIBCTransferCount(input: PendingIBCTransferCountRequest, options?: RpcOptions): UnaryCall<PendingIBCTransferCountRequest, PendingIBCTransferCountResponse>;
    /**
     * @generated from protobuf rpc: Params(axelar.axelarnet.v1beta1.ParamsRequest) returns (axelar.axelarnet.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
    /**
     * @generated from protobuf rpc: IBCPath(axelar.axelarnet.v1beta1.IBCPathRequest) returns (axelar.axelarnet.v1beta1.IBCPathResponse);
     */
    iBCPath(input: IBCPathRequest, options?: RpcOptions): UnaryCall<IBCPathRequest, IBCPathResponse>;
    /**
     * @generated from protobuf rpc: ChainByIBCPath(axelar.axelarnet.v1beta1.ChainByIBCPathRequest) returns (axelar.axelarnet.v1beta1.ChainByIBCPathResponse);
     */
    chainByIBCPath(input: ChainByIBCPathRequest, options?: RpcOptions): UnaryCall<ChainByIBCPathRequest, ChainByIBCPathResponse>;
}
/**
 * QueryService defines the gRPC querier service.
 *
 * @generated from protobuf service axelar.axelarnet.v1beta1.QueryService
 */
export declare class QueryServiceClient implements IQueryServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * PendingIBCTransferCount queries the pending ibc transfers for all chains
     *
     * @generated from protobuf rpc: PendingIBCTransferCount(axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest) returns (axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse);
     */
    pendingIBCTransferCount(input: PendingIBCTransferCountRequest, options?: RpcOptions): UnaryCall<PendingIBCTransferCountRequest, PendingIBCTransferCountResponse>;
    /**
     * @generated from protobuf rpc: Params(axelar.axelarnet.v1beta1.ParamsRequest) returns (axelar.axelarnet.v1beta1.ParamsResponse);
     */
    params(input: ParamsRequest, options?: RpcOptions): UnaryCall<ParamsRequest, ParamsResponse>;
    /**
     * @generated from protobuf rpc: IBCPath(axelar.axelarnet.v1beta1.IBCPathRequest) returns (axelar.axelarnet.v1beta1.IBCPathResponse);
     */
    iBCPath(input: IBCPathRequest, options?: RpcOptions): UnaryCall<IBCPathRequest, IBCPathResponse>;
    /**
     * @generated from protobuf rpc: ChainByIBCPath(axelar.axelarnet.v1beta1.ChainByIBCPathRequest) returns (axelar.axelarnet.v1beta1.ChainByIBCPathResponse);
     */
    chainByIBCPath(input: ChainByIBCPathRequest, options?: RpcOptions): UnaryCall<ChainByIBCPathRequest, ChainByIBCPathResponse>;
}
