// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/axelarnet/v1beta1/genesis.proto" (package "axelar.axelarnet.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { IBCTransfer } from "./types";
import { QueueState } from "../../utils/v1beta1/queuer";
import { CosmosChain } from "./types";
import { Params } from "./params";
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType {
    constructor() {
        super("axelar.axelarnet.v1beta1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "collector_address", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.casttype": "github.com/cosmos/cosmos-sdk/types.AccAddress" } },
            { no: 3, name: "chains", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CosmosChain, options: { "gogoproto.nullable": false } },
            { no: 5, name: "transfer_queue", kind: "message", T: () => QueueState, options: { "gogoproto.nullable": false } },
            { no: 7, name: "ibc_transfers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => IBCTransfer, options: { "gogoproto.nullable": false, "gogoproto.customname": "IBCTransfers" } },
            { no: 8, name: "seq_id_mapping", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 4 /*ScalarType.UINT64*/ }, options: { "gogoproto.nullable": false, "gogoproto.customname": "SeqIDMapping" } }
        ], { "gogoproto.stable_marshaler": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.collectorAddress = new Uint8Array(0);
        message.chains = [];
        message.ibcTransfers = [];
        message.seqIdMapping = {};
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* axelar.axelarnet.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* bytes collector_address */ 2:
                    message.collectorAddress = reader.bytes();
                    break;
                case /* repeated axelar.axelarnet.v1beta1.CosmosChain chains */ 3:
                    message.chains.push(CosmosChain.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* axelar.utils.v1beta1.QueueState transfer_queue */ 5:
                    message.transferQueue = QueueState.internalBinaryRead(reader, reader.uint32(), options, message.transferQueue);
                    break;
                case /* repeated axelar.axelarnet.v1beta1.IBCTransfer ibc_transfers */ 7:
                    message.ibcTransfers.push(IBCTransfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, uint64> seq_id_mapping */ 8:
                    this.binaryReadMap8(message.seqIdMapping, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap8(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint64().toString();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field axelar.axelarnet.v1beta1.GenesisState.seq_id_mapping");
            }
        }
        map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "0";
    }
    internalBinaryWrite(message, writer, options) {
        /* axelar.axelarnet.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes collector_address = 2; */
        if (message.collectorAddress.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.collectorAddress);
        /* repeated axelar.axelarnet.v1beta1.CosmosChain chains = 3; */
        for (let i = 0; i < message.chains.length; i++)
            CosmosChain.internalBinaryWrite(message.chains[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* axelar.utils.v1beta1.QueueState transfer_queue = 5; */
        if (message.transferQueue)
            QueueState.internalBinaryWrite(message.transferQueue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated axelar.axelarnet.v1beta1.IBCTransfer ibc_transfers = 7; */
        for (let i = 0; i < message.ibcTransfers.length; i++)
            IBCTransfer.internalBinaryWrite(message.ibcTransfers[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* map<string, uint64> seq_id_mapping = 8; */
        for (let k of globalThis.Object.keys(message.seqIdMapping))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint64(message.seqIdMapping[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.axelarnet.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
