// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/utils/v1beta1/bitmap.proto" (package "axelar.utils.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message axelar.utils.v1beta1.Bitmap
 */
export interface Bitmap {
    /**
     * @generated from protobuf field: axelar.utils.v1beta1.CircularBuffer true_count_cache = 2;
     */
    trueCountCache?: CircularBuffer;
}
/**
 * @generated from protobuf message axelar.utils.v1beta1.CircularBuffer
 */
export interface CircularBuffer {
    /**
     * @generated from protobuf field: repeated uint64 cumulative_value = 1;
     */
    cumulativeValue: string[];
    /**
     * @generated from protobuf field: int32 index = 2;
     */
    index: number;
    /**
     * @generated from protobuf field: int32 max_size = 3;
     */
    maxSize: number;
}
declare class Bitmap$Type extends MessageType<Bitmap> {
    constructor();
    create(value?: PartialMessage<Bitmap>): Bitmap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bitmap): Bitmap;
    internalBinaryWrite(message: Bitmap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.utils.v1beta1.Bitmap
 */
export declare const Bitmap: Bitmap$Type;
declare class CircularBuffer$Type extends MessageType<CircularBuffer> {
    constructor();
    create(value?: PartialMessage<CircularBuffer>): CircularBuffer;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CircularBuffer): CircularBuffer;
    internalBinaryWrite(message: CircularBuffer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message axelar.utils.v1beta1.CircularBuffer
 */
export declare const CircularBuffer: CircularBuffer$Type;
export {};
