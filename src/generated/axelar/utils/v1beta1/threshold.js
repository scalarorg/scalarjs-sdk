// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "axelar/utils/v1beta1/threshold.proto" (package "axelar.utils.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class Threshold$Type extends MessageType {
    constructor() {
        super("axelar.utils.v1beta1.Threshold", [
            { no: 1, name: "numerator", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "denominator", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.numerator = "0";
        message.denominator = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 numerator */ 1:
                    message.numerator = reader.int64().toString();
                    break;
                case /* int64 denominator */ 2:
                    message.denominator = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 numerator = 1; */
        if (message.numerator !== "0")
            writer.tag(1, WireType.Varint).int64(message.numerator);
        /* int64 denominator = 2; */
        if (message.denominator !== "0")
            writer.tag(2, WireType.Varint).int64(message.denominator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message axelar.utils.v1beta1.Threshold
 */
export const Threshold = new Threshold$Type();
