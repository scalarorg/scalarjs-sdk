// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/vesting/v1beta1/vesting.proto" (package "cosmos.vesting.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { BaseAccount } from "../../auth/v1beta1/auth";
// @generated message type with reflection information, may provide speed optimized methods
class BaseVestingAccount$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.BaseVestingAccount", [
            { no: 1, name: "base_account", kind: "message", T: () => BaseAccount, options: { "gogoproto.embed": true } },
            { no: 2, name: "original_vesting", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"original_vesting\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 3, name: "delegated_free", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"delegated_free\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 4, name: "delegated_vesting", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"delegated_vesting\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 5, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"end_time\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.originalVesting = [];
        message.delegatedFree = [];
        message.delegatedVesting = [];
        message.endTime = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.auth.v1beta1.BaseAccount base_account */ 1:
                    message.baseAccount = BaseAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseAccount);
                    break;
                case /* repeated cosmos.base.v1beta1.Coin original_vesting */ 2:
                    message.originalVesting.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.v1beta1.Coin delegated_free */ 3:
                    message.delegatedFree.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.v1beta1.Coin delegated_vesting */ 4:
                    message.delegatedVesting.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 end_time */ 5:
                    message.endTime = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.auth.v1beta1.BaseAccount base_account = 1; */
        if (message.baseAccount)
            BaseAccount.internalBinaryWrite(message.baseAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin original_vesting = 2; */
        for (let i = 0; i < message.originalVesting.length; i++)
            Coin.internalBinaryWrite(message.originalVesting[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin delegated_free = 3; */
        for (let i = 0; i < message.delegatedFree.length; i++)
            Coin.internalBinaryWrite(message.delegatedFree[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin delegated_vesting = 4; */
        for (let i = 0; i < message.delegatedVesting.length; i++)
            Coin.internalBinaryWrite(message.delegatedVesting[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 end_time = 5; */
        if (message.endTime !== "0")
            writer.tag(5, WireType.Varint).int64(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.BaseVestingAccount
 */
export const BaseVestingAccount = new BaseVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContinuousVestingAccount$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.ContinuousVestingAccount", [
            { no: 1, name: "base_vesting_account", kind: "message", T: () => BaseVestingAccount, options: { "gogoproto.embed": true } },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"start_time\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.startTime = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account */ 1:
                    message.baseVestingAccount = BaseVestingAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseVestingAccount);
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1; */
        if (message.baseVestingAccount)
            BaseVestingAccount.internalBinaryWrite(message.baseVestingAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_time = 2; */
        if (message.startTime !== "0")
            writer.tag(2, WireType.Varint).int64(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.ContinuousVestingAccount
 */
export const ContinuousVestingAccount = new ContinuousVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelayedVestingAccount$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.DelayedVestingAccount", [
            { no: 1, name: "base_vesting_account", kind: "message", T: () => BaseVestingAccount, options: { "gogoproto.embed": true } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account */ 1:
                    message.baseVestingAccount = BaseVestingAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseVestingAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1; */
        if (message.baseVestingAccount)
            BaseVestingAccount.internalBinaryWrite(message.baseVestingAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.DelayedVestingAccount
 */
export const DelayedVestingAccount = new DelayedVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Period$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.Period", [
            { no: 1, name: "length", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.length = "0";
        message.amount = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 length */ 1:
                    message.length = reader.int64().toString();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 2:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 length = 1; */
        if (message.length !== "0")
            writer.tag(1, WireType.Varint).int64(message.length);
        /* repeated cosmos.base.v1beta1.Coin amount = 2; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.Period
 */
export const Period = new Period$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeriodicVestingAccount$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.PeriodicVestingAccount", [
            { no: 1, name: "base_vesting_account", kind: "message", T: () => BaseVestingAccount, options: { "gogoproto.embed": true } },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"start_time\"" } },
            { no: 3, name: "vesting_periods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Period, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"vesting_periods\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.startTime = "0";
        message.vestingPeriods = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account */ 1:
                    message.baseVestingAccount = BaseVestingAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseVestingAccount);
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toString();
                    break;
                case /* repeated cosmos.vesting.v1beta1.Period vesting_periods */ 3:
                    message.vestingPeriods.push(Period.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1; */
        if (message.baseVestingAccount)
            BaseVestingAccount.internalBinaryWrite(message.baseVestingAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 start_time = 2; */
        if (message.startTime !== "0")
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* repeated cosmos.vesting.v1beta1.Period vesting_periods = 3; */
        for (let i = 0; i < message.vestingPeriods.length; i++)
            Period.internalBinaryWrite(message.vestingPeriods[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.PeriodicVestingAccount
 */
export const PeriodicVestingAccount = new PeriodicVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PermanentLockedAccount$Type extends MessageType {
    constructor() {
        super("cosmos.vesting.v1beta1.PermanentLockedAccount", [
            { no: 1, name: "base_vesting_account", kind: "message", T: () => BaseVestingAccount, options: { "gogoproto.embed": true } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account */ 1:
                    message.baseVestingAccount = BaseVestingAccount.internalBinaryRead(reader, reader.uint32(), options, message.baseVestingAccount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1; */
        if (message.baseVestingAccount)
            BaseVestingAccount.internalBinaryWrite(message.baseVestingAccount, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.PermanentLockedAccount
 */
export const PermanentLockedAccount = new PermanentLockedAccount$Type();
