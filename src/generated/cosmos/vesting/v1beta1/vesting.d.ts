// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/vesting/v1beta1/vesting.proto" (package "cosmos.vesting.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { BaseAccount } from "../../auth/v1beta1/auth";
/**
 * BaseVestingAccount implements the VestingAccount interface. It contains all
 * the necessary fields needed for any vesting account implementation.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.BaseVestingAccount
 */
export interface BaseVestingAccount {
    /**
     * @generated from protobuf field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
     */
    baseAccount?: BaseAccount;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin original_vesting = 2;
     */
    originalVesting: Coin[];
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin delegated_free = 3;
     */
    delegatedFree: Coin[];
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin delegated_vesting = 4;
     */
    delegatedVesting: Coin[];
    /**
     * @generated from protobuf field: int64 end_time = 5;
     */
    endTime: string;
}
/**
 * ContinuousVestingAccount implements the VestingAccount interface. It
 * continuously vests by unlocking coins linearly with respect to time.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.ContinuousVestingAccount
 */
export interface ContinuousVestingAccount {
    /**
     * @generated from protobuf field: cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;
     */
    baseVestingAccount?: BaseVestingAccount;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: string;
}
/**
 * DelayedVestingAccount implements the VestingAccount interface. It vests all
 * coins after a specific time, but non prior. In other words, it keeps them
 * locked until a specified time.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.DelayedVestingAccount
 */
export interface DelayedVestingAccount {
    /**
     * @generated from protobuf field: cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;
     */
    baseVestingAccount?: BaseVestingAccount;
}
/**
 * Period defines a length of time and amount of coins that will vest.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.Period
 */
export interface Period {
    /**
     * @generated from protobuf field: int64 length = 1;
     */
    length: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amount = 2;
     */
    amount: Coin[];
}
/**
 * PeriodicVestingAccount implements the VestingAccount interface. It
 * periodically vests by unlocking coins during each specified period.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.PeriodicVestingAccount
 */
export interface PeriodicVestingAccount {
    /**
     * @generated from protobuf field: cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;
     */
    baseVestingAccount?: BaseVestingAccount;
    /**
     * @generated from protobuf field: int64 start_time = 2;
     */
    startTime: string;
    /**
     * @generated from protobuf field: repeated cosmos.vesting.v1beta1.Period vesting_periods = 3;
     */
    vestingPeriods: Period[];
}
/**
 * PermanentLockedAccount implements the VestingAccount interface. It does
 * not ever release coins, locking them indefinitely. Coins in this account can
 * still be used for delegating and for governance votes even while locked.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.PermanentLockedAccount
 */
export interface PermanentLockedAccount {
    /**
     * @generated from protobuf field: cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;
     */
    baseVestingAccount?: BaseVestingAccount;
}
declare class BaseVestingAccount$Type extends MessageType<BaseVestingAccount> {
    constructor();
    create(value?: PartialMessage<BaseVestingAccount>): BaseVestingAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseVestingAccount): BaseVestingAccount;
    internalBinaryWrite(message: BaseVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.BaseVestingAccount
 */
export declare const BaseVestingAccount: BaseVestingAccount$Type;
declare class ContinuousVestingAccount$Type extends MessageType<ContinuousVestingAccount> {
    constructor();
    create(value?: PartialMessage<ContinuousVestingAccount>): ContinuousVestingAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContinuousVestingAccount): ContinuousVestingAccount;
    internalBinaryWrite(message: ContinuousVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.ContinuousVestingAccount
 */
export declare const ContinuousVestingAccount: ContinuousVestingAccount$Type;
declare class DelayedVestingAccount$Type extends MessageType<DelayedVestingAccount> {
    constructor();
    create(value?: PartialMessage<DelayedVestingAccount>): DelayedVestingAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelayedVestingAccount): DelayedVestingAccount;
    internalBinaryWrite(message: DelayedVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.DelayedVestingAccount
 */
export declare const DelayedVestingAccount: DelayedVestingAccount$Type;
declare class Period$Type extends MessageType<Period> {
    constructor();
    create(value?: PartialMessage<Period>): Period;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Period): Period;
    internalBinaryWrite(message: Period, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.Period
 */
export declare const Period: Period$Type;
declare class PeriodicVestingAccount$Type extends MessageType<PeriodicVestingAccount> {
    constructor();
    create(value?: PartialMessage<PeriodicVestingAccount>): PeriodicVestingAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeriodicVestingAccount): PeriodicVestingAccount;
    internalBinaryWrite(message: PeriodicVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.PeriodicVestingAccount
 */
export declare const PeriodicVestingAccount: PeriodicVestingAccount$Type;
declare class PermanentLockedAccount$Type extends MessageType<PermanentLockedAccount> {
    constructor();
    create(value?: PartialMessage<PermanentLockedAccount>): PermanentLockedAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermanentLockedAccount): PermanentLockedAccount;
    internalBinaryWrite(message: PermanentLockedAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.PermanentLockedAccount
 */
export declare const PermanentLockedAccount: PermanentLockedAccount$Type;
export {};
