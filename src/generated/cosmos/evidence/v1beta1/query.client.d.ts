// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/evidence/v1beta1/query.proto" (package "cosmos.evidence.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { QueryAllEvidenceResponse } from "./query";
import type { QueryAllEvidenceRequest } from "./query";
import type { QueryEvidenceResponse } from "./query";
import type { QueryEvidenceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.evidence.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Evidence queries evidence based on evidence hash.
     *
     * @generated from protobuf rpc: Evidence(cosmos.evidence.v1beta1.QueryEvidenceRequest) returns (cosmos.evidence.v1beta1.QueryEvidenceResponse);
     */
    evidence(input: QueryEvidenceRequest, options?: RpcOptions): UnaryCall<QueryEvidenceRequest, QueryEvidenceResponse>;
    /**
     * AllEvidence queries all evidence.
     *
     * @generated from protobuf rpc: AllEvidence(cosmos.evidence.v1beta1.QueryAllEvidenceRequest) returns (cosmos.evidence.v1beta1.QueryAllEvidenceResponse);
     */
    allEvidence(input: QueryAllEvidenceRequest, options?: RpcOptions): UnaryCall<QueryAllEvidenceRequest, QueryAllEvidenceResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.evidence.v1beta1.Query
 */
export declare class QueryClient implements IQueryClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * Evidence queries evidence based on evidence hash.
     *
     * @generated from protobuf rpc: Evidence(cosmos.evidence.v1beta1.QueryEvidenceRequest) returns (cosmos.evidence.v1beta1.QueryEvidenceResponse);
     */
    evidence(input: QueryEvidenceRequest, options?: RpcOptions): UnaryCall<QueryEvidenceRequest, QueryEvidenceResponse>;
    /**
     * AllEvidence queries all evidence.
     *
     * @generated from protobuf rpc: AllEvidence(cosmos.evidence.v1beta1.QueryAllEvidenceRequest) returns (cosmos.evidence.v1beta1.QueryAllEvidenceResponse);
     */
    allEvidence(input: QueryAllEvidenceRequest, options?: RpcOptions): UnaryCall<QueryAllEvidenceRequest, QueryAllEvidenceResponse>;
}
