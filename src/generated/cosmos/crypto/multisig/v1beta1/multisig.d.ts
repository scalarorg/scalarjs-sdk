// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/crypto/multisig/v1beta1/multisig.proto" (package "cosmos.crypto.multisig.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 * signed and with which modes.
 *
 * @generated from protobuf message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export interface MultiSignature {
    /**
     * @generated from protobuf field: repeated bytes signatures = 1;
     */
    signatures: Uint8Array[];
}
/**
 * CompactBitArray is an implementation of a space efficient bit array.
 * This is used to ensure that the encoded data takes up a minimal amount of
 * space after proto encoding.
 * This is not thread safe, and is not intended for concurrent usage.
 *
 * @generated from protobuf message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export interface CompactBitArray {
    /**
     * @generated from protobuf field: uint32 extra_bits_stored = 1;
     */
    extraBitsStored: number;
    /**
     * @generated from protobuf field: bytes elems = 2;
     */
    elems: Uint8Array;
}
declare class MultiSignature$Type extends MessageType<MultiSignature> {
    constructor();
    create(value?: PartialMessage<MultiSignature>): MultiSignature;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultiSignature): MultiSignature;
    internalBinaryWrite(message: MultiSignature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export declare const MultiSignature: MultiSignature$Type;
declare class CompactBitArray$Type extends MessageType<CompactBitArray> {
    constructor();
    create(value?: PartialMessage<CompactBitArray>): CompactBitArray;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompactBitArray): CompactBitArray;
    internalBinaryWrite(message: CompactBitArray, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export declare const CompactBitArray: CompactBitArray$Type;
export {};
