// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/crypto/multisig/v1beta1/multisig.proto" (package "cosmos.crypto.multisig.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated message type with reflection information, may provide speed optimized methods
class MultiSignature$Type extends MessageType {
    constructor() {
        super("cosmos.crypto.multisig.v1beta1.MultiSignature", [
            { no: 1, name: "signatures", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_unrecognized": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.signatures = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes signatures */ 1:
                    message.signatures.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bytes signatures = 1; */
        for (let i = 0; i < message.signatures.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signatures[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export const MultiSignature = new MultiSignature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompactBitArray$Type extends MessageType {
    constructor() {
        super("cosmos.crypto.multisig.v1beta1.CompactBitArray", [
            { no: 1, name: "extra_bits_stored", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "elems", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.extraBitsStored = 0;
        message.elems = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 extra_bits_stored */ 1:
                    message.extraBitsStored = reader.uint32();
                    break;
                case /* bytes elems */ 2:
                    message.elems = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 extra_bits_stored = 1; */
        if (message.extraBitsStored !== 0)
            writer.tag(1, WireType.Varint).uint32(message.extraBitsStored);
        /* bytes elems = 2; */
        if (message.elems.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.elems);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export const CompactBitArray = new CompactBitArray$Type();
