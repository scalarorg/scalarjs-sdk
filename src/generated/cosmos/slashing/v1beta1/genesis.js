// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/slashing/v1beta1/genesis.proto" (package "cosmos.slashing.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ValidatorSigningInfo } from "./slashing";
import { Params } from "./slashing";
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType {
    constructor() {
        super("cosmos.slashing.v1beta1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "signing_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SigningInfo, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"signing_infos\"" } },
            { no: 3, name: "missed_blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorMissedBlocks, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"missed_blocks\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.signingInfos = [];
        message.missedBlocks = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.slashing.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* repeated cosmos.slashing.v1beta1.SigningInfo signing_infos */ 2:
                    message.signingInfos.push(SigningInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks */ 3:
                    message.missedBlocks.push(ValidatorMissedBlocks.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.slashing.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.slashing.v1beta1.SigningInfo signing_infos = 2; */
        for (let i = 0; i < message.signingInfos.length; i++)
            SigningInfo.internalBinaryWrite(message.signingInfos[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3; */
        for (let i = 0; i < message.missedBlocks.length; i++)
            ValidatorMissedBlocks.internalBinaryWrite(message.missedBlocks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SigningInfo$Type extends MessageType {
    constructor() {
        super("cosmos.slashing.v1beta1.SigningInfo", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_signing_info", kind: "message", T: () => ValidatorSigningInfo, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_signing_info\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info */ 2:
                    message.validatorSigningInfo = ValidatorSigningInfo.internalBinaryRead(reader, reader.uint32(), options, message.validatorSigningInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2; */
        if (message.validatorSigningInfo)
            ValidatorSigningInfo.internalBinaryWrite(message.validatorSigningInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.SigningInfo
 */
export const SigningInfo = new SigningInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorMissedBlocks$Type extends MessageType {
    constructor() {
        super("cosmos.slashing.v1beta1.ValidatorMissedBlocks", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "missed_blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MissedBlock, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"missed_blocks\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.missedBlocks = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* repeated cosmos.slashing.v1beta1.MissedBlock missed_blocks */ 2:
                    message.missedBlocks.push(MissedBlock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* repeated cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2; */
        for (let i = 0; i < message.missedBlocks.length; i++)
            MissedBlock.internalBinaryWrite(message.missedBlocks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.ValidatorMissedBlocks
 */
export const ValidatorMissedBlocks = new ValidatorMissedBlocks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MissedBlock$Type extends MessageType {
    constructor() {
        super("cosmos.slashing.v1beta1.MissedBlock", [
            { no: 1, name: "index", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "missed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.index = "0";
        message.missed = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 index */ 1:
                    message.index = reader.int64().toString();
                    break;
                case /* bool missed */ 2:
                    message.missed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 index = 1; */
        if (message.index !== "0")
            writer.tag(1, WireType.Varint).int64(message.index);
        /* bool missed = 2; */
        if (message.missed !== false)
            writer.tag(2, WireType.Varint).bool(message.missed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.slashing.v1beta1.MissedBlock
 */
export const MissedBlock = new MissedBlock$Type();
