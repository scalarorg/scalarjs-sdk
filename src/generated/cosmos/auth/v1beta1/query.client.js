// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/auth/v1beta1/query.proto" (package "cosmos.auth.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.auth.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * Accounts returns all the existing accounts
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf rpc: Accounts(cosmos.auth.v1beta1.QueryAccountsRequest) returns (cosmos.auth.v1beta1.QueryAccountsResponse);
     */
    accounts(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Account returns account details based on address.
     *
     * @generated from protobuf rpc: Account(cosmos.auth.v1beta1.QueryAccountRequest) returns (cosmos.auth.v1beta1.QueryAccountResponse);
     */
    account(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Params queries all parameters.
     *
     * @generated from protobuf rpc: Params(cosmos.auth.v1beta1.QueryParamsRequest) returns (cosmos.auth.v1beta1.QueryParamsResponse);
     */
    params(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ModuleAccountByName returns the module account info by module name
     *
     * @generated from protobuf rpc: ModuleAccountByName(cosmos.auth.v1beta1.QueryModuleAccountByNameRequest) returns (cosmos.auth.v1beta1.QueryModuleAccountByNameResponse);
     */
    moduleAccountByName(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
