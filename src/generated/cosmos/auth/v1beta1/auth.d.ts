// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/auth/v1beta1/auth.proto" (package "cosmos.auth.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
/**
 * BaseAccount defines a base account type. It contains all the necessary fields
 * for basic account functionality. Any custom account type should extend this
 * type for additional functionality (e.g. vesting).
 *
 * @generated from protobuf message cosmos.auth.v1beta1.BaseAccount
 */
export interface BaseAccount {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: google.protobuf.Any pub_key = 2;
     */
    pubKey?: Any;
    /**
     * @generated from protobuf field: uint64 account_number = 3;
     */
    accountNumber: string;
    /**
     * @generated from protobuf field: uint64 sequence = 4;
     */
    sequence: string;
}
/**
 * ModuleAccount defines an account for modules that holds coins on a pool.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.ModuleAccount
 */
export interface ModuleAccount {
    /**
     * @generated from protobuf field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
     */
    baseAccount?: BaseAccount;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string permissions = 3;
     */
    permissions: string[];
}
/**
 * Params defines the parameters for the auth module.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.Params
 */
export interface Params {
    /**
     * @generated from protobuf field: uint64 max_memo_characters = 1;
     */
    maxMemoCharacters: string;
    /**
     * @generated from protobuf field: uint64 tx_sig_limit = 2;
     */
    txSigLimit: string;
    /**
     * @generated from protobuf field: uint64 tx_size_cost_per_byte = 3;
     */
    txSizeCostPerByte: string;
    /**
     * @generated from protobuf field: uint64 sig_verify_cost_ed25519 = 4;
     */
    sigVerifyCostEd25519: string;
    /**
     * @generated from protobuf field: uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1"];
     */
    sigVerifyCostSecp256K1: string;
}
declare class BaseAccount$Type extends MessageType<BaseAccount> {
    constructor();
    create(value?: PartialMessage<BaseAccount>): BaseAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BaseAccount): BaseAccount;
    internalBinaryWrite(message: BaseAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.BaseAccount
 */
export declare const BaseAccount: BaseAccount$Type;
declare class ModuleAccount$Type extends MessageType<ModuleAccount> {
    constructor();
    create(value?: PartialMessage<ModuleAccount>): ModuleAccount;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModuleAccount): ModuleAccount;
    internalBinaryWrite(message: ModuleAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.ModuleAccount
 */
export declare const ModuleAccount: ModuleAccount$Type;
declare class Params$Type extends MessageType<Params> {
    constructor();
    create(value?: PartialMessage<Params>): Params;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params;
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.Params
 */
export declare const Params: Params$Type;
export {};
