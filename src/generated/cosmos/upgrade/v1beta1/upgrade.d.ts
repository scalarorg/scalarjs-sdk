// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/upgrade/v1beta1/upgrade.proto" (package "cosmos.upgrade.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.Plan
 */
export interface Plan {
    /**
     * Sets the name for the upgrade. This name will be used by the upgraded
     * version of the software to apply any special "on-upgrade" commands during
     * the first BeginBlock method after the upgrade is applied. It is also used
     * to detect whether a software version can handle a given upgrade. If no
     * upgrade handler with this name has been set in the software, it will be
     * assumed that the software is out-of-date when the upgrade Time or Height is
     * reached and the software will exit.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
     * has been removed from the SDK.
     * If this field is not empty, an error will be thrown.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.Timestamp time = 2 [deprecated = true];
     */
    time?: Timestamp;
    /**
     * The height at which the upgrade must be performed.
     * Only used if Time is not set.
     *
     * @generated from protobuf field: int64 height = 3;
     */
    height: string;
    /**
     * Any application specific upgrade info to be included on-chain
     * such as a git commit that validators could automatically upgrade to
     *
     * @generated from protobuf field: string info = 4;
     */
    info: string;
    /**
     * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
     * moved to the IBC module in the sub module 02-client.
     * If this field is not empty, an error will be thrown.
     *
     * @deprecated
     * @generated from protobuf field: google.protobuf.Any upgraded_client_state = 5 [deprecated = true];
     */
    upgradedClientState?: Any;
}
/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 */
export interface SoftwareUpgradeProposal {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: cosmos.upgrade.v1beta1.Plan plan = 3;
     */
    plan?: Plan;
}
/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 */
export interface CancelSoftwareUpgradeProposal {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * ModuleVersion specifies a module and its consensus version.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.upgrade.v1beta1.ModuleVersion
 */
export interface ModuleVersion {
    /**
     * name of the app module
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * consensus version of the app module
     *
     * @generated from protobuf field: uint64 version = 2;
     */
    version: string;
}
declare class Plan$Type extends MessageType<Plan> {
    constructor();
    create(value?: PartialMessage<Plan>): Plan;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Plan): Plan;
    internalBinaryWrite(message: Plan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.Plan
 */
export declare const Plan: Plan$Type;
declare class SoftwareUpgradeProposal$Type extends MessageType<SoftwareUpgradeProposal> {
    constructor();
    create(value?: PartialMessage<SoftwareUpgradeProposal>): SoftwareUpgradeProposal;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoftwareUpgradeProposal): SoftwareUpgradeProposal;
    internalBinaryWrite(message: SoftwareUpgradeProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 */
export declare const SoftwareUpgradeProposal: SoftwareUpgradeProposal$Type;
declare class CancelSoftwareUpgradeProposal$Type extends MessageType<CancelSoftwareUpgradeProposal> {
    constructor();
    create(value?: PartialMessage<CancelSoftwareUpgradeProposal>): CancelSoftwareUpgradeProposal;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelSoftwareUpgradeProposal): CancelSoftwareUpgradeProposal;
    internalBinaryWrite(message: CancelSoftwareUpgradeProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 */
export declare const CancelSoftwareUpgradeProposal: CancelSoftwareUpgradeProposal$Type;
declare class ModuleVersion$Type extends MessageType<ModuleVersion> {
    constructor();
    create(value?: PartialMessage<ModuleVersion>): ModuleVersion;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModuleVersion): ModuleVersion;
    internalBinaryWrite(message: ModuleVersion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.upgrade.v1beta1.ModuleVersion
 */
export declare const ModuleVersion: ModuleVersion$Type;
export {};
