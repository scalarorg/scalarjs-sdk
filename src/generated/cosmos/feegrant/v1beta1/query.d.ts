// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/feegrant/v1beta1/query.proto" (package "cosmos.feegrant.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { PageRequest } from "../../base/query/v1beta1/pagination";
import { Grant } from "./feegrant";
/**
 * QueryAllowanceRequest is the request type for the Query/Allowance RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowanceRequest
 */
export interface QueryAllowanceRequest {
    /**
     * granter is the address of the user granting an allowance of their funds.
     *
     * @generated from protobuf field: string granter = 1;
     */
    granter: string;
    /**
     * grantee is the address of the user being granted an allowance of another user's funds.
     *
     * @generated from protobuf field: string grantee = 2;
     */
    grantee: string;
}
/**
 * QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowanceResponse
 */
export interface QueryAllowanceResponse {
    /**
     * allowance is a allowance granted for grantee by granter.
     *
     * @generated from protobuf field: cosmos.feegrant.v1beta1.Grant allowance = 1;
     */
    allowance?: Grant;
}
/**
 * QueryAllowancesRequest is the request type for the Query/Allowances RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowancesRequest
 */
export interface QueryAllowancesRequest {
    /**
     * @generated from protobuf field: string grantee = 1;
     */
    grantee: string;
    /**
     * pagination defines an pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowancesResponse
 */
export interface QueryAllowancesResponse {
    /**
     * allowances are allowance's granted for grantee by granter.
     *
     * @generated from protobuf field: repeated cosmos.feegrant.v1beta1.Grant allowances = 1;
     */
    allowances: Grant[];
    /**
     * pagination defines an pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryAllowancesByGranterRequest is the request type for the Query/AllowancesByGranter RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest
 */
export interface QueryAllowancesByGranterRequest {
    /**
     * @generated from protobuf field: string granter = 1;
     */
    granter: string;
    /**
     * pagination defines an pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse
 */
export interface QueryAllowancesByGranterResponse {
    /**
     * allowances that have been issued by the granter.
     *
     * @generated from protobuf field: repeated cosmos.feegrant.v1beta1.Grant allowances = 1;
     */
    allowances: Grant[];
    /**
     * pagination defines an pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
declare class QueryAllowanceRequest$Type extends MessageType<QueryAllowanceRequest> {
    constructor();
    create(value?: PartialMessage<QueryAllowanceRequest>): QueryAllowanceRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowanceRequest): QueryAllowanceRequest;
    internalBinaryWrite(message: QueryAllowanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowanceRequest
 */
export declare const QueryAllowanceRequest: QueryAllowanceRequest$Type;
declare class QueryAllowanceResponse$Type extends MessageType<QueryAllowanceResponse> {
    constructor();
    create(value?: PartialMessage<QueryAllowanceResponse>): QueryAllowanceResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowanceResponse): QueryAllowanceResponse;
    internalBinaryWrite(message: QueryAllowanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowanceResponse
 */
export declare const QueryAllowanceResponse: QueryAllowanceResponse$Type;
declare class QueryAllowancesRequest$Type extends MessageType<QueryAllowancesRequest> {
    constructor();
    create(value?: PartialMessage<QueryAllowancesRequest>): QueryAllowancesRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowancesRequest): QueryAllowancesRequest;
    internalBinaryWrite(message: QueryAllowancesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowancesRequest
 */
export declare const QueryAllowancesRequest: QueryAllowancesRequest$Type;
declare class QueryAllowancesResponse$Type extends MessageType<QueryAllowancesResponse> {
    constructor();
    create(value?: PartialMessage<QueryAllowancesResponse>): QueryAllowancesResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowancesResponse): QueryAllowancesResponse;
    internalBinaryWrite(message: QueryAllowancesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowancesResponse
 */
export declare const QueryAllowancesResponse: QueryAllowancesResponse$Type;
declare class QueryAllowancesByGranterRequest$Type extends MessageType<QueryAllowancesByGranterRequest> {
    constructor();
    create(value?: PartialMessage<QueryAllowancesByGranterRequest>): QueryAllowancesByGranterRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowancesByGranterRequest): QueryAllowancesByGranterRequest;
    internalBinaryWrite(message: QueryAllowancesByGranterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest
 */
export declare const QueryAllowancesByGranterRequest: QueryAllowancesByGranterRequest$Type;
declare class QueryAllowancesByGranterResponse$Type extends MessageType<QueryAllowancesByGranterResponse> {
    constructor();
    create(value?: PartialMessage<QueryAllowancesByGranterResponse>): QueryAllowancesByGranterResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllowancesByGranterResponse): QueryAllowancesByGranterResponse;
    internalBinaryWrite(message: QueryAllowancesByGranterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse
 */
export declare const QueryAllowancesByGranterResponse: QueryAllowancesByGranterResponse$Type;
/**
 * @generated ServiceType for protobuf service cosmos.feegrant.v1beta1.Query
 */
export declare const Query: any;
export {};
