// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/feegrant/v1beta1/feegrant.proto" (package "cosmos.feegrant.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Coin } from "../../base/v1beta1/coin";
/**
 * BasicAllowance implements Allowance with a one-time grant of tokens
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.BasicAllowance
 */
export interface BasicAllowance {
    /**
     * spend_limit specifies the maximum amount of tokens that can be spent
     * by this allowance and will be updated as tokens are spent. If it is
     * empty, there is no spend limit and any amount of coins can be spent.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin spend_limit = 1;
     */
    spendLimit: Coin[];
    /**
     * expiration specifies an optional time when this allowance expires
     *
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 2;
     */
    expiration?: Timestamp;
}
/**
 * PeriodicAllowance extends Allowance to allow for both a maximum cap,
 * as well as a limit per time period.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.PeriodicAllowance
 */
export interface PeriodicAllowance {
    /**
     * basic specifies a struct of `BasicAllowance`
     *
     * @generated from protobuf field: cosmos.feegrant.v1beta1.BasicAllowance basic = 1;
     */
    basic?: BasicAllowance;
    /**
     * period specifies the time duration in which period_spend_limit coins can
     * be spent before that allowance is reset
     *
     * @generated from protobuf field: google.protobuf.Duration period = 2;
     */
    period?: Duration;
    /**
     * period_spend_limit specifies the maximum number of coins that can be spent
     * in the period
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin period_spend_limit = 3;
     */
    periodSpendLimit: Coin[];
    /**
     * period_can_spend is the number of coins left to be spent before the period_reset time
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin period_can_spend = 4;
     */
    periodCanSpend: Coin[];
    /**
     * period_reset is the time at which this period resets and a new one begins,
     * it is calculated from the start time of the first transaction after the
     * last period ended
     *
     * @generated from protobuf field: google.protobuf.Timestamp period_reset = 5;
     */
    periodReset?: Timestamp;
}
/**
 * AllowedMsgAllowance creates allowance only for specified message types.
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.AllowedMsgAllowance
 */
export interface AllowedMsgAllowance {
    /**
     * allowance can be any of basic and filtered fee allowance.
     *
     * @generated from protobuf field: google.protobuf.Any allowance = 1;
     */
    allowance?: Any;
    /**
     * allowed_messages are the messages for which the grantee has the access.
     *
     * @generated from protobuf field: repeated string allowed_messages = 2;
     */
    allowedMessages: string[];
}
/**
 * Grant is stored in the KVStore to record a grant with full context
 *
 * @generated from protobuf message cosmos.feegrant.v1beta1.Grant
 */
export interface Grant {
    /**
     * granter is the address of the user granting an allowance of their funds.
     *
     * @generated from protobuf field: string granter = 1;
     */
    granter: string;
    /**
     * grantee is the address of the user being granted an allowance of another user's funds.
     *
     * @generated from protobuf field: string grantee = 2;
     */
    grantee: string;
    /**
     * allowance can be any of basic and filtered fee allowance.
     *
     * @generated from protobuf field: google.protobuf.Any allowance = 3;
     */
    allowance?: Any;
}
declare class BasicAllowance$Type extends MessageType<BasicAllowance> {
    constructor();
    create(value?: PartialMessage<BasicAllowance>): BasicAllowance;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BasicAllowance): BasicAllowance;
    internalBinaryWrite(message: BasicAllowance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.BasicAllowance
 */
export declare const BasicAllowance: BasicAllowance$Type;
declare class PeriodicAllowance$Type extends MessageType<PeriodicAllowance> {
    constructor();
    create(value?: PartialMessage<PeriodicAllowance>): PeriodicAllowance;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeriodicAllowance): PeriodicAllowance;
    internalBinaryWrite(message: PeriodicAllowance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.PeriodicAllowance
 */
export declare const PeriodicAllowance: PeriodicAllowance$Type;
declare class AllowedMsgAllowance$Type extends MessageType<AllowedMsgAllowance> {
    constructor();
    create(value?: PartialMessage<AllowedMsgAllowance>): AllowedMsgAllowance;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllowedMsgAllowance): AllowedMsgAllowance;
    internalBinaryWrite(message: AllowedMsgAllowance, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.AllowedMsgAllowance
 */
export declare const AllowedMsgAllowance: AllowedMsgAllowance$Type;
declare class Grant$Type extends MessageType<Grant> {
    constructor();
    create(value?: PartialMessage<Grant>): Grant;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Grant): Grant;
    internalBinaryWrite(message: Grant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.feegrant.v1beta1.Grant
 */
export declare const Grant: Grant$Type;
export {};
