// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/feegrant/v1beta1/query.proto" (package "cosmos.feegrant.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { QueryAllowancesByGranterResponse } from "./query";
import type { QueryAllowancesByGranterRequest } from "./query";
import type { QueryAllowancesResponse } from "./query";
import type { QueryAllowancesRequest } from "./query";
import type { QueryAllowanceResponse } from "./query";
import type { QueryAllowanceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.feegrant.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Allowance returns fee granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Allowance(cosmos.feegrant.v1beta1.QueryAllowanceRequest) returns (cosmos.feegrant.v1beta1.QueryAllowanceResponse);
     */
    allowance(input: QueryAllowanceRequest, options?: RpcOptions): UnaryCall<QueryAllowanceRequest, QueryAllowanceResponse>;
    /**
     * Allowances returns all the grants for address.
     *
     * @generated from protobuf rpc: Allowances(cosmos.feegrant.v1beta1.QueryAllowancesRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesResponse);
     */
    allowances(input: QueryAllowancesRequest, options?: RpcOptions): UnaryCall<QueryAllowancesRequest, QueryAllowancesResponse>;
    /**
     * AllowancesByGranter returns all the grants given by an address
     * Since v0.46
     *
     * @generated from protobuf rpc: AllowancesByGranter(cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse);
     */
    allowancesByGranter(input: QueryAllowancesByGranterRequest, options?: RpcOptions): UnaryCall<QueryAllowancesByGranterRequest, QueryAllowancesByGranterResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.feegrant.v1beta1.Query
 */
export declare class QueryClient implements IQueryClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * Allowance returns fee granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Allowance(cosmos.feegrant.v1beta1.QueryAllowanceRequest) returns (cosmos.feegrant.v1beta1.QueryAllowanceResponse);
     */
    allowance(input: QueryAllowanceRequest, options?: RpcOptions): UnaryCall<QueryAllowanceRequest, QueryAllowanceResponse>;
    /**
     * Allowances returns all the grants for address.
     *
     * @generated from protobuf rpc: Allowances(cosmos.feegrant.v1beta1.QueryAllowancesRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesResponse);
     */
    allowances(input: QueryAllowancesRequest, options?: RpcOptions): UnaryCall<QueryAllowancesRequest, QueryAllowancesResponse>;
    /**
     * AllowancesByGranter returns all the grants given by an address
     * Since v0.46
     *
     * @generated from protobuf rpc: AllowancesByGranter(cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse);
     */
    allowancesByGranter(input: QueryAllowancesByGranterRequest, options?: RpcOptions): UnaryCall<QueryAllowancesByGranterRequest, QueryAllowancesByGranterResponse>;
}
