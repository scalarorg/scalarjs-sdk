// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/feegrant/v1beta1/query.proto" (package "cosmos.feegrant.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.feegrant.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * Allowance returns fee granted to the grantee by the granter.
     *
     * @generated from protobuf rpc: Allowance(cosmos.feegrant.v1beta1.QueryAllowanceRequest) returns (cosmos.feegrant.v1beta1.QueryAllowanceResponse);
     */
    allowance(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Allowances returns all the grants for address.
     *
     * @generated from protobuf rpc: Allowances(cosmos.feegrant.v1beta1.QueryAllowancesRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesResponse);
     */
    allowances(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * AllowancesByGranter returns all the grants given by an address
     * Since v0.46
     *
     * @generated from protobuf rpc: AllowancesByGranter(cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest) returns (cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse);
     */
    allowancesByGranter(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
