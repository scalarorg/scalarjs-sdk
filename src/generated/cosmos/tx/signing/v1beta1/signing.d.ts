// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/tx/signing/v1beta1/signing.proto" (package "cosmos.tx.signing.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CompactBitArray } from "../../../crypto/multisig/v1beta1/multisig";
import { Any } from "../../../../google/protobuf/any";
/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export interface SignatureDescriptors {
    /**
     * signatures are the signature descriptors
     *
     * @generated from protobuf field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1;
     */
    signatures: SignatureDescriptor[];
}
/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export interface SignatureDescriptor {
    /**
     * public_key is the public key of the signer
     *
     * @generated from protobuf field: google.protobuf.Any public_key = 1;
     */
    publicKey?: Any;
    /**
     * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2;
     */
    data?: SignatureDescriptor_Data;
    /**
     * sequence is the sequence of the account, which describes the
     * number of committed transactions signed by a given address. It is used to prevent
     * replay attacks.
     *
     * @generated from protobuf field: uint64 sequence = 3;
     */
    sequence: string;
}
/**
 * Data represents signature data
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export interface SignatureDescriptor_Data {
    /**
     * @generated from protobuf oneof: sum
     */
    sum: {
        oneofKind: "single";
        /**
         * single represents a single signer
         *
         * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
         */
        single: SignatureDescriptor_Data_Single;
    } | {
        oneofKind: "multi";
        /**
         * multi represents a multisig signer
         *
         * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
         */
        multi: SignatureDescriptor_Data_Multi;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Single is the signature data for a single signer
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export interface SignatureDescriptor_Data_Single {
    /**
     * mode is the signing mode of the single signer
     *
     * @generated from protobuf field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
     */
    mode: SignMode;
    /**
     * signature is the raw signature bytes
     *
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
}
/**
 * Multi is the signature data for a multisig public key
 *
 * @generated from protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export interface SignatureDescriptor_Data_Multi {
    /**
     * bitarray specifies which keys within the multisig are signing
     *
     * @generated from protobuf field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
     */
    bitarray?: CompactBitArray;
    /**
     * signatures is the signatures of the multi-signature
     *
     * @generated from protobuf field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
     */
    signatures: SignatureDescriptor_Data[];
}
/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * @generated from protobuf enum cosmos.tx.signing.v1beta1.SignMode
 */
export declare enum SignMode {
    /**
     * SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
     * rejected
     *
     * @generated from protobuf enum value: SIGN_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
     * verified with raw bytes from Tx
     *
     * @generated from protobuf enum value: SIGN_MODE_DIRECT = 1;
     */
    DIRECT = 1,
    /**
     * SIGN_MODE_TEXTUAL is a future signing mode that will verify some
     * human-readable textual representation on top of the binary representation
     * from SIGN_MODE_DIRECT
     *
     * @generated from protobuf enum value: SIGN_MODE_TEXTUAL = 2;
     */
    TEXTUAL = 2,
    /**
     * SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
     * Amino JSON and will be removed in the future
     *
     * @generated from protobuf enum value: SIGN_MODE_LEGACY_AMINO_JSON = 127;
     */
    LEGACY_AMINO_JSON = 127,
    /**
     * SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
     * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
     *
     * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
     * but is not implemented on the SDK by default. To enable EIP-191, you need
     * to pass a custom `TxConfig` that has an implementation of
     * `SignModeHandler` for EIP-191. The SDK may decide to fully support
     * EIP-191 in the future.
     *
     * Since: cosmos-sdk 0.45.2
     *
     * @generated from protobuf enum value: SIGN_MODE_EIP_191 = 191;
     */
    EIP_191 = 191
}
declare class SignatureDescriptors$Type extends MessageType<SignatureDescriptors> {
    constructor();
    create(value?: PartialMessage<SignatureDescriptors>): SignatureDescriptors;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptors): SignatureDescriptors;
    internalBinaryWrite(message: SignatureDescriptors, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export declare const SignatureDescriptors: SignatureDescriptors$Type;
declare class SignatureDescriptor$Type extends MessageType<SignatureDescriptor> {
    constructor();
    create(value?: PartialMessage<SignatureDescriptor>): SignatureDescriptor;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor): SignatureDescriptor;
    internalBinaryWrite(message: SignatureDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export declare const SignatureDescriptor: SignatureDescriptor$Type;
declare class SignatureDescriptor_Data$Type extends MessageType<SignatureDescriptor_Data> {
    constructor();
    create(value?: PartialMessage<SignatureDescriptor_Data>): SignatureDescriptor_Data;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data): SignatureDescriptor_Data;
    internalBinaryWrite(message: SignatureDescriptor_Data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export declare const SignatureDescriptor_Data: SignatureDescriptor_Data$Type;
declare class SignatureDescriptor_Data_Single$Type extends MessageType<SignatureDescriptor_Data_Single> {
    constructor();
    create(value?: PartialMessage<SignatureDescriptor_Data_Single>): SignatureDescriptor_Data_Single;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data_Single): SignatureDescriptor_Data_Single;
    internalBinaryWrite(message: SignatureDescriptor_Data_Single, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export declare const SignatureDescriptor_Data_Single: SignatureDescriptor_Data_Single$Type;
declare class SignatureDescriptor_Data_Multi$Type extends MessageType<SignatureDescriptor_Data_Multi> {
    constructor();
    create(value?: PartialMessage<SignatureDescriptor_Data_Multi>): SignatureDescriptor_Data_Multi;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureDescriptor_Data_Multi): SignatureDescriptor_Data_Multi;
    internalBinaryWrite(message: SignatureDescriptor_Data_Multi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export declare const SignatureDescriptor_Data_Multi: SignatureDescriptor_Data_Multi$Type;
export {};
