// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/tx/v1beta1/service.proto" (package "cosmos.tx.v1beta1", syntax proto3)
// tslint:disable
import { Service } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Service defines a gRPC service for interacting with transactions.
 *
 * @generated from protobuf service cosmos.tx.v1beta1.Service
 */
export class ServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Service.typeName;
        this.methods = Service.methods;
        this.options = Service.options;
    }
    /**
     * Simulate simulates executing a transaction for estimating gas usage.
     *
     * @generated from protobuf rpc: Simulate(cosmos.tx.v1beta1.SimulateRequest) returns (cosmos.tx.v1beta1.SimulateResponse);
     */
    simulate(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetTx fetches a tx by hash.
     *
     * @generated from protobuf rpc: GetTx(cosmos.tx.v1beta1.GetTxRequest) returns (cosmos.tx.v1beta1.GetTxResponse);
     */
    getTx(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * BroadcastTx broadcast transaction.
     *
     * @generated from protobuf rpc: BroadcastTx(cosmos.tx.v1beta1.BroadcastTxRequest) returns (cosmos.tx.v1beta1.BroadcastTxResponse);
     */
    broadcastTx(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetTxsEvent fetches txs by event.
     *
     * @generated from protobuf rpc: GetTxsEvent(cosmos.tx.v1beta1.GetTxsEventRequest) returns (cosmos.tx.v1beta1.GetTxsEventResponse);
     */
    getTxsEvent(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * GetBlockWithTxs fetches a block with decoded txs.
     *
     * Since: cosmos-sdk 0.45.2
     *
     * @generated from protobuf rpc: GetBlockWithTxs(cosmos.tx.v1beta1.GetBlockWithTxsRequest) returns (cosmos.tx.v1beta1.GetBlockWithTxsResponse);
     */
    getBlockWithTxs(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
