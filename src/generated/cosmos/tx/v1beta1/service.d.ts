// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/tx/v1beta1/service.proto" (package "cosmos.tx.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Block } from "../../../tendermint/types/block";
import { BlockID } from "../../../tendermint/types/types";
import { Result } from "../../base/abci/v1beta1/abci";
import { GasInfo } from "../../base/abci/v1beta1/abci";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { TxResponse } from "../../base/abci/v1beta1/abci";
import { Tx } from "./tx";
import { PageRequest } from "../../base/query/v1beta1/pagination";
/**
 * GetTxsEventRequest is the request type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export interface GetTxsEventRequest {
    /**
     * events is the list of transaction event type.
     *
     * @generated from protobuf field: repeated string events = 1;
     */
    events: string[];
    /**
     * pagination defines a pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
    /**
     * @generated from protobuf field: cosmos.tx.v1beta1.OrderBy order_by = 3;
     */
    orderBy: OrderBy;
}
/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export interface GetTxsEventResponse {
    /**
     * txs is the list of queried transactions.
     *
     * @generated from protobuf field: repeated cosmos.tx.v1beta1.Tx txs = 1;
     */
    txs: Tx[];
    /**
     * tx_responses is the list of queried TxResponses.
     *
     * @generated from protobuf field: repeated cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;
     */
    txResponses: TxResponse[];
    /**
     * pagination defines a pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
     */
    pagination?: PageResponse;
}
/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export interface BroadcastTxRequest {
    /**
     * tx_bytes is the raw transaction.
     *
     * @generated from protobuf field: bytes tx_bytes = 1;
     */
    txBytes: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.tx.v1beta1.BroadcastMode mode = 2;
     */
    mode: BroadcastMode;
}
/**
 * BroadcastTxResponse is the response type for the
 * Service.BroadcastTx method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export interface BroadcastTxResponse {
    /**
     * tx_response is the queried TxResponses.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
     */
    txResponse?: TxResponse;
}
/**
 * SimulateRequest is the request type for the Service.Simulate
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.SimulateRequest
 */
export interface SimulateRequest {
    /**
     * tx is the transaction to simulate.
     * Deprecated. Send raw tx bytes instead.
     *
     * @deprecated
     * @generated from protobuf field: cosmos.tx.v1beta1.Tx tx = 1 [deprecated = true];
     */
    tx?: Tx;
    /**
     * tx_bytes is the raw transaction.
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf field: bytes tx_bytes = 2;
     */
    txBytes: Uint8Array;
}
/**
 * SimulateResponse is the response type for the
 * Service.SimulateRPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.SimulateResponse
 */
export interface SimulateResponse {
    /**
     * gas_info is the information about gas used in the simulation.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
     */
    gasInfo?: GasInfo;
    /**
     * result is the result of the simulation.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.Result result = 2;
     */
    result?: Result;
}
/**
 * GetTxRequest is the request type for the Service.GetTx
 * RPC method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxRequest
 */
export interface GetTxRequest {
    /**
     * hash is the tx hash to query, encoded as a hex string.
     *
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
}
/**
 * GetTxResponse is the response type for the Service.GetTx method.
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetTxResponse
 */
export interface GetTxResponse {
    /**
     * tx is the queried transaction.
     *
     * @generated from protobuf field: cosmos.tx.v1beta1.Tx tx = 1;
     */
    tx?: Tx;
    /**
     * tx_response is the queried TxResponses.
     *
     * @generated from protobuf field: cosmos.base.abci.v1beta1.TxResponse tx_response = 2;
     */
    txResponse?: TxResponse;
}
/**
 * GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
 * RPC method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export interface GetBlockWithTxsRequest {
    /**
     * height is the height of the block to query.
     *
     * @generated from protobuf field: int64 height = 1;
     */
    height: string;
    /**
     * pagination defines a pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
 *
 * Since: cosmos-sdk 0.45.2
 *
 * @generated from protobuf message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export interface GetBlockWithTxsResponse {
    /**
     * txs are the transactions in the block.
     *
     * @generated from protobuf field: repeated cosmos.tx.v1beta1.Tx txs = 1;
     */
    txs: Tx[];
    /**
     * @generated from protobuf field: tendermint.types.BlockID block_id = 2;
     */
    blockId?: BlockID;
    /**
     * @generated from protobuf field: tendermint.types.Block block = 3;
     */
    block?: Block;
    /**
     * pagination defines a pagination for the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 4;
     */
    pagination?: PageResponse;
}
/**
 * OrderBy defines the sorting order
 *
 * @generated from protobuf enum cosmos.tx.v1beta1.OrderBy
 */
export declare enum OrderBy {
    /**
     * ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
     *
     * @generated from protobuf enum value: ORDER_BY_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * ORDER_BY_ASC defines ascending order
     *
     * @generated from protobuf enum value: ORDER_BY_ASC = 1;
     */
    ASC = 1,
    /**
     * ORDER_BY_DESC defines descending order
     *
     * @generated from protobuf enum value: ORDER_BY_DESC = 2;
     */
    DESC = 2
}
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
 *
 * @generated from protobuf enum cosmos.tx.v1beta1.BroadcastMode
 */
export declare enum BroadcastMode {
    /**
     * zero-value for mode ordering
     *
     * @generated from protobuf enum value: BROADCAST_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
     * the tx to be committed in a block.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_BLOCK = 1;
     */
    BLOCK = 1,
    /**
     * BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
     * a CheckTx execution response only.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_SYNC = 2;
     */
    SYNC = 2,
    /**
     * BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
     * immediately.
     *
     * @generated from protobuf enum value: BROADCAST_MODE_ASYNC = 3;
     */
    ASYNC = 3
}
declare class GetTxsEventRequest$Type extends MessageType<GetTxsEventRequest> {
    constructor();
    create(value?: PartialMessage<GetTxsEventRequest>): GetTxsEventRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxsEventRequest): GetTxsEventRequest;
    internalBinaryWrite(message: GetTxsEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxsEventRequest
 */
export declare const GetTxsEventRequest: GetTxsEventRequest$Type;
declare class GetTxsEventResponse$Type extends MessageType<GetTxsEventResponse> {
    constructor();
    create(value?: PartialMessage<GetTxsEventResponse>): GetTxsEventResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxsEventResponse): GetTxsEventResponse;
    internalBinaryWrite(message: GetTxsEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxsEventResponse
 */
export declare const GetTxsEventResponse: GetTxsEventResponse$Type;
declare class BroadcastTxRequest$Type extends MessageType<BroadcastTxRequest> {
    constructor();
    create(value?: PartialMessage<BroadcastTxRequest>): BroadcastTxRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastTxRequest): BroadcastTxRequest;
    internalBinaryWrite(message: BroadcastTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.BroadcastTxRequest
 */
export declare const BroadcastTxRequest: BroadcastTxRequest$Type;
declare class BroadcastTxResponse$Type extends MessageType<BroadcastTxResponse> {
    constructor();
    create(value?: PartialMessage<BroadcastTxResponse>): BroadcastTxResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BroadcastTxResponse): BroadcastTxResponse;
    internalBinaryWrite(message: BroadcastTxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.BroadcastTxResponse
 */
export declare const BroadcastTxResponse: BroadcastTxResponse$Type;
declare class SimulateRequest$Type extends MessageType<SimulateRequest> {
    constructor();
    create(value?: PartialMessage<SimulateRequest>): SimulateRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulateRequest): SimulateRequest;
    internalBinaryWrite(message: SimulateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.SimulateRequest
 */
export declare const SimulateRequest: SimulateRequest$Type;
declare class SimulateResponse$Type extends MessageType<SimulateResponse> {
    constructor();
    create(value?: PartialMessage<SimulateResponse>): SimulateResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimulateResponse): SimulateResponse;
    internalBinaryWrite(message: SimulateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.SimulateResponse
 */
export declare const SimulateResponse: SimulateResponse$Type;
declare class GetTxRequest$Type extends MessageType<GetTxRequest> {
    constructor();
    create(value?: PartialMessage<GetTxRequest>): GetTxRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxRequest): GetTxRequest;
    internalBinaryWrite(message: GetTxRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxRequest
 */
export declare const GetTxRequest: GetTxRequest$Type;
declare class GetTxResponse$Type extends MessageType<GetTxResponse> {
    constructor();
    create(value?: PartialMessage<GetTxResponse>): GetTxResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTxResponse): GetTxResponse;
    internalBinaryWrite(message: GetTxResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetTxResponse
 */
export declare const GetTxResponse: GetTxResponse$Type;
declare class GetBlockWithTxsRequest$Type extends MessageType<GetBlockWithTxsRequest> {
    constructor();
    create(value?: PartialMessage<GetBlockWithTxsRequest>): GetBlockWithTxsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlockWithTxsRequest): GetBlockWithTxsRequest;
    internalBinaryWrite(message: GetBlockWithTxsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetBlockWithTxsRequest
 */
export declare const GetBlockWithTxsRequest: GetBlockWithTxsRequest$Type;
declare class GetBlockWithTxsResponse$Type extends MessageType<GetBlockWithTxsResponse> {
    constructor();
    create(value?: PartialMessage<GetBlockWithTxsResponse>): GetBlockWithTxsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBlockWithTxsResponse): GetBlockWithTxsResponse;
    internalBinaryWrite(message: GetBlockWithTxsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.tx.v1beta1.GetBlockWithTxsResponse
 */
export declare const GetBlockWithTxsResponse: GetBlockWithTxsResponse$Type;
/**
 * @generated ServiceType for protobuf service cosmos.tx.v1beta1.Service
 */
export declare const Service: any;
export {};
