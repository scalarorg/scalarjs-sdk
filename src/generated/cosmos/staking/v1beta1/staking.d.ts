// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/staking.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { Any } from "../../../google/protobuf/any";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Header } from "../../../tendermint/types/types";
/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from protobuf message cosmos.staking.v1beta1.HistoricalInfo
 */
export interface HistoricalInfo {
    /**
     * @generated from protobuf field: tendermint.types.Header header = 1;
     */
    header?: Header;
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.Validator valset = 2;
     */
    valset: Validator[];
}
/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.CommissionRates
 */
export interface CommissionRates {
    /**
     * rate is the commission rate charged to delegators, as a fraction.
     *
     * @generated from protobuf field: string rate = 1;
     */
    rate: string;
    /**
     * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
     *
     * @generated from protobuf field: string max_rate = 2;
     */
    maxRate: string;
    /**
     * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
     *
     * @generated from protobuf field: string max_change_rate = 3;
     */
    maxChangeRate: string;
}
/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Commission
 */
export interface Commission {
    /**
     * commission_rates defines the initial commission rates to be used for creating a validator.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.CommissionRates commission_rates = 1;
     */
    commissionRates?: CommissionRates;
    /**
     * update_time is the last time the commission rate was changed.
     *
     * @generated from protobuf field: google.protobuf.Timestamp update_time = 2;
     */
    updateTime?: Timestamp;
}
/**
 * Description defines a validator description.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Description
 */
export interface Description {
    /**
     * moniker defines a human-readable name for the validator.
     *
     * @generated from protobuf field: string moniker = 1;
     */
    moniker: string;
    /**
     * identity defines an optional identity signature (ex. UPort or Keybase).
     *
     * @generated from protobuf field: string identity = 2;
     */
    identity: string;
    /**
     * website defines an optional website link.
     *
     * @generated from protobuf field: string website = 3;
     */
    website: string;
    /**
     * security_contact defines an optional email for security contact.
     *
     * @generated from protobuf field: string security_contact = 4;
     */
    securityContact: string;
    /**
     * details define other optional details.
     *
     * @generated from protobuf field: string details = 5;
     */
    details: string;
}
/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Validator
 */
export interface Validator {
    /**
     * operator_address defines the address of the validator's operator; bech encoded in JSON.
     *
     * @generated from protobuf field: string operator_address = 1;
     */
    operatorAddress: string;
    /**
     * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
     *
     * @generated from protobuf field: google.protobuf.Any consensus_pubkey = 2;
     */
    consensusPubkey?: Any;
    /**
     * jailed defined whether the validator has been jailed from bonded status or not.
     *
     * @generated from protobuf field: bool jailed = 3;
     */
    jailed: boolean;
    /**
     * status is the validator status (bonded/unbonding/unbonded).
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.BondStatus status = 4;
     */
    status: BondStatus;
    /**
     * tokens define the delegated tokens (incl. self-delegation).
     *
     * @generated from protobuf field: string tokens = 5;
     */
    tokens: string;
    /**
     * delegator_shares defines total shares issued to a validator's delegators.
     *
     * @generated from protobuf field: string delegator_shares = 6;
     */
    delegatorShares: string;
    /**
     * description defines the description terms for the validator.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.Description description = 7;
     */
    description?: Description;
    /**
     * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
     *
     * @generated from protobuf field: int64 unbonding_height = 8;
     */
    unbondingHeight: string;
    /**
     * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
     *
     * @generated from protobuf field: google.protobuf.Timestamp unbonding_time = 9;
     */
    unbondingTime?: Timestamp;
    /**
     * commission defines the commission parameters.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.Commission commission = 10;
     */
    commission?: Commission;
    /**
     * min_self_delegation is the validator's self declared minimum self delegation.
     *
     * @generated from protobuf field: string min_self_delegation = 11;
     */
    minSelfDelegation: string;
}
/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.ValAddresses
 */
export interface ValAddresses {
    /**
     * @generated from protobuf field: repeated string addresses = 1;
     */
    addresses: string[];
}
/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVPair
 */
export interface DVPair {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
}
/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVPairs
 */
export interface DVPairs {
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.DVPair pairs = 1;
     */
    pairs: DVPair[];
}
/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVVTriplet
 */
export interface DVVTriplet {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_src_address = 2;
     */
    validatorSrcAddress: string;
    /**
     * @generated from protobuf field: string validator_dst_address = 3;
     */
    validatorDstAddress: string;
}
/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DVVTriplets
 */
export interface DVVTriplets {
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1;
     */
    triplets: DVVTriplet[];
}
/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Delegation
 */
export interface Delegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     *
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * shares define the delegation shares received.
     *
     * @generated from protobuf field: string shares = 3;
     */
    shares: string;
}
/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.UnbondingDelegation
 */
export interface UnbondingDelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     *
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * entries are the unbonding delegation entries.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3;
     */
    entries: UnbondingDelegationEntry[];
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export interface UnbondingDelegationEntry {
    /**
     * creation_height is the height which the unbonding took place.
     *
     * @generated from protobuf field: int64 creation_height = 1;
     */
    creationHeight: string;
    /**
     * completion_time is the unix time for unbonding completion.
     *
     * @generated from protobuf field: google.protobuf.Timestamp completion_time = 2;
     */
    completionTime?: Timestamp;
    /**
     * initial_balance defines the tokens initially scheduled to receive at completion.
     *
     * @generated from protobuf field: string initial_balance = 3;
     */
    initialBalance: string;
    /**
     * balance defines the tokens to receive at completion.
     *
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationEntry
 */
export interface RedelegationEntry {
    /**
     * creation_height  defines the height which the redelegation took place.
     *
     * @generated from protobuf field: int64 creation_height = 1;
     */
    creationHeight: string;
    /**
     * completion_time defines the unix time for redelegation completion.
     *
     * @generated from protobuf field: google.protobuf.Timestamp completion_time = 2;
     */
    completionTime?: Timestamp;
    /**
     * initial_balance defines the initial balance when redelegation started.
     *
     * @generated from protobuf field: string initial_balance = 3;
     */
    initialBalance: string;
    /**
     * shares_dst is the amount of destination-validator shares created by redelegation.
     *
     * @generated from protobuf field: string shares_dst = 4;
     */
    sharesDst: string;
}
/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Redelegation
 */
export interface Redelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_src_address is the validator redelegation source operator address.
     *
     * @generated from protobuf field: string validator_src_address = 2;
     */
    validatorSrcAddress: string;
    /**
     * validator_dst_address is the validator redelegation destination operator address.
     *
     * @generated from protobuf field: string validator_dst_address = 3;
     */
    validatorDstAddress: string;
    /**
     * entries are the redelegation entries.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4;
     */
    entries: RedelegationEntry[];
}
/**
 * Params defines the parameters for the staking module.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Params
 */
export interface Params {
    /**
     * unbonding_time is the time duration of unbonding.
     *
     * @generated from protobuf field: google.protobuf.Duration unbonding_time = 1;
     */
    unbondingTime?: Duration;
    /**
     * max_validators is the maximum number of validators.
     *
     * @generated from protobuf field: uint32 max_validators = 2;
     */
    maxValidators: number;
    /**
     * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
     *
     * @generated from protobuf field: uint32 max_entries = 3;
     */
    maxEntries: number;
    /**
     * historical_entries is the number of historical entries to persist.
     *
     * @generated from protobuf field: uint32 historical_entries = 4;
     */
    historicalEntries: number;
    /**
     * bond_denom defines the bondable coin denomination.
     *
     * @generated from protobuf field: string bond_denom = 5;
     */
    bondDenom: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.DelegationResponse
 */
export interface DelegationResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.Delegation delegation = 1;
     */
    delegation?: Delegation;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin balance = 2;
     */
    balance?: Coin;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export interface RedelegationEntryResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1;
     */
    redelegationEntry?: RedelegationEntry;
    /**
     * @generated from protobuf field: string balance = 4;
     */
    balance: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.RedelegationResponse
 */
export interface RedelegationResponse {
    /**
     * @generated from protobuf field: cosmos.staking.v1beta1.Redelegation redelegation = 1;
     */
    redelegation?: Redelegation;
    /**
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2;
     */
    entries: RedelegationEntryResponse[];
}
/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.Pool
 */
export interface Pool {
    /**
     * @generated from protobuf field: string not_bonded_tokens = 1;
     */
    notBondedTokens: string;
    /**
     * @generated from protobuf field: string bonded_tokens = 2;
     */
    bondedTokens: string;
}
/**
 * BondStatus is the status of a validator.
 *
 * @generated from protobuf enum cosmos.staking.v1beta1.BondStatus
 */
export declare enum BondStatus {
    /**
     * UNSPECIFIED defines an invalid validator status.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * UNBONDED defines a validator that is not bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDED = 1;
     */
    UNBONDED = 1,
    /**
     * UNBONDING defines a validator that is unbonding.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDING = 2;
     */
    UNBONDING = 2,
    /**
     * BONDED defines a validator that is bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_BONDED = 3;
     */
    BONDED = 3
}
declare class HistoricalInfo$Type extends MessageType<HistoricalInfo> {
    constructor();
    create(value?: PartialMessage<HistoricalInfo>): HistoricalInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoricalInfo): HistoricalInfo;
    internalBinaryWrite(message: HistoricalInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.HistoricalInfo
 */
export declare const HistoricalInfo: HistoricalInfo$Type;
declare class CommissionRates$Type extends MessageType<CommissionRates> {
    constructor();
    create(value?: PartialMessage<CommissionRates>): CommissionRates;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommissionRates): CommissionRates;
    internalBinaryWrite(message: CommissionRates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.CommissionRates
 */
export declare const CommissionRates: CommissionRates$Type;
declare class Commission$Type extends MessageType<Commission> {
    constructor();
    create(value?: PartialMessage<Commission>): Commission;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Commission): Commission;
    internalBinaryWrite(message: Commission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Commission
 */
export declare const Commission: Commission$Type;
declare class Description$Type extends MessageType<Description> {
    constructor();
    create(value?: PartialMessage<Description>): Description;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Description): Description;
    internalBinaryWrite(message: Description, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Description
 */
export declare const Description: Description$Type;
declare class Validator$Type extends MessageType<Validator> {
    constructor();
    create(value?: PartialMessage<Validator>): Validator;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Validator): Validator;
    internalBinaryWrite(message: Validator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Validator
 */
export declare const Validator: Validator$Type;
declare class ValAddresses$Type extends MessageType<ValAddresses> {
    constructor();
    create(value?: PartialMessage<ValAddresses>): ValAddresses;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValAddresses): ValAddresses;
    internalBinaryWrite(message: ValAddresses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.ValAddresses
 */
export declare const ValAddresses: ValAddresses$Type;
declare class DVPair$Type extends MessageType<DVPair> {
    constructor();
    create(value?: PartialMessage<DVPair>): DVPair;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVPair): DVPair;
    internalBinaryWrite(message: DVPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPair
 */
export declare const DVPair: DVPair$Type;
declare class DVPairs$Type extends MessageType<DVPairs> {
    constructor();
    create(value?: PartialMessage<DVPairs>): DVPairs;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVPairs): DVPairs;
    internalBinaryWrite(message: DVPairs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPairs
 */
export declare const DVPairs: DVPairs$Type;
declare class DVVTriplet$Type extends MessageType<DVVTriplet> {
    constructor();
    create(value?: PartialMessage<DVVTriplet>): DVVTriplet;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVVTriplet): DVVTriplet;
    internalBinaryWrite(message: DVVTriplet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplet
 */
export declare const DVVTriplet: DVVTriplet$Type;
declare class DVVTriplets$Type extends MessageType<DVVTriplets> {
    constructor();
    create(value?: PartialMessage<DVVTriplets>): DVVTriplets;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DVVTriplets): DVVTriplets;
    internalBinaryWrite(message: DVVTriplets, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplets
 */
export declare const DVVTriplets: DVVTriplets$Type;
declare class Delegation$Type extends MessageType<Delegation> {
    constructor();
    create(value?: PartialMessage<Delegation>): Delegation;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Delegation): Delegation;
    internalBinaryWrite(message: Delegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Delegation
 */
export declare const Delegation: Delegation$Type;
declare class UnbondingDelegation$Type extends MessageType<UnbondingDelegation> {
    constructor();
    create(value?: PartialMessage<UnbondingDelegation>): UnbondingDelegation;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnbondingDelegation): UnbondingDelegation;
    internalBinaryWrite(message: UnbondingDelegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegation
 */
export declare const UnbondingDelegation: UnbondingDelegation$Type;
declare class UnbondingDelegationEntry$Type extends MessageType<UnbondingDelegationEntry> {
    constructor();
    create(value?: PartialMessage<UnbondingDelegationEntry>): UnbondingDelegationEntry;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnbondingDelegationEntry): UnbondingDelegationEntry;
    internalBinaryWrite(message: UnbondingDelegationEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export declare const UnbondingDelegationEntry: UnbondingDelegationEntry$Type;
declare class RedelegationEntry$Type extends MessageType<RedelegationEntry> {
    constructor();
    create(value?: PartialMessage<RedelegationEntry>): RedelegationEntry;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationEntry): RedelegationEntry;
    internalBinaryWrite(message: RedelegationEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntry
 */
export declare const RedelegationEntry: RedelegationEntry$Type;
declare class Redelegation$Type extends MessageType<Redelegation> {
    constructor();
    create(value?: PartialMessage<Redelegation>): Redelegation;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Redelegation): Redelegation;
    internalBinaryWrite(message: Redelegation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Redelegation
 */
export declare const Redelegation: Redelegation$Type;
declare class Params$Type extends MessageType<Params> {
    constructor();
    create(value?: PartialMessage<Params>): Params;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params;
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Params
 */
export declare const Params: Params$Type;
declare class DelegationResponse$Type extends MessageType<DelegationResponse> {
    constructor();
    create(value?: PartialMessage<DelegationResponse>): DelegationResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelegationResponse): DelegationResponse;
    internalBinaryWrite(message: DelegationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DelegationResponse
 */
export declare const DelegationResponse: DelegationResponse$Type;
declare class RedelegationEntryResponse$Type extends MessageType<RedelegationEntryResponse> {
    constructor();
    create(value?: PartialMessage<RedelegationEntryResponse>): RedelegationEntryResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationEntryResponse): RedelegationEntryResponse;
    internalBinaryWrite(message: RedelegationEntryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export declare const RedelegationEntryResponse: RedelegationEntryResponse$Type;
declare class RedelegationResponse$Type extends MessageType<RedelegationResponse> {
    constructor();
    create(value?: PartialMessage<RedelegationResponse>): RedelegationResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedelegationResponse): RedelegationResponse;
    internalBinaryWrite(message: RedelegationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationResponse
 */
export declare const RedelegationResponse: RedelegationResponse$Type;
declare class Pool$Type extends MessageType<Pool> {
    constructor();
    create(value?: PartialMessage<Pool>): Pool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pool): Pool;
    internalBinaryWrite(message: Pool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Pool
 */
export declare const Pool: Pool$Type;
export {};
