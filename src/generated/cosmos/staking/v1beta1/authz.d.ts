// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/authz.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.staking.v1beta1.StakeAuthorization
 */
export interface StakeAuthorization {
    /**
     * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
     * empty, there is no spend limit and any amount of coins can be delegated.
     *
     * @generated from protobuf field: cosmos.base.v1beta1.Coin max_tokens = 1;
     */
    maxTokens?: Coin;
    /**
     * @generated from protobuf oneof: validators
     */
    validators: {
        oneofKind: "allowList";
        /**
         * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
         * account.
         *
         * @generated from protobuf field: cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;
         */
        allowList: StakeAuthorization_Validators;
    } | {
        oneofKind: "denyList";
        /**
         * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
         *
         * @generated from protobuf field: cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;
         */
        denyList: StakeAuthorization_Validators;
    } | {
        oneofKind: undefined;
    };
    /**
     * authorization_type defines one of AuthorizationType.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;
     */
    authorizationType: AuthorizationType;
}
/**
 * Validators defines list of validator addresses.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export interface StakeAuthorization_Validators {
    /**
     * @generated from protobuf field: repeated string address = 1;
     */
    address: string[];
}
/**
 * AuthorizationType defines the type of staking module authorization type
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf enum cosmos.staking.v1beta1.AuthorizationType
 */
export declare enum AuthorizationType {
    /**
     * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_DELEGATE = 1;
     */
    DELEGATE = 1,
    /**
     * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_UNDELEGATE = 2;
     */
    UNDELEGATE = 2,
    /**
     * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
     *
     * @generated from protobuf enum value: AUTHORIZATION_TYPE_REDELEGATE = 3;
     */
    REDELEGATE = 3
}
declare class StakeAuthorization$Type extends MessageType<StakeAuthorization> {
    constructor();
    create(value?: PartialMessage<StakeAuthorization>): StakeAuthorization;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StakeAuthorization): StakeAuthorization;
    internalBinaryWrite(message: StakeAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.StakeAuthorization
 */
export declare const StakeAuthorization: StakeAuthorization$Type;
declare class StakeAuthorization_Validators$Type extends MessageType<StakeAuthorization_Validators> {
    constructor();
    create(value?: PartialMessage<StakeAuthorization_Validators>): StakeAuthorization_Validators;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StakeAuthorization_Validators): StakeAuthorization_Validators;
    internalBinaryWrite(message: StakeAuthorization_Validators, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export declare const StakeAuthorization_Validators: StakeAuthorization_Validators$Type;
export {};
