// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/staking.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { Any } from "../../../google/protobuf/any";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Header } from "../../../tendermint/types/types";
/**
 * BondStatus is the status of a validator.
 *
 * @generated from protobuf enum cosmos.staking.v1beta1.BondStatus
 */
export var BondStatus;
(function (BondStatus) {
    /**
     * UNSPECIFIED defines an invalid validator status.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNSPECIFIED = 0;
     */
    BondStatus[BondStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * UNBONDED defines a validator that is not bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDED = 1;
     */
    BondStatus[BondStatus["UNBONDED"] = 1] = "UNBONDED";
    /**
     * UNBONDING defines a validator that is unbonding.
     *
     * @generated from protobuf enum value: BOND_STATUS_UNBONDING = 2;
     */
    BondStatus[BondStatus["UNBONDING"] = 2] = "UNBONDING";
    /**
     * BONDED defines a validator that is bonded.
     *
     * @generated from protobuf enum value: BOND_STATUS_BONDED = 3;
     */
    BondStatus[BondStatus["BONDED"] = 3] = "BONDED";
})(BondStatus || (BondStatus = {}));
// @generated message type with reflection information, may provide speed optimized methods
class HistoricalInfo$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.HistoricalInfo", [
            { no: 1, name: "header", kind: "message", T: () => Header, options: { "gogoproto.nullable": false } },
            { no: 2, name: "valset", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.valset = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.Header header */ 1:
                    message.header = Header.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated cosmos.staking.v1beta1.Validator valset */ 2:
                    message.valset.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.types.Header header = 1; */
        if (message.header)
            Header.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.Validator valset = 2; */
        for (let i = 0; i < message.valset.length; i++)
            Validator.internalBinaryWrite(message.valset[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.HistoricalInfo
 */
export const HistoricalInfo = new HistoricalInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommissionRates$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.CommissionRates", [
            { no: 1, name: "rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } },
            { no: 2, name: "max_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"max_rate\"" } },
            { no: 3, name: "max_change_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"max_change_rate\"" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rate = "";
        message.maxRate = "";
        message.maxChangeRate = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string rate */ 1:
                    message.rate = reader.string();
                    break;
                case /* string max_rate */ 2:
                    message.maxRate = reader.string();
                    break;
                case /* string max_change_rate */ 3:
                    message.maxChangeRate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string rate = 1; */
        if (message.rate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rate);
        /* string max_rate = 2; */
        if (message.maxRate !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.maxRate);
        /* string max_change_rate = 3; */
        if (message.maxChangeRate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.maxChangeRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.CommissionRates
 */
export const CommissionRates = new CommissionRates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Commission$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Commission", [
            { no: 1, name: "commission_rates", kind: "message", T: () => CommissionRates, options: { "gogoproto.nullable": false, "gogoproto.embed": true } },
            { no: 2, name: "update_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"update_time\"", "gogoproto.stdtime": true } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.CommissionRates commission_rates */ 1:
                    message.commissionRates = CommissionRates.internalBinaryRead(reader, reader.uint32(), options, message.commissionRates);
                    break;
                case /* google.protobuf.Timestamp update_time */ 2:
                    message.updateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updateTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.CommissionRates commission_rates = 1; */
        if (message.commissionRates)
            CommissionRates.internalBinaryWrite(message.commissionRates, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp update_time = 2; */
        if (message.updateTime)
            Timestamp.internalBinaryWrite(message.updateTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Commission
 */
export const Commission = new Commission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Description$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Description", [
            { no: 1, name: "moniker", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "identity", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "website", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "security_contact", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"security_contact\"" } },
            { no: 5, name: "details", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.moniker = "";
        message.identity = "";
        message.website = "";
        message.securityContact = "";
        message.details = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string moniker */ 1:
                    message.moniker = reader.string();
                    break;
                case /* string identity */ 2:
                    message.identity = reader.string();
                    break;
                case /* string website */ 3:
                    message.website = reader.string();
                    break;
                case /* string security_contact */ 4:
                    message.securityContact = reader.string();
                    break;
                case /* string details */ 5:
                    message.details = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string moniker = 1; */
        if (message.moniker !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.moniker);
        /* string identity = 2; */
        if (message.identity !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.identity);
        /* string website = 3; */
        if (message.website !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.website);
        /* string security_contact = 4; */
        if (message.securityContact !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.securityContact);
        /* string details = 5; */
        if (message.details !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.details);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Description
 */
export const Description = new Description$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Validator$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Validator", [
            { no: 1, name: "operator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"operator_address\"" } },
            { no: 2, name: "consensus_pubkey", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "cosmos.crypto.PubKey", "gogoproto.moretags": "yaml:\"consensus_pubkey\"" } },
            { no: 3, name: "jailed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["cosmos.staking.v1beta1.BondStatus", BondStatus, "BOND_STATUS_"] },
            { no: 5, name: "tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 6, name: "delegator_shares", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"delegator_shares\"" } },
            { no: 7, name: "description", kind: "message", T: () => Description, options: { "gogoproto.nullable": false } },
            { no: 8, name: "unbonding_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"unbonding_height\"" } },
            { no: 9, name: "unbonding_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"unbonding_time\"", "gogoproto.stdtime": true } },
            { no: 10, name: "commission", kind: "message", T: () => Commission, options: { "gogoproto.nullable": false } },
            { no: 11, name: "min_self_delegation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"min_self_delegation\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.operatorAddress = "";
        message.jailed = false;
        message.status = 0;
        message.tokens = "";
        message.delegatorShares = "";
        message.unbondingHeight = "0";
        message.minSelfDelegation = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operator_address */ 1:
                    message.operatorAddress = reader.string();
                    break;
                case /* google.protobuf.Any consensus_pubkey */ 2:
                    message.consensusPubkey = Any.internalBinaryRead(reader, reader.uint32(), options, message.consensusPubkey);
                    break;
                case /* bool jailed */ 3:
                    message.jailed = reader.bool();
                    break;
                case /* cosmos.staking.v1beta1.BondStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string tokens */ 5:
                    message.tokens = reader.string();
                    break;
                case /* string delegator_shares */ 6:
                    message.delegatorShares = reader.string();
                    break;
                case /* cosmos.staking.v1beta1.Description description */ 7:
                    message.description = Description.internalBinaryRead(reader, reader.uint32(), options, message.description);
                    break;
                case /* int64 unbonding_height */ 8:
                    message.unbondingHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp unbonding_time */ 9:
                    message.unbondingTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.unbondingTime);
                    break;
                case /* cosmos.staking.v1beta1.Commission commission */ 10:
                    message.commission = Commission.internalBinaryRead(reader, reader.uint32(), options, message.commission);
                    break;
                case /* string min_self_delegation */ 11:
                    message.minSelfDelegation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string operator_address = 1; */
        if (message.operatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.operatorAddress);
        /* google.protobuf.Any consensus_pubkey = 2; */
        if (message.consensusPubkey)
            Any.internalBinaryWrite(message.consensusPubkey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool jailed = 3; */
        if (message.jailed !== false)
            writer.tag(3, WireType.Varint).bool(message.jailed);
        /* cosmos.staking.v1beta1.BondStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string tokens = 5; */
        if (message.tokens !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tokens);
        /* string delegator_shares = 6; */
        if (message.delegatorShares !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.delegatorShares);
        /* cosmos.staking.v1beta1.Description description = 7; */
        if (message.description)
            Description.internalBinaryWrite(message.description, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 unbonding_height = 8; */
        if (message.unbondingHeight !== "0")
            writer.tag(8, WireType.Varint).int64(message.unbondingHeight);
        /* google.protobuf.Timestamp unbonding_time = 9; */
        if (message.unbondingTime)
            Timestamp.internalBinaryWrite(message.unbondingTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.staking.v1beta1.Commission commission = 10; */
        if (message.commission)
            Commission.internalBinaryWrite(message.commission, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string min_self_delegation = 11; */
        if (message.minSelfDelegation !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.minSelfDelegation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Validator
 */
export const Validator = new Validator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValAddresses$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.ValAddresses", [
            { no: 1, name: "addresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.stringer": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.addresses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string addresses */ 1:
                    message.addresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated string addresses = 1; */
        for (let i = 0; i < message.addresses.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.ValAddresses
 */
export const ValAddresses = new ValAddresses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVPair$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.DVPair", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPair
 */
export const DVPair = new DVPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVPairs$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.DVPairs", [
            { no: 1, name: "pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DVPair, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.pairs = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DVPair pairs */ 1:
                    message.pairs.push(DVPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.DVPair pairs = 1; */
        for (let i = 0; i < message.pairs.length; i++)
            DVPair.internalBinaryWrite(message.pairs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVPairs
 */
export const DVPairs = new DVPairs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVVTriplet$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.DVVTriplet", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_src_address\"" } },
            { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_dst_address\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorSrcAddress = "";
        message.validatorDstAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_src_address */ 2:
                    message.validatorSrcAddress = reader.string();
                    break;
                case /* string validator_dst_address */ 3:
                    message.validatorDstAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_src_address = 2; */
        if (message.validatorSrcAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorSrcAddress);
        /* string validator_dst_address = 3; */
        if (message.validatorDstAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validatorDstAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplet
 */
export const DVVTriplet = new DVVTriplet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DVVTriplets$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.DVVTriplets", [
            { no: 1, name: "triplets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DVVTriplet, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.triplets = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DVVTriplet triplets */ 1:
                    message.triplets.push(DVVTriplet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1; */
        for (let i = 0; i < message.triplets.length; i++)
            DVVTriplet.internalBinaryWrite(message.triplets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DVVTriplets
 */
export const DVVTriplets = new DVVTriplets$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Delegation$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Delegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 3, name: "shares", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorAddress = "";
        message.shares = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* string shares */ 3:
                    message.shares = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* string shares = 3; */
        if (message.shares !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shares);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Delegation
 */
export const Delegation = new Delegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnbondingDelegation$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.UnbondingDelegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 3, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnbondingDelegationEntry, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorAddress = "";
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries */ 3:
                    message.entries.push(UnbondingDelegationEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3; */
        for (let i = 0; i < message.entries.length; i++)
            UnbondingDelegationEntry.internalBinaryWrite(message.entries[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegation
 */
export const UnbondingDelegation = new UnbondingDelegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnbondingDelegationEntry$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.UnbondingDelegationEntry", [
            { no: 1, name: "creation_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"creation_height\"" } },
            { no: 2, name: "completion_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"completion_time\"", "gogoproto.stdtime": true } },
            { no: 3, name: "initial_balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"initial_balance\"" } },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.creationHeight = "0";
        message.initialBalance = "";
        message.balance = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creation_height */ 1:
                    message.creationHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp completion_time */ 2:
                    message.completionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completionTime);
                    break;
                case /* string initial_balance */ 3:
                    message.initialBalance = reader.string();
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 creation_height = 1; */
        if (message.creationHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.creationHeight);
        /* google.protobuf.Timestamp completion_time = 2; */
        if (message.completionTime)
            Timestamp.internalBinaryWrite(message.completionTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string initial_balance = 3; */
        if (message.initialBalance !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.initialBalance);
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export const UnbondingDelegationEntry = new UnbondingDelegationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationEntry$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationEntry", [
            { no: 1, name: "creation_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, options: { "gogoproto.moretags": "yaml:\"creation_height\"" } },
            { no: 2, name: "completion_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"completion_time\"", "gogoproto.stdtime": true } },
            { no: 3, name: "initial_balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"initial_balance\"" } },
            { no: 4, name: "shares_dst", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.creationHeight = "0";
        message.initialBalance = "";
        message.sharesDst = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creation_height */ 1:
                    message.creationHeight = reader.int64().toString();
                    break;
                case /* google.protobuf.Timestamp completion_time */ 2:
                    message.completionTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completionTime);
                    break;
                case /* string initial_balance */ 3:
                    message.initialBalance = reader.string();
                    break;
                case /* string shares_dst */ 4:
                    message.sharesDst = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 creation_height = 1; */
        if (message.creationHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.creationHeight);
        /* google.protobuf.Timestamp completion_time = 2; */
        if (message.completionTime)
            Timestamp.internalBinaryWrite(message.completionTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string initial_balance = 3; */
        if (message.initialBalance !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.initialBalance);
        /* string shares_dst = 4; */
        if (message.sharesDst !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sharesDst);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntry
 */
export const RedelegationEntry = new RedelegationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Redelegation$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Redelegation", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_src_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_src_address\"" } },
            { no: 3, name: "validator_dst_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_dst_address\"" } },
            { no: 4, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedelegationEntry, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorSrcAddress = "";
        message.validatorDstAddress = "";
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_src_address */ 2:
                    message.validatorSrcAddress = reader.string();
                    break;
                case /* string validator_dst_address */ 3:
                    message.validatorDstAddress = reader.string();
                    break;
                case /* repeated cosmos.staking.v1beta1.RedelegationEntry entries */ 4:
                    message.entries.push(RedelegationEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_src_address = 2; */
        if (message.validatorSrcAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorSrcAddress);
        /* string validator_dst_address = 3; */
        if (message.validatorDstAddress !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.validatorDstAddress);
        /* repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4; */
        for (let i = 0; i < message.entries.length; i++)
            RedelegationEntry.internalBinaryWrite(message.entries[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Redelegation
 */
export const Redelegation = new Redelegation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Params", [
            { no: 1, name: "unbonding_time", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"unbonding_time\"", "gogoproto.stdduration": true } },
            { no: 2, name: "max_validators", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"max_validators\"" } },
            { no: 3, name: "max_entries", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"max_entries\"" } },
            { no: 4, name: "historical_entries", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"historical_entries\"" } },
            { no: 5, name: "bond_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"bond_denom\"" } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.maxValidators = 0;
        message.maxEntries = 0;
        message.historicalEntries = 0;
        message.bondDenom = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration unbonding_time */ 1:
                    message.unbondingTime = Duration.internalBinaryRead(reader, reader.uint32(), options, message.unbondingTime);
                    break;
                case /* uint32 max_validators */ 2:
                    message.maxValidators = reader.uint32();
                    break;
                case /* uint32 max_entries */ 3:
                    message.maxEntries = reader.uint32();
                    break;
                case /* uint32 historical_entries */ 4:
                    message.historicalEntries = reader.uint32();
                    break;
                case /* string bond_denom */ 5:
                    message.bondDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Duration unbonding_time = 1; */
        if (message.unbondingTime)
            Duration.internalBinaryWrite(message.unbondingTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 max_validators = 2; */
        if (message.maxValidators !== 0)
            writer.tag(2, WireType.Varint).uint32(message.maxValidators);
        /* uint32 max_entries = 3; */
        if (message.maxEntries !== 0)
            writer.tag(3, WireType.Varint).uint32(message.maxEntries);
        /* uint32 historical_entries = 4; */
        if (message.historicalEntries !== 0)
            writer.tag(4, WireType.Varint).uint32(message.historicalEntries);
        /* string bond_denom = 5; */
        if (message.bondDenom !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bondDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.DelegationResponse", [
            { no: 1, name: "delegation", kind: "message", T: () => Delegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "balance", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Delegation delegation */ 1:
                    message.delegation = Delegation.internalBinaryRead(reader, reader.uint32(), options, message.delegation);
                    break;
                case /* cosmos.base.v1beta1.Coin balance */ 2:
                    message.balance = Coin.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Delegation delegation = 1; */
        if (message.delegation)
            Delegation.internalBinaryWrite(message.delegation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.v1beta1.Coin balance = 2; */
        if (message.balance)
            Coin.internalBinaryWrite(message.balance, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.DelegationResponse
 */
export const DelegationResponse = new DelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationEntryResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationEntryResponse", [
            { no: 1, name: "redelegation_entry", kind: "message", T: () => RedelegationEntry, options: { "gogoproto.nullable": false } },
            { no: 4, name: "balance", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.balance = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.RedelegationEntry redelegation_entry */ 1:
                    message.redelegationEntry = RedelegationEntry.internalBinaryRead(reader, reader.uint32(), options, message.redelegationEntry);
                    break;
                case /* string balance */ 4:
                    message.balance = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1; */
        if (message.redelegationEntry)
            RedelegationEntry.internalBinaryWrite(message.redelegationEntry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string balance = 4; */
        if (message.balance !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.balance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export const RedelegationEntryResponse = new RedelegationEntryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RedelegationResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.RedelegationResponse", [
            { no: 1, name: "redelegation", kind: "message", T: () => Redelegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "entries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedelegationEntryResponse, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.entries = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Redelegation redelegation */ 1:
                    message.redelegation = Redelegation.internalBinaryRead(reader, reader.uint32(), options, message.redelegation);
                    break;
                case /* repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries */ 2:
                    message.entries.push(RedelegationEntryResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Redelegation redelegation = 1; */
        if (message.redelegation)
            Redelegation.internalBinaryWrite(message.redelegation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            RedelegationEntryResponse.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.RedelegationResponse
 */
export const RedelegationResponse = new RedelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pool$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.Pool", [
            { no: 1, name: "not_bonded_tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.jsontag": "not_bonded_tokens" } },
            { no: 2, name: "bonded_tokens", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.jsontag": "bonded_tokens", "gogoproto.moretags": "yaml:\"bonded_tokens\"" } }
        ], { "gogoproto.equal": true, "gogoproto.description": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.notBondedTokens = "";
        message.bondedTokens = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string not_bonded_tokens */ 1:
                    message.notBondedTokens = reader.string();
                    break;
                case /* string bonded_tokens */ 2:
                    message.bondedTokens = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string not_bonded_tokens = 1; */
        if (message.notBondedTokens !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.notBondedTokens);
        /* string bonded_tokens = 2; */
        if (message.bondedTokens !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bondedTokens);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.Pool
 */
export const Pool = new Pool$Type();
