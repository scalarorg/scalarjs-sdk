// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/genesis.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Redelegation } from "./staking";
import { UnbondingDelegation } from "./staking";
import { Delegation } from "./staking";
import { Validator } from "./staking";
import { Params } from "./staking";
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "last_total_power", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"last_total_power\"" } },
            { no: 3, name: "last_validator_powers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LastValidatorPower, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"last_validator_powers\"" } },
            { no: 4, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator, options: { "gogoproto.nullable": false } },
            { no: 5, name: "delegations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Delegation, options: { "gogoproto.nullable": false } },
            { no: 6, name: "unbonding_delegations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnbondingDelegation, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"unbonding_delegations\"" } },
            { no: 7, name: "redelegations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Redelegation, options: { "gogoproto.nullable": false } },
            { no: 8, name: "exported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.lastTotalPower = new Uint8Array(0);
        message.lastValidatorPowers = [];
        message.validators = [];
        message.delegations = [];
        message.unbondingDelegations = [];
        message.redelegations = [];
        message.exported = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* bytes last_total_power */ 2:
                    message.lastTotalPower = reader.bytes();
                    break;
                case /* repeated cosmos.staking.v1beta1.LastValidatorPower last_validator_powers */ 3:
                    message.lastValidatorPowers.push(LastValidatorPower.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.staking.v1beta1.Validator validators */ 4:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.staking.v1beta1.Delegation delegations */ 5:
                    message.delegations.push(Delegation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations */ 6:
                    message.unbondingDelegations.push(UnbondingDelegation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.staking.v1beta1.Redelegation redelegations */ 7:
                    message.redelegations.push(Redelegation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool exported */ 8:
                    message.exported = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes last_total_power = 2; */
        if (message.lastTotalPower.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.lastTotalPower);
        /* repeated cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3; */
        for (let i = 0; i < message.lastValidatorPowers.length; i++)
            LastValidatorPower.internalBinaryWrite(message.lastValidatorPowers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.Validator validators = 4; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.Delegation delegations = 5; */
        for (let i = 0; i < message.delegations.length; i++)
            Delegation.internalBinaryWrite(message.delegations[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6; */
        for (let i = 0; i < message.unbondingDelegations.length; i++)
            UnbondingDelegation.internalBinaryWrite(message.unbondingDelegations[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.staking.v1beta1.Redelegation redelegations = 7; */
        for (let i = 0; i < message.redelegations.length; i++)
            Redelegation.internalBinaryWrite(message.redelegations[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bool exported = 8; */
        if (message.exported !== false)
            writer.tag(8, WireType.Varint).bool(message.exported);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LastValidatorPower$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.LastValidatorPower", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "power", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.power = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* int64 power */ 2:
                    message.power = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* int64 power = 2; */
        if (message.power !== "0")
            writer.tag(2, WireType.Varint).int64(message.power);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.LastValidatorPower
 */
export const LastValidatorPower = new LastValidatorPower$Type();
