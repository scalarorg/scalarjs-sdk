// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/query.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/query.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./staking";
import { Pool } from "./staking";
import { HistoricalInfo } from "./staking";
import { RedelegationResponse } from "./staking";
import { UnbondingDelegation } from "./staking";
import { DelegationResponse } from "./staking";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { Validator } from "./staking";
import { PageRequest } from "../../base/query/v1beta1/pagination";
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorsRequest", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorsRequest
 */
export const QueryValidatorsRequest = new QueryValidatorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorsResponse", [
            { no: 1, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validators = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.Validator validators */ 1:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.Validator validators = 1; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorsResponse
 */
export const QueryValidatorsResponse = new QueryValidatorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorRequest
 */
export const QueryValidatorRequest = new QueryValidatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorResponse", [
            { no: 1, name: "validator", kind: "message", T: () => Validator, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Validator validator */ 1:
                    message.validator = Validator.internalBinaryRead(reader, reader.uint32(), options, message.validator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Validator validator = 1; */
        if (message.validator)
            Validator.internalBinaryWrite(message.validator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorResponse
 */
export const QueryValidatorResponse = new QueryValidatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorDelegationsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorDelegationsRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
 */
export const QueryValidatorDelegationsRequest = new QueryValidatorDelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorDelegationsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorDelegationsResponse", [
            { no: 1, name: "delegation_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegationResponse, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "DelegationResponses" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegationResponses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses */ 1:
                    message.delegationResponses.push(DelegationResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1; */
        for (let i = 0; i < message.delegationResponses.length; i++)
            DelegationResponse.internalBinaryWrite(message.delegationResponses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
 */
export const QueryValidatorDelegationsResponse = new QueryValidatorDelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorUnbondingDelegationsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest", [
            { no: 1, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_addr */ 1:
                    message.validatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_addr = 1; */
        if (message.validatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
 */
export const QueryValidatorUnbondingDelegationsRequest = new QueryValidatorUnbondingDelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryValidatorUnbondingDelegationsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse", [
            { no: 1, name: "unbonding_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnbondingDelegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.unbondingResponses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses */ 1:
                    message.unbondingResponses.push(UnbondingDelegation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1; */
        for (let i = 0; i < message.unbondingResponses.length; i++)
            UnbondingDelegation.internalBinaryWrite(message.unbondingResponses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
 */
export const QueryValidatorUnbondingDelegationsResponse = new QueryValidatorUnbondingDelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegationRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegationRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* string validator_addr */ 2:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* string validator_addr = 2; */
        if (message.validatorAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegationRequest
 */
export const QueryDelegationRequest = new QueryDelegationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegationResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegationResponse", [
            { no: 1, name: "delegation_response", kind: "message", T: () => DelegationResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.DelegationResponse delegation_response */ 1:
                    message.delegationResponse = DelegationResponse.internalBinaryRead(reader, reader.uint32(), options, message.delegationResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.DelegationResponse delegation_response = 1; */
        if (message.delegationResponse)
            DelegationResponse.internalBinaryWrite(message.delegationResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegationResponse
 */
export const QueryDelegationResponse = new QueryDelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnbondingDelegationRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryUnbondingDelegationRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* string validator_addr */ 2:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* string validator_addr = 2; */
        if (message.validatorAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
 */
export const QueryUnbondingDelegationRequest = new QueryUnbondingDelegationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryUnbondingDelegationResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryUnbondingDelegationResponse", [
            { no: 1, name: "unbond", kind: "message", T: () => UnbondingDelegation, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.UnbondingDelegation unbond */ 1:
                    message.unbond = UnbondingDelegation.internalBinaryRead(reader, reader.uint32(), options, message.unbond);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.UnbondingDelegation unbond = 1; */
        if (message.unbond)
            UnbondingDelegation.internalBinaryWrite(message.unbond, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
 */
export const QueryUnbondingDelegationResponse = new QueryUnbondingDelegationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorDelegationsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
 */
export const QueryDelegatorDelegationsRequest = new QueryDelegatorDelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorDelegationsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse", [
            { no: 1, name: "delegation_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegationResponse, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegationResponses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses */ 1:
                    message.delegationResponses.push(DelegationResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1; */
        for (let i = 0; i < message.delegationResponses.length; i++)
            DelegationResponse.internalBinaryWrite(message.delegationResponses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
 */
export const QueryDelegatorDelegationsResponse = new QueryDelegatorDelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorUnbondingDelegationsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
 */
export const QueryDelegatorUnbondingDelegationsRequest = new QueryDelegatorUnbondingDelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorUnbondingDelegationsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse", [
            { no: 1, name: "unbonding_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnbondingDelegation, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.unbondingResponses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses */ 1:
                    message.unbondingResponses.push(UnbondingDelegation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1; */
        for (let i = 0; i < message.unbondingResponses.length; i++)
            UnbondingDelegation.internalBinaryWrite(message.unbondingResponses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
 */
export const QueryDelegatorUnbondingDelegationsResponse = new QueryDelegatorUnbondingDelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRedelegationsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryRedelegationsRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "src_validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dst_validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        message.srcValidatorAddr = "";
        message.dstValidatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* string src_validator_addr */ 2:
                    message.srcValidatorAddr = reader.string();
                    break;
                case /* string dst_validator_addr */ 3:
                    message.dstValidatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 4:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* string src_validator_addr = 2; */
        if (message.srcValidatorAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.srcValidatorAddr);
        /* string dst_validator_addr = 3; */
        if (message.dstValidatorAddr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dstValidatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 4; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryRedelegationsRequest
 */
export const QueryRedelegationsRequest = new QueryRedelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRedelegationsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryRedelegationsResponse", [
            { no: 1, name: "redelegation_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RedelegationResponse, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.redelegationResponses = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses */ 1:
                    message.redelegationResponses.push(RedelegationResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses = 1; */
        for (let i = 0; i < message.redelegationResponses.length; i++)
            RedelegationResponse.internalBinaryWrite(message.redelegationResponses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryRedelegationsResponse
 */
export const QueryRedelegationsResponse = new QueryRedelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorValidatorsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
 */
export const QueryDelegatorValidatorsRequest = new QueryDelegatorValidatorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorValidatorsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse", [
            { no: 1, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validators = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.staking.v1beta1.Validator validators */ 1:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.staking.v1beta1.Validator validators = 1; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
 */
export const QueryDelegatorValidatorsResponse = new QueryDelegatorValidatorsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorValidatorRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorValidatorRequest", [
            { no: 1, name: "delegator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddr = "";
        message.validatorAddr = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_addr */ 1:
                    message.delegatorAddr = reader.string();
                    break;
                case /* string validator_addr */ 2:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_addr = 1; */
        if (message.delegatorAddr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddr);
        /* string validator_addr = 2; */
        if (message.validatorAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
 */
export const QueryDelegatorValidatorRequest = new QueryDelegatorValidatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDelegatorValidatorResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryDelegatorValidatorResponse", [
            { no: 1, name: "validator", kind: "message", T: () => Validator, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Validator validator */ 1:
                    message.validator = Validator.internalBinaryRead(reader, reader.uint32(), options, message.validator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Validator validator = 1; */
        if (message.validator)
            Validator.internalBinaryWrite(message.validator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
 */
export const QueryDelegatorValidatorResponse = new QueryDelegatorValidatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryHistoricalInfoRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryHistoricalInfoRequest", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.height = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryHistoricalInfoRequest
 */
export const QueryHistoricalInfoRequest = new QueryHistoricalInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryHistoricalInfoResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryHistoricalInfoResponse", [
            { no: 1, name: "hist", kind: "message", T: () => HistoricalInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.HistoricalInfo hist */ 1:
                    message.hist = HistoricalInfo.internalBinaryRead(reader, reader.uint32(), options, message.hist);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.HistoricalInfo hist = 1; */
        if (message.hist)
            HistoricalInfo.internalBinaryWrite(message.hist, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryHistoricalInfoResponse
 */
export const QueryHistoricalInfoResponse = new QueryHistoricalInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryPoolRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryPoolRequest
 */
export const QueryPoolRequest = new QueryPoolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryPoolResponse", [
            { no: 1, name: "pool", kind: "message", T: () => Pool, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Pool pool */ 1:
                    message.pool = Pool.internalBinaryRead(reader, reader.uint32(), options, message.pool);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Pool pool = 1; */
        if (message.pool)
            Pool.internalBinaryWrite(message.pool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryPoolResponse
 */
export const QueryPoolResponse = new QueryPoolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryParamsRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.staking.v1beta1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.staking.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.staking.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.staking.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.staking.v1beta1.Query", [
    { name: "Validators", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators" } }, I: QueryValidatorsRequest, O: QueryValidatorsResponse },
    { name: "Validator", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators/{validator_addr}" } }, I: QueryValidatorRequest, O: QueryValidatorResponse },
    { name: "ValidatorDelegations", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations" } }, I: QueryValidatorDelegationsRequest, O: QueryValidatorDelegationsResponse },
    { name: "ValidatorUnbondingDelegations", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations" } }, I: QueryValidatorUnbondingDelegationsRequest, O: QueryValidatorUnbondingDelegationsResponse },
    { name: "Delegation", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}" } }, I: QueryDelegationRequest, O: QueryDelegationResponse },
    { name: "UnbondingDelegation", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation" } }, I: QueryUnbondingDelegationRequest, O: QueryUnbondingDelegationResponse },
    { name: "DelegatorDelegations", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/delegations/{delegator_addr}" } }, I: QueryDelegatorDelegationsRequest, O: QueryDelegatorDelegationsResponse },
    { name: "DelegatorUnbondingDelegations", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations" } }, I: QueryDelegatorUnbondingDelegationsRequest, O: QueryDelegatorUnbondingDelegationsResponse },
    { name: "Redelegations", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations" } }, I: QueryRedelegationsRequest, O: QueryRedelegationsResponse },
    { name: "DelegatorValidators", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators" } }, I: QueryDelegatorValidatorsRequest, O: QueryDelegatorValidatorsResponse },
    { name: "DelegatorValidator", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}" } }, I: QueryDelegatorValidatorRequest, O: QueryDelegatorValidatorResponse },
    { name: "HistoricalInfo", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/historical_info/{height}" } }, I: QueryHistoricalInfoRequest, O: QueryHistoricalInfoResponse },
    { name: "Pool", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/pool" } }, I: QueryPoolRequest, O: QueryPoolResponse },
    { name: "Params", options: { "google.api.http": { get: "/cosmos/staking/v1beta1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse }
]);
