// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/staking/v1beta1/genesis.proto" (package "cosmos.staking.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Redelegation } from "./staking";
import { UnbondingDelegation } from "./staking";
import { Delegation } from "./staking";
import { Validator } from "./staking";
import { Params } from "./staking";
/**
 * GenesisState defines the staking module's genesis state.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * params defines all the paramaters of related to deposit.
     *
     * @generated from protobuf field: cosmos.staking.v1beta1.Params params = 1;
     */
    params?: Params;
    /**
     * last_total_power tracks the total amounts of bonded tokens recorded during
     * the previous end block.
     *
     * @generated from protobuf field: bytes last_total_power = 2;
     */
    lastTotalPower: Uint8Array;
    /**
     * last_validator_powers is a special index that provides a historical list
     * of the last-block's bonded validators.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3;
     */
    lastValidatorPowers: LastValidatorPower[];
    /**
     * delegations defines the validator set at genesis.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.Validator validators = 4;
     */
    validators: Validator[];
    /**
     * delegations defines the delegations active at genesis.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.Delegation delegations = 5;
     */
    delegations: Delegation[];
    /**
     * unbonding_delegations defines the unbonding delegations active at genesis.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6;
     */
    unbondingDelegations: UnbondingDelegation[];
    /**
     * redelegations defines the redelegations active at genesis.
     *
     * @generated from protobuf field: repeated cosmos.staking.v1beta1.Redelegation redelegations = 7;
     */
    redelegations: Redelegation[];
    /**
     * @generated from protobuf field: bool exported = 8;
     */
    exported: boolean;
}
/**
 * LastValidatorPower required for validator set update logic.
 *
 * @generated from protobuf message cosmos.staking.v1beta1.LastValidatorPower
 */
export interface LastValidatorPower {
    /**
     * address is the address of the validator.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * power defines the power of the validator.
     *
     * @generated from protobuf field: int64 power = 2;
     */
    power: string;
}
declare class GenesisState$Type extends MessageType<GenesisState> {
    constructor();
    create(value?: PartialMessage<GenesisState>): GenesisState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState;
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.GenesisState
 */
export declare const GenesisState: GenesisState$Type;
declare class LastValidatorPower$Type extends MessageType<LastValidatorPower> {
    constructor();
    create(value?: PartialMessage<LastValidatorPower>): LastValidatorPower;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastValidatorPower): LastValidatorPower;
    internalBinaryWrite(message: LastValidatorPower, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.staking.v1beta1.LastValidatorPower
 */
export declare const LastValidatorPower: LastValidatorPower$Type;
export {};
