// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/query.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service for gov module
 *
 * @generated from protobuf service cosmos.gov.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * Proposal queries proposal details based on ProposalID.
     *
     * @generated from protobuf rpc: Proposal(cosmos.gov.v1beta1.QueryProposalRequest) returns (cosmos.gov.v1beta1.QueryProposalResponse);
     */
    proposal(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Proposals queries all proposals based on given status.
     *
     * @generated from protobuf rpc: Proposals(cosmos.gov.v1beta1.QueryProposalsRequest) returns (cosmos.gov.v1beta1.QueryProposalsResponse);
     */
    proposals(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Vote queries voted information based on proposalID, voterAddr.
     *
     * @generated from protobuf rpc: Vote(cosmos.gov.v1beta1.QueryVoteRequest) returns (cosmos.gov.v1beta1.QueryVoteResponse);
     */
    vote(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Votes queries votes of a given proposal.
     *
     * @generated from protobuf rpc: Votes(cosmos.gov.v1beta1.QueryVotesRequest) returns (cosmos.gov.v1beta1.QueryVotesResponse);
     */
    votes(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Params queries all parameters of the gov module.
     *
     * @generated from protobuf rpc: Params(cosmos.gov.v1beta1.QueryParamsRequest) returns (cosmos.gov.v1beta1.QueryParamsResponse);
     */
    params(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Deposit queries single deposit information based proposalID, depositAddr.
     *
     * @generated from protobuf rpc: Deposit(cosmos.gov.v1beta1.QueryDepositRequest) returns (cosmos.gov.v1beta1.QueryDepositResponse);
     */
    deposit(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Deposits queries all deposits of a single proposal.
     *
     * @generated from protobuf rpc: Deposits(cosmos.gov.v1beta1.QueryDepositsRequest) returns (cosmos.gov.v1beta1.QueryDepositsResponse);
     */
    deposits(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TallyResult queries the tally of a proposal vote.
     *
     * @generated from protobuf rpc: TallyResult(cosmos.gov.v1beta1.QueryTallyResultRequest) returns (cosmos.gov.v1beta1.QueryTallyResultResponse);
     */
    tallyResult(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
