// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/tx.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/tx.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WeightedVoteOption } from "./gov";
import { VoteOption } from "./gov";
import { Coin } from "../../base/v1beta1/coin";
import { Any } from "../../../google/protobuf/any";
// @generated message type with reflection information, may provide speed optimized methods
class MsgSubmitProposal$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgSubmitProposal", [
            { no: 1, name: "content", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "Content" } },
            { no: 2, name: "initial_deposit", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"initial_deposit\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 3, name: "proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.initialDeposit = [];
        message.proposer = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any content */ 1:
                    message.content = Any.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* repeated cosmos.base.v1beta1.Coin initial_deposit */ 2:
                    message.initialDeposit.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string proposer */ 3:
                    message.proposer = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any content = 1; */
        if (message.content)
            Any.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin initial_deposit = 2; */
        for (let i = 0; i < message.initialDeposit.length; i++)
            Coin.internalBinaryWrite(message.initialDeposit[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string proposer = 3; */
        if (message.proposer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.proposer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgSubmitProposal
 */
export const MsgSubmitProposal = new MsgSubmitProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSubmitProposalResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgSubmitProposalResponse", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "proposal_id", "gogoproto.moretags": "yaml:\"proposal_id\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgSubmitProposalResponse
 */
export const MsgSubmitProposalResponse = new MsgSubmitProposalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgVote$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgVote", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "proposal_id", "gogoproto.moretags": "yaml:\"proposal_id\"" } },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "option", kind: "enum", T: () => ["cosmos.gov.v1beta1.VoteOption", VoteOption, "VOTE_OPTION_"] }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.voter = "";
        message.option = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                case /* cosmos.gov.v1beta1.VoteOption option */ 3:
                    message.option = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        /* cosmos.gov.v1beta1.VoteOption option = 3; */
        if (message.option !== 0)
            writer.tag(3, WireType.Varint).int32(message.option);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgVote
 */
export const MsgVote = new MsgVote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgVoteResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgVoteResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgVoteResponse
 */
export const MsgVoteResponse = new MsgVoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgVoteWeighted$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgVoteWeighted", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"proposal_id\"" } },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WeightedVoteOption, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.voter = "";
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                case /* repeated cosmos.gov.v1beta1.WeightedVoteOption options */ 3:
                    message.options.push(WeightedVoteOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        /* repeated cosmos.gov.v1beta1.WeightedVoteOption options = 3; */
        for (let i = 0; i < message.options.length; i++)
            WeightedVoteOption.internalBinaryWrite(message.options[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgVoteWeighted
 */
export const MsgVoteWeighted = new MsgVoteWeighted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgVoteWeightedResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgVoteWeightedResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgVoteWeightedResponse
 */
export const MsgVoteWeightedResponse = new MsgVoteWeightedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeposit$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgDeposit", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "proposal_id", "gogoproto.moretags": "yaml:\"proposal_id\"" } },
            { no: 2, name: "depositor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.depositor = "";
        message.amount = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string depositor */ 2:
                    message.depositor = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string depositor = 2; */
        if (message.depositor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.depositor);
        /* repeated cosmos.base.v1beta1.Coin amount = 3; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgDeposit
 */
export const MsgDeposit = new MsgDeposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDepositResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.MsgDepositResponse", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.MsgDepositResponse
 */
export const MsgDepositResponse = new MsgDepositResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.gov.v1beta1.Msg
 */
export const Msg = new ServiceType("cosmos.gov.v1beta1.Msg", [
    { name: "SubmitProposal", options: {}, I: MsgSubmitProposal, O: MsgSubmitProposalResponse },
    { name: "Vote", options: {}, I: MsgVote, O: MsgVoteResponse },
    { name: "VoteWeighted", options: {}, I: MsgVoteWeighted, O: MsgVoteWeightedResponse },
    { name: "Deposit", options: {}, I: MsgDeposit, O: MsgDepositResponse }
]);
