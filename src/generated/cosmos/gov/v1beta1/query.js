// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/query.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/query.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TallyResult } from "./gov";
import { Deposit } from "./gov";
import { TallyParams } from "./gov";
import { DepositParams } from "./gov";
import { VotingParams } from "./gov";
import { Vote } from "./gov";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { PageRequest } from "../../base/query/v1beta1/pagination";
import { ProposalStatus } from "./gov";
import { Proposal } from "./gov";
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryProposalRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryProposalRequest
 */
export const QueryProposalRequest = new QueryProposalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryProposalResponse", [
            { no: 1, name: "proposal", kind: "message", T: () => Proposal, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.Proposal proposal */ 1:
                    message.proposal = Proposal.internalBinaryRead(reader, reader.uint32(), options, message.proposal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.Proposal proposal = 1; */
        if (message.proposal)
            Proposal.internalBinaryWrite(message.proposal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryProposalResponse
 */
export const QueryProposalResponse = new QueryProposalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryProposalsRequest", [
            { no: 1, name: "proposal_status", kind: "enum", T: () => ["cosmos.gov.v1beta1.ProposalStatus", ProposalStatus, "PROPOSAL_STATUS_"] },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "depositor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pagination", kind: "message", T: () => PageRequest }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalStatus = 0;
        message.voter = "";
        message.depositor = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.ProposalStatus proposal_status */ 1:
                    message.proposalStatus = reader.int32();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                case /* string depositor */ 3:
                    message.depositor = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 4:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.ProposalStatus proposal_status = 1; */
        if (message.proposalStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.proposalStatus);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        /* string depositor = 3; */
        if (message.depositor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.depositor);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 4; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryProposalsRequest
 */
export const QueryProposalsRequest = new QueryProposalsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryProposalsResponse", [
            { no: 1, name: "proposals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Proposal, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposals = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.gov.v1beta1.Proposal proposals */ 1:
                    message.proposals.push(Proposal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.gov.v1beta1.Proposal proposals = 1; */
        for (let i = 0; i < message.proposals.length; i++)
            Proposal.internalBinaryWrite(message.proposals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryProposalsResponse
 */
export const QueryProposalsResponse = new QueryProposalsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryVoteRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.voter = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryVoteRequest
 */
export const QueryVoteRequest = new QueryVoteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryVoteResponse", [
            { no: 1, name: "vote", kind: "message", T: () => Vote, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.Vote vote */ 1:
                    message.vote = Vote.internalBinaryRead(reader, reader.uint32(), options, message.vote);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.Vote vote = 1; */
        if (message.vote)
            Vote.internalBinaryWrite(message.vote, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryVoteResponse
 */
export const QueryVoteResponse = new QueryVoteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryVotesRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryVotesRequest
 */
export const QueryVotesRequest = new QueryVotesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryVotesResponse", [
            { no: 1, name: "votes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vote, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.votes = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.gov.v1beta1.Vote votes */ 1:
                    message.votes.push(Vote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.gov.v1beta1.Vote votes = 1; */
        for (let i = 0; i < message.votes.length; i++)
            Vote.internalBinaryWrite(message.votes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryVotesResponse
 */
export const QueryVotesResponse = new QueryVotesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryParamsRequest", [
            { no: 1, name: "params_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.paramsType = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string params_type */ 1:
                    message.paramsType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string params_type = 1; */
        if (message.paramsType !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.paramsType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryParamsResponse", [
            { no: 1, name: "voting_params", kind: "message", T: () => VotingParams, options: { "gogoproto.nullable": false } },
            { no: 2, name: "deposit_params", kind: "message", T: () => DepositParams, options: { "gogoproto.nullable": false } },
            { no: 3, name: "tally_params", kind: "message", T: () => TallyParams, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.VotingParams voting_params */ 1:
                    message.votingParams = VotingParams.internalBinaryRead(reader, reader.uint32(), options, message.votingParams);
                    break;
                case /* cosmos.gov.v1beta1.DepositParams deposit_params */ 2:
                    message.depositParams = DepositParams.internalBinaryRead(reader, reader.uint32(), options, message.depositParams);
                    break;
                case /* cosmos.gov.v1beta1.TallyParams tally_params */ 3:
                    message.tallyParams = TallyParams.internalBinaryRead(reader, reader.uint32(), options, message.tallyParams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.VotingParams voting_params = 1; */
        if (message.votingParams)
            VotingParams.internalBinaryWrite(message.votingParams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.gov.v1beta1.DepositParams deposit_params = 2; */
        if (message.depositParams)
            DepositParams.internalBinaryWrite(message.depositParams, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.gov.v1beta1.TallyParams tally_params = 3; */
        if (message.tallyParams)
            TallyParams.internalBinaryWrite(message.tallyParams, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDepositRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryDepositRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "depositor", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.depositor = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string depositor */ 2:
                    message.depositor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string depositor = 2; */
        if (message.depositor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.depositor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryDepositRequest
 */
export const QueryDepositRequest = new QueryDepositRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDepositResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryDepositResponse", [
            { no: 1, name: "deposit", kind: "message", T: () => Deposit, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.Deposit deposit */ 1:
                    message.deposit = Deposit.internalBinaryRead(reader, reader.uint32(), options, message.deposit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.Deposit deposit = 1; */
        if (message.deposit)
            Deposit.internalBinaryWrite(message.deposit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryDepositResponse
 */
export const QueryDepositResponse = new QueryDepositResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDepositsRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryDepositsRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryDepositsRequest
 */
export const QueryDepositsRequest = new QueryDepositsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDepositsResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryDepositsResponse", [
            { no: 1, name: "deposits", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Deposit, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deposits = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.gov.v1beta1.Deposit deposits */ 1:
                    message.deposits.push(Deposit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.gov.v1beta1.Deposit deposits = 1; */
        for (let i = 0; i < message.deposits.length; i++)
            Deposit.internalBinaryWrite(message.deposits[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryDepositsResponse
 */
export const QueryDepositsResponse = new QueryDepositsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTallyResultRequest$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryTallyResultRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryTallyResultRequest
 */
export const QueryTallyResultRequest = new QueryTallyResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTallyResultResponse$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.QueryTallyResultResponse", [
            { no: 1, name: "tally", kind: "message", T: () => TallyResult, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.TallyResult tally */ 1:
                    message.tally = TallyResult.internalBinaryRead(reader, reader.uint32(), options, message.tally);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.TallyResult tally = 1; */
        if (message.tally)
            TallyResult.internalBinaryWrite(message.tally, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.QueryTallyResultResponse
 */
export const QueryTallyResultResponse = new QueryTallyResultResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.gov.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.gov.v1beta1.Query", [
    { name: "Proposal", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}" } }, I: QueryProposalRequest, O: QueryProposalResponse },
    { name: "Proposals", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals" } }, I: QueryProposalsRequest, O: QueryProposalsResponse },
    { name: "Vote", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}" } }, I: QueryVoteRequest, O: QueryVoteResponse },
    { name: "Votes", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes" } }, I: QueryVotesRequest, O: QueryVotesResponse },
    { name: "Params", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/params/{params_type}" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "Deposit", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}" } }, I: QueryDepositRequest, O: QueryDepositResponse },
    { name: "Deposits", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits" } }, I: QueryDepositsRequest, O: QueryDepositsResponse },
    { name: "TallyResult", options: { "google.api.http": { get: "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally" } }, I: QueryTallyResultRequest, O: QueryTallyResultResponse }
]);
