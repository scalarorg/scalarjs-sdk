// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/query.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { QueryTallyResultResponse } from "./query";
import type { QueryTallyResultRequest } from "./query";
import type { QueryDepositsResponse } from "./query";
import type { QueryDepositsRequest } from "./query";
import type { QueryDepositResponse } from "./query";
import type { QueryDepositRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryVotesResponse } from "./query";
import type { QueryVotesRequest } from "./query";
import type { QueryVoteResponse } from "./query";
import type { QueryVoteRequest } from "./query";
import type { QueryProposalsResponse } from "./query";
import type { QueryProposalsRequest } from "./query";
import type { QueryProposalResponse } from "./query";
import type { QueryProposalRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service for gov module
 *
 * @generated from protobuf service cosmos.gov.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Proposal queries proposal details based on ProposalID.
     *
     * @generated from protobuf rpc: Proposal(cosmos.gov.v1beta1.QueryProposalRequest) returns (cosmos.gov.v1beta1.QueryProposalResponse);
     */
    proposal(input: QueryProposalRequest, options?: RpcOptions): UnaryCall<QueryProposalRequest, QueryProposalResponse>;
    /**
     * Proposals queries all proposals based on given status.
     *
     * @generated from protobuf rpc: Proposals(cosmos.gov.v1beta1.QueryProposalsRequest) returns (cosmos.gov.v1beta1.QueryProposalsResponse);
     */
    proposals(input: QueryProposalsRequest, options?: RpcOptions): UnaryCall<QueryProposalsRequest, QueryProposalsResponse>;
    /**
     * Vote queries voted information based on proposalID, voterAddr.
     *
     * @generated from protobuf rpc: Vote(cosmos.gov.v1beta1.QueryVoteRequest) returns (cosmos.gov.v1beta1.QueryVoteResponse);
     */
    vote(input: QueryVoteRequest, options?: RpcOptions): UnaryCall<QueryVoteRequest, QueryVoteResponse>;
    /**
     * Votes queries votes of a given proposal.
     *
     * @generated from protobuf rpc: Votes(cosmos.gov.v1beta1.QueryVotesRequest) returns (cosmos.gov.v1beta1.QueryVotesResponse);
     */
    votes(input: QueryVotesRequest, options?: RpcOptions): UnaryCall<QueryVotesRequest, QueryVotesResponse>;
    /**
     * Params queries all parameters of the gov module.
     *
     * @generated from protobuf rpc: Params(cosmos.gov.v1beta1.QueryParamsRequest) returns (cosmos.gov.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Deposit queries single deposit information based proposalID, depositAddr.
     *
     * @generated from protobuf rpc: Deposit(cosmos.gov.v1beta1.QueryDepositRequest) returns (cosmos.gov.v1beta1.QueryDepositResponse);
     */
    deposit(input: QueryDepositRequest, options?: RpcOptions): UnaryCall<QueryDepositRequest, QueryDepositResponse>;
    /**
     * Deposits queries all deposits of a single proposal.
     *
     * @generated from protobuf rpc: Deposits(cosmos.gov.v1beta1.QueryDepositsRequest) returns (cosmos.gov.v1beta1.QueryDepositsResponse);
     */
    deposits(input: QueryDepositsRequest, options?: RpcOptions): UnaryCall<QueryDepositsRequest, QueryDepositsResponse>;
    /**
     * TallyResult queries the tally of a proposal vote.
     *
     * @generated from protobuf rpc: TallyResult(cosmos.gov.v1beta1.QueryTallyResultRequest) returns (cosmos.gov.v1beta1.QueryTallyResultResponse);
     */
    tallyResult(input: QueryTallyResultRequest, options?: RpcOptions): UnaryCall<QueryTallyResultRequest, QueryTallyResultResponse>;
}
/**
 * Query defines the gRPC querier service for gov module
 *
 * @generated from protobuf service cosmos.gov.v1beta1.Query
 */
export declare class QueryClient implements IQueryClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * Proposal queries proposal details based on ProposalID.
     *
     * @generated from protobuf rpc: Proposal(cosmos.gov.v1beta1.QueryProposalRequest) returns (cosmos.gov.v1beta1.QueryProposalResponse);
     */
    proposal(input: QueryProposalRequest, options?: RpcOptions): UnaryCall<QueryProposalRequest, QueryProposalResponse>;
    /**
     * Proposals queries all proposals based on given status.
     *
     * @generated from protobuf rpc: Proposals(cosmos.gov.v1beta1.QueryProposalsRequest) returns (cosmos.gov.v1beta1.QueryProposalsResponse);
     */
    proposals(input: QueryProposalsRequest, options?: RpcOptions): UnaryCall<QueryProposalsRequest, QueryProposalsResponse>;
    /**
     * Vote queries voted information based on proposalID, voterAddr.
     *
     * @generated from protobuf rpc: Vote(cosmos.gov.v1beta1.QueryVoteRequest) returns (cosmos.gov.v1beta1.QueryVoteResponse);
     */
    vote(input: QueryVoteRequest, options?: RpcOptions): UnaryCall<QueryVoteRequest, QueryVoteResponse>;
    /**
     * Votes queries votes of a given proposal.
     *
     * @generated from protobuf rpc: Votes(cosmos.gov.v1beta1.QueryVotesRequest) returns (cosmos.gov.v1beta1.QueryVotesResponse);
     */
    votes(input: QueryVotesRequest, options?: RpcOptions): UnaryCall<QueryVotesRequest, QueryVotesResponse>;
    /**
     * Params queries all parameters of the gov module.
     *
     * @generated from protobuf rpc: Params(cosmos.gov.v1beta1.QueryParamsRequest) returns (cosmos.gov.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Deposit queries single deposit information based proposalID, depositAddr.
     *
     * @generated from protobuf rpc: Deposit(cosmos.gov.v1beta1.QueryDepositRequest) returns (cosmos.gov.v1beta1.QueryDepositResponse);
     */
    deposit(input: QueryDepositRequest, options?: RpcOptions): UnaryCall<QueryDepositRequest, QueryDepositResponse>;
    /**
     * Deposits queries all deposits of a single proposal.
     *
     * @generated from protobuf rpc: Deposits(cosmos.gov.v1beta1.QueryDepositsRequest) returns (cosmos.gov.v1beta1.QueryDepositsResponse);
     */
    deposits(input: QueryDepositsRequest, options?: RpcOptions): UnaryCall<QueryDepositsRequest, QueryDepositsResponse>;
    /**
     * TallyResult queries the tally of a proposal vote.
     *
     * @generated from protobuf rpc: TallyResult(cosmos.gov.v1beta1.QueryTallyResultRequest) returns (cosmos.gov.v1beta1.QueryTallyResultResponse);
     */
    tallyResult(input: QueryTallyResultRequest, options?: RpcOptions): UnaryCall<QueryTallyResultRequest, QueryTallyResultResponse>;
}
