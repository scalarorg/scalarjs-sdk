// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/gov/v1beta1/gov.proto" (package "cosmos.gov.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Any } from "../../../google/protobuf/any";
import { Coin } from "../../base/v1beta1/coin";
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.
 *
 * @generated from protobuf enum cosmos.gov.v1beta1.VoteOption
 */
export var VoteOption;
(function (VoteOption) {
    /**
     * VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_UNSPECIFIED = 0;
     */
    VoteOption[VoteOption["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * VOTE_OPTION_YES defines a yes vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_YES = 1;
     */
    VoteOption[VoteOption["YES"] = 1] = "YES";
    /**
     * VOTE_OPTION_ABSTAIN defines an abstain vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_ABSTAIN = 2;
     */
    VoteOption[VoteOption["ABSTAIN"] = 2] = "ABSTAIN";
    /**
     * VOTE_OPTION_NO defines a no vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_NO = 3;
     */
    VoteOption[VoteOption["NO"] = 3] = "NO";
    /**
     * VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_NO_WITH_VETO = 4;
     */
    VoteOption[VoteOption["NO_WITH_VETO"] = 4] = "NO_WITH_VETO";
})(VoteOption || (VoteOption = {}));
/**
 * ProposalStatus enumerates the valid statuses of a proposal.
 *
 * @generated from protobuf enum cosmos.gov.v1beta1.ProposalStatus
 */
export var ProposalStatus;
(function (ProposalStatus) {
    /**
     * PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_UNSPECIFIED = 0;
     */
    ProposalStatus[ProposalStatus["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /**
     * PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
     * period.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_DEPOSIT_PERIOD = 1;
     */
    ProposalStatus[ProposalStatus["DEPOSIT_PERIOD"] = 1] = "DEPOSIT_PERIOD";
    /**
     * PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
     * period.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_VOTING_PERIOD = 2;
     */
    ProposalStatus[ProposalStatus["VOTING_PERIOD"] = 2] = "VOTING_PERIOD";
    /**
     * PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
     * passed.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_PASSED = 3;
     */
    ProposalStatus[ProposalStatus["PASSED"] = 3] = "PASSED";
    /**
     * PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
     * been rejected.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_REJECTED = 4;
     */
    ProposalStatus[ProposalStatus["REJECTED"] = 4] = "REJECTED";
    /**
     * PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
     * failed.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_FAILED = 5;
     */
    ProposalStatus[ProposalStatus["FAILED"] = 5] = "FAILED";
})(ProposalStatus || (ProposalStatus = {}));
// @generated message type with reflection information, may provide speed optimized methods
class WeightedVoteOption$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.WeightedVoteOption", [
            { no: 1, name: "option", kind: "enum", T: () => ["cosmos.gov.v1beta1.VoteOption", VoteOption, "VOTE_OPTION_"] },
            { no: 2, name: "weight", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"weight\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.option = 0;
        message.weight = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.gov.v1beta1.VoteOption option */ 1:
                    message.option = reader.int32();
                    break;
                case /* string weight */ 2:
                    message.weight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.gov.v1beta1.VoteOption option = 1; */
        if (message.option !== 0)
            writer.tag(1, WireType.Varint).int32(message.option);
        /* string weight = 2; */
        if (message.weight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.weight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.WeightedVoteOption
 */
export const WeightedVoteOption = new WeightedVoteOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TextProposal$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.TextProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "cosmos_proto.implements_interface": "Content", "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.TextProposal
 */
export const TextProposal = new TextProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Deposit$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.Deposit", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"proposal_id\"" } },
            { no: 2, name: "depositor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.depositor = "";
        message.amount = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string depositor */ 2:
                    message.depositor = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string depositor = 2; */
        if (message.depositor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.depositor);
        /* repeated cosmos.base.v1beta1.Coin amount = 3; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.Deposit
 */
export const Deposit = new Deposit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.Proposal", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "id", "gogoproto.moretags": "yaml:\"id\"" } },
            { no: 2, name: "content", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "Content" } },
            { no: 3, name: "status", kind: "enum", T: () => ["cosmos.gov.v1beta1.ProposalStatus", ProposalStatus, "PROPOSAL_STATUS_"], options: { "gogoproto.moretags": "yaml:\"proposal_status\"" } },
            { no: 4, name: "final_tally_result", kind: "message", T: () => TallyResult, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"final_tally_result\"" } },
            { no: 5, name: "submit_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"submit_time\"", "gogoproto.stdtime": true } },
            { no: 6, name: "deposit_end_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"deposit_end_time\"", "gogoproto.stdtime": true } },
            { no: 7, name: "total_deposit", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"total_deposit\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 8, name: "voting_start_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"voting_start_time\"", "gogoproto.stdtime": true } },
            { no: 9, name: "voting_end_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"voting_end_time\"", "gogoproto.stdtime": true } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.status = 0;
        message.totalDeposit = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* google.protobuf.Any content */ 2:
                    message.content = Any.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* cosmos.gov.v1beta1.ProposalStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* cosmos.gov.v1beta1.TallyResult final_tally_result */ 4:
                    message.finalTallyResult = TallyResult.internalBinaryRead(reader, reader.uint32(), options, message.finalTallyResult);
                    break;
                case /* google.protobuf.Timestamp submit_time */ 5:
                    message.submitTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submitTime);
                    break;
                case /* google.protobuf.Timestamp deposit_end_time */ 6:
                    message.depositEndTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.depositEndTime);
                    break;
                case /* repeated cosmos.base.v1beta1.Coin total_deposit */ 7:
                    message.totalDeposit.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp voting_start_time */ 8:
                    message.votingStartTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.votingStartTime);
                    break;
                case /* google.protobuf.Timestamp voting_end_time */ 9:
                    message.votingEndTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.votingEndTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* google.protobuf.Any content = 2; */
        if (message.content)
            Any.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.gov.v1beta1.ProposalStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* cosmos.gov.v1beta1.TallyResult final_tally_result = 4; */
        if (message.finalTallyResult)
            TallyResult.internalBinaryWrite(message.finalTallyResult, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp submit_time = 5; */
        if (message.submitTime)
            Timestamp.internalBinaryWrite(message.submitTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp deposit_end_time = 6; */
        if (message.depositEndTime)
            Timestamp.internalBinaryWrite(message.depositEndTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin total_deposit = 7; */
        for (let i = 0; i < message.totalDeposit.length; i++)
            Coin.internalBinaryWrite(message.totalDeposit[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp voting_start_time = 8; */
        if (message.votingStartTime)
            Timestamp.internalBinaryWrite(message.votingStartTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp voting_end_time = 9; */
        if (message.votingEndTime)
            Timestamp.internalBinaryWrite(message.votingEndTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.Proposal
 */
export const Proposal = new Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TallyResult$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.TallyResult", [
            { no: 1, name: "yes", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 2, name: "abstain", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 3, name: "no", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int" } },
            { no: 4, name: "no_with_veto", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"no_with_veto\"" } }
        ], { "gogoproto.equal": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.yes = "";
        message.abstain = "";
        message.no = "";
        message.noWithVeto = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string yes */ 1:
                    message.yes = reader.string();
                    break;
                case /* string abstain */ 2:
                    message.abstain = reader.string();
                    break;
                case /* string no */ 3:
                    message.no = reader.string();
                    break;
                case /* string no_with_veto */ 4:
                    message.noWithVeto = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string yes = 1; */
        if (message.yes !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.yes);
        /* string abstain = 2; */
        if (message.abstain !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.abstain);
        /* string no = 3; */
        if (message.no !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.no);
        /* string no_with_veto = 4; */
        if (message.noWithVeto !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.noWithVeto);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.TallyResult
 */
export const TallyResult = new TallyResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vote$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.Vote", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"proposal_id\"" } },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "option", kind: "enum", T: () => ["cosmos.gov.v1beta1.VoteOption", VoteOption, "VOTE_OPTION_"] },
            { no: 4, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WeightedVoteOption, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.proposalId = "0";
        message.voter = "";
        message.option = 0;
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toString();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                case /* cosmos.gov.v1beta1.VoteOption option = 3 [deprecated = true];*/ 3:
                    message.option = reader.int32();
                    break;
                case /* repeated cosmos.gov.v1beta1.WeightedVoteOption options */ 4:
                    message.options.push(WeightedVoteOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== "0")
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        /* cosmos.gov.v1beta1.VoteOption option = 3 [deprecated = true]; */
        if (message.option !== 0)
            writer.tag(3, WireType.Varint).int32(message.option);
        /* repeated cosmos.gov.v1beta1.WeightedVoteOption options = 4; */
        for (let i = 0; i < message.options.length; i++)
            WeightedVoteOption.internalBinaryWrite(message.options[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.Vote
 */
export const Vote = new Vote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DepositParams$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.DepositParams", [
            { no: 1, name: "min_deposit", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "min_deposit,omitempty", "gogoproto.moretags": "yaml:\"min_deposit\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 2, name: "max_deposit_period", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "max_deposit_period,omitempty", "gogoproto.moretags": "yaml:\"max_deposit_period\"", "gogoproto.stdduration": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.minDeposit = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin min_deposit */ 1:
                    message.minDeposit.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Duration max_deposit_period */ 2:
                    message.maxDepositPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxDepositPeriod);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.Coin min_deposit = 1; */
        for (let i = 0; i < message.minDeposit.length; i++)
            Coin.internalBinaryWrite(message.minDeposit[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration max_deposit_period = 2; */
        if (message.maxDepositPeriod)
            Duration.internalBinaryWrite(message.maxDepositPeriod, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.DepositParams
 */
export const DepositParams = new DepositParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VotingParams$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.VotingParams", [
            { no: 1, name: "voting_period", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "voting_period,omitempty", "gogoproto.moretags": "yaml:\"voting_period\"", "gogoproto.stdduration": true } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration voting_period */ 1:
                    message.votingPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.votingPeriod);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Duration voting_period = 1; */
        if (message.votingPeriod)
            Duration.internalBinaryWrite(message.votingPeriod, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.VotingParams
 */
export const VotingParams = new VotingParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TallyParams$Type extends MessageType {
    constructor() {
        super("cosmos.gov.v1beta1.TallyParams", [
            { no: 1, name: "quorum", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.jsontag": "quorum,omitempty" } },
            { no: 2, name: "threshold", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.jsontag": "threshold,omitempty" } },
            { no: 3, name: "veto_threshold", kind: "scalar", T: 12 /*ScalarType.BYTES*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.jsontag": "veto_threshold,omitempty", "gogoproto.moretags": "yaml:\"veto_threshold\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.quorum = new Uint8Array(0);
        message.threshold = new Uint8Array(0);
        message.vetoThreshold = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes quorum */ 1:
                    message.quorum = reader.bytes();
                    break;
                case /* bytes threshold */ 2:
                    message.threshold = reader.bytes();
                    break;
                case /* bytes veto_threshold */ 3:
                    message.vetoThreshold = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bytes quorum = 1; */
        if (message.quorum.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.quorum);
        /* bytes threshold = 2; */
        if (message.threshold.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.threshold);
        /* bytes veto_threshold = 3; */
        if (message.vetoThreshold.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.vetoThreshold);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.gov.v1beta1.TallyParams
 */
export const TallyParams = new TallyParams$Type();
