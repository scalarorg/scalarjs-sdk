// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/distribution/v1beta1/query.proto" (package "cosmos.distribution.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service for distribution module.
 *
 * @generated from protobuf service cosmos.distribution.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * Params queries params of the distribution module.
     *
     * @generated from protobuf rpc: Params(cosmos.distribution.v1beta1.QueryParamsRequest) returns (cosmos.distribution.v1beta1.QueryParamsResponse);
     */
    params(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ValidatorOutstandingRewards queries rewards of a validator address.
     *
     * @generated from protobuf rpc: ValidatorOutstandingRewards(cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest) returns (cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse);
     */
    validatorOutstandingRewards(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ValidatorCommission queries accumulated commission for a validator.
     *
     * @generated from protobuf rpc: ValidatorCommission(cosmos.distribution.v1beta1.QueryValidatorCommissionRequest) returns (cosmos.distribution.v1beta1.QueryValidatorCommissionResponse);
     */
    validatorCommission(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ValidatorSlashes queries slash events of a validator.
     *
     * @generated from protobuf rpc: ValidatorSlashes(cosmos.distribution.v1beta1.QueryValidatorSlashesRequest) returns (cosmos.distribution.v1beta1.QueryValidatorSlashesResponse);
     */
    validatorSlashes(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DelegationRewards queries the total rewards accrued by a delegation.
     *
     * @generated from protobuf rpc: DelegationRewards(cosmos.distribution.v1beta1.QueryDelegationRewardsRequest) returns (cosmos.distribution.v1beta1.QueryDelegationRewardsResponse);
     */
    delegationRewards(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DelegationTotalRewards queries the total rewards accrued by a each
     * validator.
     *
     * @generated from protobuf rpc: DelegationTotalRewards(cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest) returns (cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse);
     */
    delegationTotalRewards(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DelegatorValidators queries the validators of a delegator.
     *
     * @generated from protobuf rpc: DelegatorValidators(cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest) returns (cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse);
     */
    delegatorValidators(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DelegatorWithdrawAddress queries withdraw address of a delegator.
     *
     * @generated from protobuf rpc: DelegatorWithdrawAddress(cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest) returns (cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse);
     */
    delegatorWithdrawAddress(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * CommunityPool queries the community pool coins.
     *
     * @generated from protobuf rpc: CommunityPool(cosmos.distribution.v1beta1.QueryCommunityPoolRequest) returns (cosmos.distribution.v1beta1.QueryCommunityPoolResponse);
     */
    communityPool(input, options) {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
