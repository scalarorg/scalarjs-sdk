// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/distribution/v1beta1/genesis.proto" (package "cosmos.distribution.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FeePool } from "./distribution";
import { Params } from "./distribution";
import { ValidatorSlashEvent } from "./distribution";
import { DelegatorStartingInfo } from "./distribution";
import { ValidatorCurrentRewards } from "./distribution";
import { ValidatorHistoricalRewards } from "./distribution";
import { ValidatorAccumulatedCommission } from "./distribution";
import { DecCoin } from "../../base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorWithdrawInfo$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.DelegatorWithdrawInfo", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "withdraw_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"withdraw_address\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.withdrawAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string withdraw_address */ 2:
                    message.withdrawAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string withdraw_address = 2; */
        if (message.withdrawAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.withdrawAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegatorWithdrawInfo
 */
export const DelegatorWithdrawInfo = new DelegatorWithdrawInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorOutstandingRewardsRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "outstanding_rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"outstanding_rewards\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        message.outstandingRewards = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.DecCoin outstanding_rewards */ 2:
                    message.outstandingRewards.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* repeated cosmos.base.v1beta1.DecCoin outstanding_rewards = 2; */
        for (let i = 0; i < message.outstandingRewards.length; i++)
            DecCoin.internalBinaryWrite(message.outstandingRewards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
 */
export const ValidatorOutstandingRewardsRecord = new ValidatorOutstandingRewardsRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorAccumulatedCommissionRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "accumulated", kind: "message", T: () => ValidatorAccumulatedCommission, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"accumulated\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated */ 2:
                    message.accumulated = ValidatorAccumulatedCommission.internalBinaryRead(reader, reader.uint32(), options, message.accumulated);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2; */
        if (message.accumulated)
            ValidatorAccumulatedCommission.internalBinaryWrite(message.accumulated, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
 */
export const ValidatorAccumulatedCommissionRecord = new ValidatorAccumulatedCommissionRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorHistoricalRewardsRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "period", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "rewards", kind: "message", T: () => ValidatorHistoricalRewards, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"rewards\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        message.period = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* uint64 period */ 2:
                    message.period = reader.uint64().toString();
                    break;
                case /* cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards */ 3:
                    message.rewards = ValidatorHistoricalRewards.internalBinaryRead(reader, reader.uint32(), options, message.rewards);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* uint64 period = 2; */
        if (message.period !== "0")
            writer.tag(2, WireType.Varint).uint64(message.period);
        /* cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3; */
        if (message.rewards)
            ValidatorHistoricalRewards.internalBinaryWrite(message.rewards, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
 */
export const ValidatorHistoricalRewardsRecord = new ValidatorHistoricalRewardsRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorCurrentRewardsRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "rewards", kind: "message", T: () => ValidatorCurrentRewards, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"rewards\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards */ 2:
                    message.rewards = ValidatorCurrentRewards.internalBinaryRead(reader, reader.uint32(), options, message.rewards);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2; */
        if (message.rewards)
            ValidatorCurrentRewards.internalBinaryWrite(message.rewards, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
 */
export const ValidatorCurrentRewardsRecord = new ValidatorCurrentRewardsRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorStartingInfoRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.DelegatorStartingInfoRecord", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"delegator_address\"" } },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 3, name: "starting_info", kind: "message", T: () => DelegatorStartingInfo, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"starting_info\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorAddress = "";
        message.validatorAddress = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info */ 3:
                    message.startingInfo = DelegatorStartingInfo.internalBinaryRead(reader, reader.uint32(), options, message.startingInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3; */
        if (message.startingInfo)
            DelegatorStartingInfo.internalBinaryWrite(message.startingInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
 */
export const DelegatorStartingInfoRecord = new DelegatorStartingInfoRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorSlashEventRecord$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorSlashEventRecord", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 3, name: "period", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "validator_slash_event", kind: "message", T: () => ValidatorSlashEvent, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"event\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        message.height = "0";
        message.period = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* uint64 height */ 2:
                    message.height = reader.uint64().toString();
                    break;
                case /* uint64 period */ 3:
                    message.period = reader.uint64().toString();
                    break;
                case /* cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event */ 4:
                    message.validatorSlashEvent = ValidatorSlashEvent.internalBinaryRead(reader, reader.uint32(), options, message.validatorSlashEvent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* uint64 height = 2; */
        if (message.height !== "0")
            writer.tag(2, WireType.Varint).uint64(message.height);
        /* uint64 period = 3; */
        if (message.period !== "0")
            writer.tag(3, WireType.Varint).uint64(message.period);
        /* cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4; */
        if (message.validatorSlashEvent)
            ValidatorSlashEvent.internalBinaryWrite(message.validatorSlashEvent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorSlashEventRecord
 */
export const ValidatorSlashEventRecord = new ValidatorSlashEventRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"params\"" } },
            { no: 2, name: "fee_pool", kind: "message", T: () => FeePool, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"fee_pool\"" } },
            { no: 3, name: "delegator_withdraw_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegatorWithdrawInfo, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"delegator_withdraw_infos\"" } },
            { no: 4, name: "previous_proposer", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"previous_proposer\"" } },
            { no: 5, name: "outstanding_rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorOutstandingRewardsRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"outstanding_rewards\"" } },
            { no: 6, name: "validator_accumulated_commissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorAccumulatedCommissionRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_accumulated_commissions\"" } },
            { no: 7, name: "validator_historical_rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorHistoricalRewardsRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_historical_rewards\"" } },
            { no: 8, name: "validator_current_rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorCurrentRewardsRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_current_rewards\"" } },
            { no: 9, name: "delegator_starting_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DelegatorStartingInfoRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"delegator_starting_infos\"" } },
            { no: 10, name: "validator_slash_events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorSlashEventRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_slash_events\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.delegatorWithdrawInfos = [];
        message.previousProposer = "";
        message.outstandingRewards = [];
        message.validatorAccumulatedCommissions = [];
        message.validatorHistoricalRewards = [];
        message.validatorCurrentRewards = [];
        message.delegatorStartingInfos = [];
        message.validatorSlashEvents = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.distribution.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* cosmos.distribution.v1beta1.FeePool fee_pool */ 2:
                    message.feePool = FeePool.internalBinaryRead(reader, reader.uint32(), options, message.feePool);
                    break;
                case /* repeated cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos */ 3:
                    message.delegatorWithdrawInfos.push(DelegatorWithdrawInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string previous_proposer */ 4:
                    message.previousProposer = reader.string();
                    break;
                case /* repeated cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards */ 5:
                    message.outstandingRewards.push(ValidatorOutstandingRewardsRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions */ 6:
                    message.validatorAccumulatedCommissions.push(ValidatorAccumulatedCommissionRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards */ 7:
                    message.validatorHistoricalRewards.push(ValidatorHistoricalRewardsRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards */ 8:
                    message.validatorCurrentRewards.push(ValidatorCurrentRewardsRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos */ 9:
                    message.delegatorStartingInfos.push(DelegatorStartingInfoRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events */ 10:
                    message.validatorSlashEvents.push(ValidatorSlashEventRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.distribution.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.distribution.v1beta1.FeePool fee_pool = 2; */
        if (message.feePool)
            FeePool.internalBinaryWrite(message.feePool, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3; */
        for (let i = 0; i < message.delegatorWithdrawInfos.length; i++)
            DelegatorWithdrawInfo.internalBinaryWrite(message.delegatorWithdrawInfos[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string previous_proposer = 4; */
        if (message.previousProposer !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.previousProposer);
        /* repeated cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5; */
        for (let i = 0; i < message.outstandingRewards.length; i++)
            ValidatorOutstandingRewardsRecord.internalBinaryWrite(message.outstandingRewards[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6; */
        for (let i = 0; i < message.validatorAccumulatedCommissions.length; i++)
            ValidatorAccumulatedCommissionRecord.internalBinaryWrite(message.validatorAccumulatedCommissions[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7; */
        for (let i = 0; i < message.validatorHistoricalRewards.length; i++)
            ValidatorHistoricalRewardsRecord.internalBinaryWrite(message.validatorHistoricalRewards[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8; */
        for (let i = 0; i < message.validatorCurrentRewards.length; i++)
            ValidatorCurrentRewardsRecord.internalBinaryWrite(message.validatorCurrentRewards[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9; */
        for (let i = 0; i < message.delegatorStartingInfos.length; i++)
            DelegatorStartingInfoRecord.internalBinaryWrite(message.delegatorStartingInfos[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10; */
        for (let i = 0; i < message.validatorSlashEvents.length; i++)
            ValidatorSlashEventRecord.internalBinaryWrite(message.validatorSlashEvents[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
