// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/distribution/v1beta1/distribution.proto" (package "cosmos.distribution.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
import { DecCoin } from "../../base/v1beta1/coin";
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.Params", [
            { no: 1, name: "community_tax", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"community_tax\"" } },
            { no: 2, name: "base_proposer_reward", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"base_proposer_reward\"" } },
            { no: 3, name: "bonus_proposer_reward", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"bonus_proposer_reward\"" } },
            { no: 4, name: "withdraw_addr_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/, options: { "gogoproto.moretags": "yaml:\"withdraw_addr_enabled\"" } }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.communityTax = "";
        message.baseProposerReward = "";
        message.bonusProposerReward = "";
        message.withdrawAddrEnabled = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string community_tax */ 1:
                    message.communityTax = reader.string();
                    break;
                case /* string base_proposer_reward */ 2:
                    message.baseProposerReward = reader.string();
                    break;
                case /* string bonus_proposer_reward */ 3:
                    message.bonusProposerReward = reader.string();
                    break;
                case /* bool withdraw_addr_enabled */ 4:
                    message.withdrawAddrEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string community_tax = 1; */
        if (message.communityTax !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.communityTax);
        /* string base_proposer_reward = 2; */
        if (message.baseProposerReward !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseProposerReward);
        /* string bonus_proposer_reward = 3; */
        if (message.bonusProposerReward !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bonusProposerReward);
        /* bool withdraw_addr_enabled = 4; */
        if (message.withdrawAddrEnabled !== false)
            writer.tag(4, WireType.Varint).bool(message.withdrawAddrEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorHistoricalRewards$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorHistoricalRewards", [
            { no: 1, name: "cumulative_reward_ratio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"cumulative_reward_ratio\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } },
            { no: 2, name: "reference_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "gogoproto.moretags": "yaml:\"reference_count\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.cumulativeRewardRatio = [];
        message.referenceCount = 0;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin cumulative_reward_ratio */ 1:
                    message.cumulativeRewardRatio.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 reference_count */ 2:
                    message.referenceCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1; */
        for (let i = 0; i < message.cumulativeRewardRatio.length; i++)
            DecCoin.internalBinaryWrite(message.cumulativeRewardRatio[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 reference_count = 2; */
        if (message.referenceCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.referenceCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorHistoricalRewards
 */
export const ValidatorHistoricalRewards = new ValidatorHistoricalRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorCurrentRewards$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorCurrentRewards", [
            { no: 1, name: "rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } },
            { no: 2, name: "period", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rewards = [];
        message.period = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin rewards */ 1:
                    message.rewards.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 period */ 2:
                    message.period = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.DecCoin rewards = 1; */
        for (let i = 0; i < message.rewards.length; i++)
            DecCoin.internalBinaryWrite(message.rewards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 period = 2; */
        if (message.period !== "0")
            writer.tag(2, WireType.Varint).uint64(message.period);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorCurrentRewards
 */
export const ValidatorCurrentRewards = new ValidatorCurrentRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorAccumulatedCommission$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorAccumulatedCommission", [
            { no: 1, name: "commission", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.commission = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin commission */ 1:
                    message.commission.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.DecCoin commission = 1; */
        for (let i = 0; i < message.commission.length; i++)
            DecCoin.internalBinaryWrite(message.commission[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorAccumulatedCommission
 */
export const ValidatorAccumulatedCommission = new ValidatorAccumulatedCommission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorOutstandingRewards$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorOutstandingRewards", [
            { no: 1, name: "rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"rewards\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.rewards = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin rewards */ 1:
                    message.rewards.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.DecCoin rewards = 1; */
        for (let i = 0; i < message.rewards.length; i++)
            DecCoin.internalBinaryWrite(message.rewards[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorOutstandingRewards
 */
export const ValidatorOutstandingRewards = new ValidatorOutstandingRewards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorSlashEvent$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorSlashEvent", [
            { no: 1, name: "validator_period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"validator_period\"" } },
            { no: 2, name: "fraction", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorPeriod = "0";
        message.fraction = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 validator_period */ 1:
                    message.validatorPeriod = reader.uint64().toString();
                    break;
                case /* string fraction */ 2:
                    message.fraction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 validator_period = 1; */
        if (message.validatorPeriod !== "0")
            writer.tag(1, WireType.Varint).uint64(message.validatorPeriod);
        /* string fraction = 2; */
        if (message.fraction !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fraction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorSlashEvent
 */
export const ValidatorSlashEvent = new ValidatorSlashEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidatorSlashEvents$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.ValidatorSlashEvents", [
            { no: 1, name: "validator_slash_events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ValidatorSlashEvent, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"validator_slash_events\"" } }
        ], { "gogoproto.goproto_stringer": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorSlashEvents = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events */ 1:
                    message.validatorSlashEvents.push(ValidatorSlashEvent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1; */
        for (let i = 0; i < message.validatorSlashEvents.length; i++)
            ValidatorSlashEvent.internalBinaryWrite(message.validatorSlashEvents[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorSlashEvents
 */
export const ValidatorSlashEvents = new ValidatorSlashEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeePool$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.FeePool", [
            { no: 1, name: "community_pool", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"community_pool\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.communityPool = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.DecCoin community_pool */ 1:
                    message.communityPool.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated cosmos.base.v1beta1.DecCoin community_pool = 1; */
        for (let i = 0; i < message.communityPool.length; i++)
            DecCoin.internalBinaryWrite(message.communityPool[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.FeePool
 */
export const FeePool = new FeePool$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommunityPoolSpendProposal$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.CommunityPoolSpendProposal", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": false, "gogoproto.equal": false });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.recipient = "";
        message.amount = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string recipient */ 3:
                    message.recipient = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 4:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string recipient = 3; */
        if (message.recipient !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipient);
        /* repeated cosmos.base.v1beta1.Coin amount = 4; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.CommunityPoolSpendProposal
 */
export const CommunityPoolSpendProposal = new CommunityPoolSpendProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegatorStartingInfo$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.DelegatorStartingInfo", [
            { no: 1, name: "previous_period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.moretags": "yaml:\"previous_period\"" } },
            { no: 2, name: "stake", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"stake\"" } },
            { no: 3, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/, options: { "gogoproto.jsontag": "creation_height", "gogoproto.moretags": "yaml:\"creation_height\"" } }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.previousPeriod = "0";
        message.stake = "";
        message.height = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 previous_period */ 1:
                    message.previousPeriod = reader.uint64().toString();
                    break;
                case /* string stake */ 2:
                    message.stake = reader.string();
                    break;
                case /* uint64 height */ 3:
                    message.height = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint64 previous_period = 1; */
        if (message.previousPeriod !== "0")
            writer.tag(1, WireType.Varint).uint64(message.previousPeriod);
        /* string stake = 2; */
        if (message.stake !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stake);
        /* uint64 height = 3; */
        if (message.height !== "0")
            writer.tag(3, WireType.Varint).uint64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegatorStartingInfo
 */
export const DelegatorStartingInfo = new DelegatorStartingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelegationDelegatorReward$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.DelegationDelegatorReward", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"validator_address\"" } },
            { no: 2, name: "reward", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DecCoin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.DecCoins" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.validatorAddress = "";
        message.reward = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.DecCoin reward */ 2:
                    message.reward.push(DecCoin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* repeated cosmos.base.v1beta1.DecCoin reward = 2; */
        for (let i = 0; i < message.reward.length; i++)
            DecCoin.internalBinaryWrite(message.reward[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegationDelegatorReward
 */
export const DelegationDelegatorReward = new DelegationDelegatorReward$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommunityPoolSpendProposalWithDeposit$Type extends MessageType {
    constructor() {
        super("cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"title\"" } },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"description\"" } },
            { no: 3, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"recipient\"" } },
            { no: 4, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"amount\"" } },
            { no: 5, name: "deposit", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"deposit\"" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.goproto_stringer": true });
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.title = "";
        message.description = "";
        message.recipient = "";
        message.amount = "";
        message.deposit = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string recipient */ 3:
                    message.recipient = reader.string();
                    break;
                case /* string amount */ 4:
                    message.amount = reader.string();
                    break;
                case /* string deposit */ 5:
                    message.deposit = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string recipient = 3; */
        if (message.recipient !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipient);
        /* string amount = 4; */
        if (message.amount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amount);
        /* string deposit = 5; */
        if (message.deposit !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deposit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit
 */
export const CommunityPoolSpendProposalWithDeposit = new CommunityPoolSpendProposalWithDeposit$Type();
