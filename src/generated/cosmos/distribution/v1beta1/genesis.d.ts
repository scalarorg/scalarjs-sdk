// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/distribution/v1beta1/genesis.proto" (package "cosmos.distribution.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FeePool } from "./distribution";
import { Params } from "./distribution";
import { ValidatorSlashEvent } from "./distribution";
import { DelegatorStartingInfo } from "./distribution";
import { ValidatorCurrentRewards } from "./distribution";
import { ValidatorHistoricalRewards } from "./distribution";
import { ValidatorAccumulatedCommission } from "./distribution";
import { DecCoin } from "../../base/v1beta1/coin";
/**
 * DelegatorWithdrawInfo is the address for where distributions rewards are
 * withdrawn to by default this struct is only used at genesis to feed in
 * default withdraw addresses.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.DelegatorWithdrawInfo
 */
export interface DelegatorWithdrawInfo {
    /**
     * delegator_address is the address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * withdraw_address is the address to withdraw the delegation rewards to.
     *
     * @generated from protobuf field: string withdraw_address = 2;
     */
    withdrawAddress: string;
}
/**
 * ValidatorOutstandingRewardsRecord is used for import/export via genesis json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
 */
export interface ValidatorOutstandingRewardsRecord {
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * outstanding_rewards represents the oustanding rewards of a validator.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.DecCoin outstanding_rewards = 2;
     */
    outstandingRewards: DecCoin[];
}
/**
 * ValidatorAccumulatedCommissionRecord is used for import / export via genesis
 * json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
 */
export interface ValidatorAccumulatedCommissionRecord {
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * accumulated is the accumulated commission of a validator.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2;
     */
    accumulated?: ValidatorAccumulatedCommission;
}
/**
 * ValidatorHistoricalRewardsRecord is used for import / export via genesis
 * json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
 */
export interface ValidatorHistoricalRewardsRecord {
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * period defines the period the historical rewards apply to.
     *
     * @generated from protobuf field: uint64 period = 2;
     */
    period: string;
    /**
     * rewards defines the historical rewards of a validator.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3;
     */
    rewards?: ValidatorHistoricalRewards;
}
/**
 * ValidatorCurrentRewardsRecord is used for import / export via genesis json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
 */
export interface ValidatorCurrentRewardsRecord {
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * rewards defines the current rewards of a validator.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2;
     */
    rewards?: ValidatorCurrentRewards;
}
/**
 * DelegatorStartingInfoRecord used for import / export via genesis json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
 */
export interface DelegatorStartingInfoRecord {
    /**
     * delegator_address is the address of the delegator.
     *
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * starting_info defines the starting info of a delegator.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3;
     */
    startingInfo?: DelegatorStartingInfo;
}
/**
 * ValidatorSlashEventRecord is used for import / export via genesis json.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.ValidatorSlashEventRecord
 */
export interface ValidatorSlashEventRecord {
    /**
     * validator_address is the address of the validator.
     *
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * height defines the block height at which the slash event occured.
     *
     * @generated from protobuf field: uint64 height = 2;
     */
    height: string;
    /**
     * period is the period of the slash event.
     *
     * @generated from protobuf field: uint64 period = 3;
     */
    period: string;
    /**
     * validator_slash_event describes the slash event.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4;
     */
    validatorSlashEvent?: ValidatorSlashEvent;
}
/**
 * GenesisState defines the distribution module's genesis state.
 *
 * @generated from protobuf message cosmos.distribution.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * params defines all the paramaters of the module.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.Params params = 1;
     */
    params?: Params;
    /**
     * fee_pool defines the fee pool at genesis.
     *
     * @generated from protobuf field: cosmos.distribution.v1beta1.FeePool fee_pool = 2;
     */
    feePool?: FeePool;
    /**
     * fee_pool defines the delegator withdraw infos at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3;
     */
    delegatorWithdrawInfos: DelegatorWithdrawInfo[];
    /**
     * fee_pool defines the previous proposer at genesis.
     *
     * @generated from protobuf field: string previous_proposer = 4;
     */
    previousProposer: string;
    /**
     * fee_pool defines the outstanding rewards of all validators at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5;
     */
    outstandingRewards: ValidatorOutstandingRewardsRecord[];
    /**
     * fee_pool defines the accumulated commisions of all validators at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6;
     */
    validatorAccumulatedCommissions: ValidatorAccumulatedCommissionRecord[];
    /**
     * fee_pool defines the historical rewards of all validators at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7;
     */
    validatorHistoricalRewards: ValidatorHistoricalRewardsRecord[];
    /**
     * fee_pool defines the current rewards of all validators at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8;
     */
    validatorCurrentRewards: ValidatorCurrentRewardsRecord[];
    /**
     * fee_pool defines the delegator starting infos at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9;
     */
    delegatorStartingInfos: DelegatorStartingInfoRecord[];
    /**
     * fee_pool defines the validator slash events at genesis.
     *
     * @generated from protobuf field: repeated cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10;
     */
    validatorSlashEvents: ValidatorSlashEventRecord[];
}
declare class DelegatorWithdrawInfo$Type extends MessageType<DelegatorWithdrawInfo> {
    constructor();
    create(value?: PartialMessage<DelegatorWithdrawInfo>): DelegatorWithdrawInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelegatorWithdrawInfo): DelegatorWithdrawInfo;
    internalBinaryWrite(message: DelegatorWithdrawInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegatorWithdrawInfo
 */
export declare const DelegatorWithdrawInfo: DelegatorWithdrawInfo$Type;
declare class ValidatorOutstandingRewardsRecord$Type extends MessageType<ValidatorOutstandingRewardsRecord> {
    constructor();
    create(value?: PartialMessage<ValidatorOutstandingRewardsRecord>): ValidatorOutstandingRewardsRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorOutstandingRewardsRecord): ValidatorOutstandingRewardsRecord;
    internalBinaryWrite(message: ValidatorOutstandingRewardsRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord
 */
export declare const ValidatorOutstandingRewardsRecord: ValidatorOutstandingRewardsRecord$Type;
declare class ValidatorAccumulatedCommissionRecord$Type extends MessageType<ValidatorAccumulatedCommissionRecord> {
    constructor();
    create(value?: PartialMessage<ValidatorAccumulatedCommissionRecord>): ValidatorAccumulatedCommissionRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorAccumulatedCommissionRecord): ValidatorAccumulatedCommissionRecord;
    internalBinaryWrite(message: ValidatorAccumulatedCommissionRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord
 */
export declare const ValidatorAccumulatedCommissionRecord: ValidatorAccumulatedCommissionRecord$Type;
declare class ValidatorHistoricalRewardsRecord$Type extends MessageType<ValidatorHistoricalRewardsRecord> {
    constructor();
    create(value?: PartialMessage<ValidatorHistoricalRewardsRecord>): ValidatorHistoricalRewardsRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorHistoricalRewardsRecord): ValidatorHistoricalRewardsRecord;
    internalBinaryWrite(message: ValidatorHistoricalRewardsRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord
 */
export declare const ValidatorHistoricalRewardsRecord: ValidatorHistoricalRewardsRecord$Type;
declare class ValidatorCurrentRewardsRecord$Type extends MessageType<ValidatorCurrentRewardsRecord> {
    constructor();
    create(value?: PartialMessage<ValidatorCurrentRewardsRecord>): ValidatorCurrentRewardsRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorCurrentRewardsRecord): ValidatorCurrentRewardsRecord;
    internalBinaryWrite(message: ValidatorCurrentRewardsRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord
 */
export declare const ValidatorCurrentRewardsRecord: ValidatorCurrentRewardsRecord$Type;
declare class DelegatorStartingInfoRecord$Type extends MessageType<DelegatorStartingInfoRecord> {
    constructor();
    create(value?: PartialMessage<DelegatorStartingInfoRecord>): DelegatorStartingInfoRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelegatorStartingInfoRecord): DelegatorStartingInfoRecord;
    internalBinaryWrite(message: DelegatorStartingInfoRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.DelegatorStartingInfoRecord
 */
export declare const DelegatorStartingInfoRecord: DelegatorStartingInfoRecord$Type;
declare class ValidatorSlashEventRecord$Type extends MessageType<ValidatorSlashEventRecord> {
    constructor();
    create(value?: PartialMessage<ValidatorSlashEventRecord>): ValidatorSlashEventRecord;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidatorSlashEventRecord): ValidatorSlashEventRecord;
    internalBinaryWrite(message: ValidatorSlashEventRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.ValidatorSlashEventRecord
 */
export declare const ValidatorSlashEventRecord: ValidatorSlashEventRecord$Type;
declare class GenesisState$Type extends MessageType<GenesisState> {
    constructor();
    create(value?: PartialMessage<GenesisState>): GenesisState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState;
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.distribution.v1beta1.GenesisState
 */
export declare const GenesisState: GenesisState$Type;
export {};
