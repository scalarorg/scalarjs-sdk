// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/bank/v1beta1/authz.proto" (package "cosmos.bank.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../base/v1beta1/coin";
/**
 * SendAuthorization allows the grantee to spend up to spend_limit coins from
 * the granter's account.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.bank.v1beta1.SendAuthorization
 */
export interface SendAuthorization {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin spend_limit = 1;
     */
    spendLimit: Coin[];
}
declare class SendAuthorization$Type extends MessageType<SendAuthorization> {
    constructor();
    create(value?: PartialMessage<SendAuthorization>): SendAuthorization;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAuthorization): SendAuthorization;
    internalBinaryWrite(message: SendAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.bank.v1beta1.SendAuthorization
 */
export declare const SendAuthorization: SendAuthorization$Type;
export {};
