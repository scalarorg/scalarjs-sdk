// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/bank/v1beta1/query.proto" (package "cosmos.bank.v1beta1", syntax proto3)
// tslint:disable
import { Query } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.bank.v1beta1.Query
 */
export class QueryClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Query.typeName;
        this.methods = Query.methods;
        this.options = Query.options;
    }
    /**
     * Balance queries the balance of a single coin for a single account.
     *
     * @generated from protobuf rpc: Balance(cosmos.bank.v1beta1.QueryBalanceRequest) returns (cosmos.bank.v1beta1.QueryBalanceResponse);
     */
    balance(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * AllBalances queries the balance of all coins for a single account.
     *
     * @generated from protobuf rpc: AllBalances(cosmos.bank.v1beta1.QueryAllBalancesRequest) returns (cosmos.bank.v1beta1.QueryAllBalancesResponse);
     */
    allBalances(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * SpendableBalances queries the spenable balance of all coins for a single
     * account.
     *
     * @generated from protobuf rpc: SpendableBalances(cosmos.bank.v1beta1.QuerySpendableBalancesRequest) returns (cosmos.bank.v1beta1.QuerySpendableBalancesResponse);
     */
    spendableBalances(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * TotalSupply queries the total supply of all coins.
     *
     * @generated from protobuf rpc: TotalSupply(cosmos.bank.v1beta1.QueryTotalSupplyRequest) returns (cosmos.bank.v1beta1.QueryTotalSupplyResponse);
     */
    totalSupply(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * SupplyOf queries the supply of a single coin.
     *
     * @generated from protobuf rpc: SupplyOf(cosmos.bank.v1beta1.QuerySupplyOfRequest) returns (cosmos.bank.v1beta1.QuerySupplyOfResponse);
     */
    supplyOf(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * Params queries the parameters of x/bank module.
     *
     * @generated from protobuf rpc: Params(cosmos.bank.v1beta1.QueryParamsRequest) returns (cosmos.bank.v1beta1.QueryParamsResponse);
     */
    params(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DenomsMetadata queries the client metadata of a given coin denomination.
     *
     * @generated from protobuf rpc: DenomMetadata(cosmos.bank.v1beta1.QueryDenomMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomMetadataResponse);
     */
    denomMetadata(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * DenomsMetadata queries the client metadata for all registered coin denominations.
     *
     * @generated from protobuf rpc: DenomsMetadata(cosmos.bank.v1beta1.QueryDenomsMetadataRequest) returns (cosmos.bank.v1beta1.QueryDenomsMetadataResponse);
     */
    denomsMetadata(input, options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
