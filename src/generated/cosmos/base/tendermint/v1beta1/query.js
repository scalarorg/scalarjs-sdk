// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/tendermint/v1beta1/query.proto" (package "cosmos.base.tendermint.v1beta1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/tendermint/v1beta1/query.proto" (package "cosmos.base.tendermint.v1beta1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DefaultNodeInfo } from "../../../../tendermint/p2p/types";
import { Block } from "../../../../tendermint/types/block";
import { BlockID } from "../../../../tendermint/types/types";
import { Any } from "../../../../google/protobuf/any";
import { PageResponse } from "../../query/v1beta1/pagination";
import { PageRequest } from "../../query/v1beta1/pagination";
// @generated message type with reflection information, may provide speed optimized methods
class GetValidatorSetByHeightRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.height = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest
 */
export const GetValidatorSetByHeightRequest = new GetValidatorSetByHeightRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetValidatorSetByHeightResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse", [
            { no: 1, name: "block_height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator },
            { no: 3, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.blockHeight = "0";
        message.validators = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 block_height */ 1:
                    message.blockHeight = reader.int64().toString();
                    break;
                case /* repeated cosmos.base.tendermint.v1beta1.Validator validators */ 2:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 3:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 block_height = 1; */
        if (message.blockHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.blockHeight);
        /* repeated cosmos.base.tendermint.v1beta1.Validator validators = 2; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 3; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse
 */
export const GetValidatorSetByHeightResponse = new GetValidatorSetByHeightResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLatestValidatorSetRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest
 */
export const GetLatestValidatorSetRequest = new GetLatestValidatorSetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLatestValidatorSetResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse", [
            { no: 1, name: "block_height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Validator },
            { no: 3, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.blockHeight = "0";
        message.validators = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 block_height */ 1:
                    message.blockHeight = reader.int64().toString();
                    break;
                case /* repeated cosmos.base.tendermint.v1beta1.Validator validators */ 2:
                    message.validators.push(Validator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 3:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 block_height = 1; */
        if (message.blockHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.blockHeight);
        /* repeated cosmos.base.tendermint.v1beta1.Validator validators = 2; */
        for (let i = 0; i < message.validators.length; i++)
            Validator.internalBinaryWrite(message.validators[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 3; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse
 */
export const GetLatestValidatorSetResponse = new GetLatestValidatorSetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Validator$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.Validator", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pub_key", kind: "message", T: () => Any },
            { no: 3, name: "voting_power", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "proposer_priority", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.address = "";
        message.votingPower = "0";
        message.proposerPriority = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* google.protobuf.Any pub_key */ 2:
                    message.pubKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.pubKey);
                    break;
                case /* int64 voting_power */ 3:
                    message.votingPower = reader.int64().toString();
                    break;
                case /* int64 proposer_priority */ 4:
                    message.proposerPriority = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* google.protobuf.Any pub_key = 2; */
        if (message.pubKey)
            Any.internalBinaryWrite(message.pubKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 voting_power = 3; */
        if (message.votingPower !== "0")
            writer.tag(3, WireType.Varint).int64(message.votingPower);
        /* int64 proposer_priority = 4; */
        if (message.proposerPriority !== "0")
            writer.tag(4, WireType.Varint).int64(message.proposerPriority);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.Validator
 */
export const Validator = new Validator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlockByHeightRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest", [
            { no: 1, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.height = "0";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 height */ 1:
                    message.height = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 height = 1; */
        if (message.height !== "0")
            writer.tag(1, WireType.Varint).int64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest
 */
export const GetBlockByHeightRequest = new GetBlockByHeightRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBlockByHeightResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse", [
            { no: 1, name: "block_id", kind: "message", T: () => BlockID },
            { no: 2, name: "block", kind: "message", T: () => Block }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.BlockID block_id */ 1:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* tendermint.types.Block block */ 2:
                    message.block = Block.internalBinaryRead(reader, reader.uint32(), options, message.block);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.types.BlockID block_id = 1; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.Block block = 2; */
        if (message.block)
            Block.internalBinaryWrite(message.block, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse
 */
export const GetBlockByHeightResponse = new GetBlockByHeightResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLatestBlockRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetLatestBlockRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetLatestBlockRequest
 */
export const GetLatestBlockRequest = new GetLatestBlockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLatestBlockResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetLatestBlockResponse", [
            { no: 1, name: "block_id", kind: "message", T: () => BlockID },
            { no: 2, name: "block", kind: "message", T: () => Block }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.types.BlockID block_id */ 1:
                    message.blockId = BlockID.internalBinaryRead(reader, reader.uint32(), options, message.blockId);
                    break;
                case /* tendermint.types.Block block */ 2:
                    message.block = Block.internalBinaryRead(reader, reader.uint32(), options, message.block);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.types.BlockID block_id = 1; */
        if (message.blockId)
            BlockID.internalBinaryWrite(message.blockId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.types.Block block = 2; */
        if (message.block)
            Block.internalBinaryWrite(message.block, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetLatestBlockResponse
 */
export const GetLatestBlockResponse = new GetLatestBlockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSyncingRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetSyncingRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetSyncingRequest
 */
export const GetSyncingRequest = new GetSyncingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSyncingResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetSyncingResponse", [
            { no: 1, name: "syncing", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.syncing = false;
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool syncing */ 1:
                    message.syncing = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool syncing = 1; */
        if (message.syncing !== false)
            writer.tag(1, WireType.Varint).bool(message.syncing);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetSyncingResponse
 */
export const GetSyncingResponse = new GetSyncingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeInfoRequest$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetNodeInfoRequest", []);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetNodeInfoRequest
 */
export const GetNodeInfoRequest = new GetNodeInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNodeInfoResponse$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.GetNodeInfoResponse", [
            { no: 1, name: "default_node_info", kind: "message", T: () => DefaultNodeInfo },
            { no: 2, name: "application_version", kind: "message", T: () => VersionInfo }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.p2p.DefaultNodeInfo default_node_info */ 1:
                    message.defaultNodeInfo = DefaultNodeInfo.internalBinaryRead(reader, reader.uint32(), options, message.defaultNodeInfo);
                    break;
                case /* cosmos.base.tendermint.v1beta1.VersionInfo application_version */ 2:
                    message.applicationVersion = VersionInfo.internalBinaryRead(reader, reader.uint32(), options, message.applicationVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.p2p.DefaultNodeInfo default_node_info = 1; */
        if (message.defaultNodeInfo)
            DefaultNodeInfo.internalBinaryWrite(message.defaultNodeInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.tendermint.v1beta1.VersionInfo application_version = 2; */
        if (message.applicationVersion)
            VersionInfo.internalBinaryWrite(message.applicationVersion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.GetNodeInfoResponse
 */
export const GetNodeInfoResponse = new GetNodeInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionInfo$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.VersionInfo", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "git_commit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "build_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "go_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "build_deps", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Module },
            { no: 8, name: "cosmos_sdk_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.name = "";
        message.appName = "";
        message.version = "";
        message.gitCommit = "";
        message.buildTags = "";
        message.goVersion = "";
        message.buildDeps = [];
        message.cosmosSdkVersion = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string app_name */ 2:
                    message.appName = reader.string();
                    break;
                case /* string version */ 3:
                    message.version = reader.string();
                    break;
                case /* string git_commit */ 4:
                    message.gitCommit = reader.string();
                    break;
                case /* string build_tags */ 5:
                    message.buildTags = reader.string();
                    break;
                case /* string go_version */ 6:
                    message.goVersion = reader.string();
                    break;
                case /* repeated cosmos.base.tendermint.v1beta1.Module build_deps */ 7:
                    message.buildDeps.push(Module.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string cosmos_sdk_version */ 8:
                    message.cosmosSdkVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string app_name = 2; */
        if (message.appName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.appName);
        /* string version = 3; */
        if (message.version !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.version);
        /* string git_commit = 4; */
        if (message.gitCommit !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gitCommit);
        /* string build_tags = 5; */
        if (message.buildTags !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.buildTags);
        /* string go_version = 6; */
        if (message.goVersion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.goVersion);
        /* repeated cosmos.base.tendermint.v1beta1.Module build_deps = 7; */
        for (let i = 0; i < message.buildDeps.length; i++)
            Module.internalBinaryWrite(message.buildDeps[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* string cosmos_sdk_version = 8; */
        if (message.cosmosSdkVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.cosmosSdkVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.VersionInfo
 */
export const VersionInfo = new VersionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Module$Type extends MessageType {
    constructor() {
        super("cosmos.base.tendermint.v1beta1.Module", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sum", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.path = "";
        message.version = "";
        message.sum = "";
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* string sum */ 3:
                    message.sum = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* string sum = 3; */
        if (message.sum !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.tendermint.v1beta1.Module
 */
export const Module = new Module$Type();
/**
 * @generated ServiceType for protobuf service cosmos.base.tendermint.v1beta1.Service
 */
export const Service = new ServiceType("cosmos.base.tendermint.v1beta1.Service", [
    { name: "GetNodeInfo", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/node_info" } }, I: GetNodeInfoRequest, O: GetNodeInfoResponse },
    { name: "GetSyncing", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/syncing" } }, I: GetSyncingRequest, O: GetSyncingResponse },
    { name: "GetLatestBlock", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/blocks/latest" } }, I: GetLatestBlockRequest, O: GetLatestBlockResponse },
    { name: "GetBlockByHeight", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/blocks/{height}" } }, I: GetBlockByHeightRequest, O: GetBlockByHeightResponse },
    { name: "GetLatestValidatorSet", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/validatorsets/latest" } }, I: GetLatestValidatorSetRequest, O: GetLatestValidatorSetResponse },
    { name: "GetValidatorSetByHeight", options: { "google.api.http": { get: "/cosmos/base/tendermint/v1beta1/validatorsets/{height}" } }, I: GetValidatorSetByHeightRequest, O: GetValidatorSetByHeightResponse }
]);
