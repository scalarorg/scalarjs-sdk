// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/reflection/v1beta1/reflection.proto" (package "cosmos.base.reflection.v1beta1", syntax proto3)
// tslint:disable
import { ReflectionService } from "./reflection";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * ReflectionService defines a service for interface reflection.
 *
 * @generated from protobuf service cosmos.base.reflection.v1beta1.ReflectionService
 */
export class ReflectionServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = ReflectionService.typeName;
        this.methods = ReflectionService.methods;
        this.options = ReflectionService.options;
    }
    /**
     * ListAllInterfaces lists all the interfaces registered in the interface
     * registry.
     *
     * @generated from protobuf rpc: ListAllInterfaces(cosmos.base.reflection.v1beta1.ListAllInterfacesRequest) returns (cosmos.base.reflection.v1beta1.ListAllInterfacesResponse);
     */
    listAllInterfaces(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * ListImplementations list all the concrete types that implement a given
     * interface.
     *
     * @generated from protobuf rpc: ListImplementations(cosmos.base.reflection.v1beta1.ListImplementationsRequest) returns (cosmos.base.reflection.v1beta1.ListImplementationsResponse);
     */
    listImplementations(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
}
