// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/store/v1beta1/listening.proto" (package "cosmos.base.store.v1beta1", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ResponseDeliverTx } from "../../../../tendermint/abci/types";
import { RequestDeliverTx } from "../../../../tendermint/abci/types";
import { ResponseCommit } from "../../../../tendermint/abci/types";
import { ResponseEndBlock } from "../../../../tendermint/abci/types";
import { RequestEndBlock } from "../../../../tendermint/abci/types";
import { ResponseBeginBlock } from "../../../../tendermint/abci/types";
import { RequestBeginBlock } from "../../../../tendermint/abci/types";
// @generated message type with reflection information, may provide speed optimized methods
class StoreKVPair$Type extends MessageType {
    constructor() {
        super("cosmos.base.store.v1beta1.StoreKVPair", [
            { no: 1, name: "store_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "delete", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.storeKey = "";
        message.delete = false;
        message.key = new Uint8Array(0);
        message.value = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string store_key */ 1:
                    message.storeKey = reader.string();
                    break;
                case /* bool delete */ 2:
                    message.delete = reader.bool();
                    break;
                case /* bytes key */ 3:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 4:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string store_key = 1; */
        if (message.storeKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.storeKey);
        /* bool delete = 2; */
        if (message.delete !== false)
            writer.tag(2, WireType.Varint).bool(message.delete);
        /* bytes key = 3; */
        if (message.key.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 4; */
        if (message.value.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.StoreKVPair
 */
export const StoreKVPair = new StoreKVPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockMetadata$Type extends MessageType {
    constructor() {
        super("cosmos.base.store.v1beta1.BlockMetadata", [
            { no: 1, name: "request_begin_block", kind: "message", T: () => RequestBeginBlock },
            { no: 2, name: "response_begin_block", kind: "message", T: () => ResponseBeginBlock },
            { no: 3, name: "deliver_txs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BlockMetadata_DeliverTx },
            { no: 4, name: "request_end_block", kind: "message", T: () => RequestEndBlock },
            { no: 5, name: "response_end_block", kind: "message", T: () => ResponseEndBlock },
            { no: 6, name: "response_commit", kind: "message", T: () => ResponseCommit }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        message.deliverTxs = [];
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.abci.RequestBeginBlock request_begin_block */ 1:
                    message.requestBeginBlock = RequestBeginBlock.internalBinaryRead(reader, reader.uint32(), options, message.requestBeginBlock);
                    break;
                case /* tendermint.abci.ResponseBeginBlock response_begin_block */ 2:
                    message.responseBeginBlock = ResponseBeginBlock.internalBinaryRead(reader, reader.uint32(), options, message.responseBeginBlock);
                    break;
                case /* repeated cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs */ 3:
                    message.deliverTxs.push(BlockMetadata_DeliverTx.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* tendermint.abci.RequestEndBlock request_end_block */ 4:
                    message.requestEndBlock = RequestEndBlock.internalBinaryRead(reader, reader.uint32(), options, message.requestEndBlock);
                    break;
                case /* tendermint.abci.ResponseEndBlock response_end_block */ 5:
                    message.responseEndBlock = ResponseEndBlock.internalBinaryRead(reader, reader.uint32(), options, message.responseEndBlock);
                    break;
                case /* tendermint.abci.ResponseCommit response_commit */ 6:
                    message.responseCommit = ResponseCommit.internalBinaryRead(reader, reader.uint32(), options, message.responseCommit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.abci.RequestBeginBlock request_begin_block = 1; */
        if (message.requestBeginBlock)
            RequestBeginBlock.internalBinaryWrite(message.requestBeginBlock, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.abci.ResponseBeginBlock response_begin_block = 2; */
        if (message.responseBeginBlock)
            ResponseBeginBlock.internalBinaryWrite(message.responseBeginBlock, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3; */
        for (let i = 0; i < message.deliverTxs.length; i++)
            BlockMetadata_DeliverTx.internalBinaryWrite(message.deliverTxs[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.abci.RequestEndBlock request_end_block = 4; */
        if (message.requestEndBlock)
            RequestEndBlock.internalBinaryWrite(message.requestEndBlock, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.abci.ResponseEndBlock response_end_block = 5; */
        if (message.responseEndBlock)
            ResponseEndBlock.internalBinaryWrite(message.responseEndBlock, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.abci.ResponseCommit response_commit = 6; */
        if (message.responseCommit)
            ResponseCommit.internalBinaryWrite(message.responseCommit, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.BlockMetadata
 */
export const BlockMetadata = new BlockMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockMetadata_DeliverTx$Type extends MessageType {
    constructor() {
        super("cosmos.base.store.v1beta1.BlockMetadata.DeliverTx", [
            { no: 1, name: "request", kind: "message", T: () => RequestDeliverTx },
            { no: 2, name: "response", kind: "message", T: () => ResponseDeliverTx }
        ]);
    }
    create(value) {
        const message = globalThis.Object.create((this.messagePrototype));
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tendermint.abci.RequestDeliverTx request */ 1:
                    message.request = RequestDeliverTx.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* tendermint.abci.ResponseDeliverTx response */ 2:
                    message.response = ResponseDeliverTx.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* tendermint.abci.RequestDeliverTx request = 1; */
        if (message.request)
            RequestDeliverTx.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tendermint.abci.ResponseDeliverTx response = 2; */
        if (message.response)
            ResponseDeliverTx.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.BlockMetadata.DeliverTx
 */
export const BlockMetadata_DeliverTx = new BlockMetadata_DeliverTx$Type();
