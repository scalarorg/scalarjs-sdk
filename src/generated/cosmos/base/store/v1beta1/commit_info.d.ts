// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/store/v1beta1/commit_info.proto" (package "cosmos.base.store.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * CommitInfo defines commit information used by the multi-store when committing
 * a version/height.
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.CommitInfo
 */
export interface CommitInfo {
    /**
     * @generated from protobuf field: int64 version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.store.v1beta1.StoreInfo store_infos = 2;
     */
    storeInfos: StoreInfo[];
}
/**
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.StoreInfo
 */
export interface StoreInfo {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: cosmos.base.store.v1beta1.CommitID commit_id = 2;
     */
    commitId?: CommitID;
}
/**
 * CommitID defines the committment information when a specific store is
 * committed.
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.CommitID
 */
export interface CommitID {
    /**
     * @generated from protobuf field: int64 version = 1;
     */
    version: string;
    /**
     * @generated from protobuf field: bytes hash = 2;
     */
    hash: Uint8Array;
}
declare class CommitInfo$Type extends MessageType<CommitInfo> {
    constructor();
    create(value?: PartialMessage<CommitInfo>): CommitInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommitInfo): CommitInfo;
    internalBinaryWrite(message: CommitInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.CommitInfo
 */
export declare const CommitInfo: CommitInfo$Type;
declare class StoreInfo$Type extends MessageType<StoreInfo> {
    constructor();
    create(value?: PartialMessage<StoreInfo>): StoreInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreInfo): StoreInfo;
    internalBinaryWrite(message: StoreInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.StoreInfo
 */
export declare const StoreInfo: StoreInfo$Type;
declare class CommitID$Type extends MessageType<CommitID> {
    constructor();
    create(value?: PartialMessage<CommitID>): CommitID;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommitID): CommitID;
    internalBinaryWrite(message: CommitID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.CommitID
 */
export declare const CommitID: CommitID$Type;
export {};
