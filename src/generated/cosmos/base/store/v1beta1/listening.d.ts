// @generated by protobuf-ts 2.9.4 with parameter long_type_string,output_javascript_es2015,generate_dependencies
// @generated from protobuf file "cosmos/base/store/v1beta1/listening.proto" (package "cosmos.base.store.v1beta1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ResponseDeliverTx } from "../../../../tendermint/abci/types";
import { RequestDeliverTx } from "../../../../tendermint/abci/types";
import { ResponseCommit } from "../../../../tendermint/abci/types";
import { ResponseEndBlock } from "../../../../tendermint/abci/types";
import { RequestEndBlock } from "../../../../tendermint/abci/types";
import { ResponseBeginBlock } from "../../../../tendermint/abci/types";
import { RequestBeginBlock } from "../../../../tendermint/abci/types";
/**
 * StoreKVPair is a KVStore KVPair used for listening to state changes (Sets and Deletes)
 * It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and
 * Deletes
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.StoreKVPair
 */
export interface StoreKVPair {
    /**
     * @generated from protobuf field: string store_key = 1;
     */
    storeKey: string;
    /**
     * @generated from protobuf field: bool delete = 2;
     */
    delete: boolean;
    /**
     * @generated from protobuf field: bytes key = 3;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 4;
     */
    value: Uint8Array;
}
/**
 * BlockMetadata contains all the abci event data of a block
 * the file streamer dump them into files together with the state changes.
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.BlockMetadata
 */
export interface BlockMetadata {
    /**
     * @generated from protobuf field: tendermint.abci.RequestBeginBlock request_begin_block = 1;
     */
    requestBeginBlock?: RequestBeginBlock;
    /**
     * @generated from protobuf field: tendermint.abci.ResponseBeginBlock response_begin_block = 2;
     */
    responseBeginBlock?: ResponseBeginBlock;
    /**
     * @generated from protobuf field: repeated cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3;
     */
    deliverTxs: BlockMetadata_DeliverTx[];
    /**
     * @generated from protobuf field: tendermint.abci.RequestEndBlock request_end_block = 4;
     */
    requestEndBlock?: RequestEndBlock;
    /**
     * @generated from protobuf field: tendermint.abci.ResponseEndBlock response_end_block = 5;
     */
    responseEndBlock?: ResponseEndBlock;
    /**
     * @generated from protobuf field: tendermint.abci.ResponseCommit response_commit = 6;
     */
    responseCommit?: ResponseCommit;
}
/**
 * DeliverTx encapulate deliver tx request and response.
 *
 * @generated from protobuf message cosmos.base.store.v1beta1.BlockMetadata.DeliverTx
 */
export interface BlockMetadata_DeliverTx {
    /**
     * @generated from protobuf field: tendermint.abci.RequestDeliverTx request = 1;
     */
    request?: RequestDeliverTx;
    /**
     * @generated from protobuf field: tendermint.abci.ResponseDeliverTx response = 2;
     */
    response?: ResponseDeliverTx;
}
declare class StoreKVPair$Type extends MessageType<StoreKVPair> {
    constructor();
    create(value?: PartialMessage<StoreKVPair>): StoreKVPair;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreKVPair): StoreKVPair;
    internalBinaryWrite(message: StoreKVPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.StoreKVPair
 */
export declare const StoreKVPair: StoreKVPair$Type;
declare class BlockMetadata$Type extends MessageType<BlockMetadata> {
    constructor();
    create(value?: PartialMessage<BlockMetadata>): BlockMetadata;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockMetadata): BlockMetadata;
    internalBinaryWrite(message: BlockMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.BlockMetadata
 */
export declare const BlockMetadata: BlockMetadata$Type;
declare class BlockMetadata_DeliverTx$Type extends MessageType<BlockMetadata_DeliverTx> {
    constructor();
    create(value?: PartialMessage<BlockMetadata_DeliverTx>): BlockMetadata_DeliverTx;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockMetadata_DeliverTx): BlockMetadata_DeliverTx;
    internalBinaryWrite(message: BlockMetadata_DeliverTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message cosmos.base.store.v1beta1.BlockMetadata.DeliverTx
 */
export declare const BlockMetadata_DeliverTx: BlockMetadata_DeliverTx$Type;
export {};
